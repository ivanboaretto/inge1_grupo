

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (31 August 2023 20:05:08) as /home/clinux01/linux64/linux64/CuisUniversity-5981.image!


Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'toto 8/31/2023 20:38:04'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

Object subclass: #xxx
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'toto 8/31/2023 20:38:47'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'toto 8/31/2023 20:38:53'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'toto 8/31/2023 20:38:56'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'toto 8/31/2023 20:39:30'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!
!XXX methodsFor: 'no messages' stamp: 'toto 8/31/2023 20:49:56'!
findOddsPart0
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at index)].
		index := index+1.
		].
	^odds. ! !

XXX new!

XXX new!

XXX new!

XXX!

Object!

ProtoObject!

XXX new!

XXX new findOddsPart0 !

----STARTUP---- (31 August 2023 21:06:46) as /home/clinux01/linux64/linux64/CuisUniversity-5981.image!


!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'tt 8/31/2023 21:06:54'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'tt 8/31/2023 21:06:54'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'tt 8/31/2023 21:06:54'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'tt 8/31/2023 21:06:54'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'tt 8/31/2023 21:06:54'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'tt 8/31/2023 21:06:54'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'tt 8/31/2023 21:06:54'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'tt 8/31/2023 21:06:54'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'tt 8/31/2023 21:06:54'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!
!XXX methodsFor: 'no messages' stamp: 'toto 8/31/2023 20:49:56'!
findOddsPart0
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at index)].
		index := index+1.
		].
	^odds. ! !

----STARTUP---- (31 August 2023 21:07:01) as /home/clinux01/linux64/linux64/CuisUniversity-5981.image!


Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 's 8/31/2023 21:08:48'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!
!XXX methodsFor: 'no messages' stamp: 's 8/31/2023 21:09:19'!
findOddsPart0
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at: index)].
		index := index+1.
		].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:11:07'!
findOddsPart1
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	elements do:[:element | element odd ifTrue: [odds add: element]].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:11:16' prior: 50650492!
findOddsPart1
	|elements odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	elements do:[:element | element odd ifTrue: [odds add: element]].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:12:22'!
findOddsPart2
	|elements odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	elements select: []. 
	elements do:[:element | element odd ifTrue: [odds add: element]].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:12:28' prior: 50650501!
findOddsPart1
	|elements odds|
	
	elements:=#(1 2 5 6 9).
	odds:=Set new.
	elements do:[:element | element odd ifTrue: [odds add: element]].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:13:14' prior: 50650509!
findOddsPart2
	|elements odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	elements select: [:element | element odd]. 
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:13:41' prior: 50650526!
findOddsPart2
	|elements odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	elements select: [:element | element odd]. 
	^elements. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:14:35' prior: 50650534!
findOddsPart2
	|elements |
	
	elements:=#(1 2 5 6 9).
	^elements select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:14:55' prior: 50650542!
findOddsPart2
	|elements |
	elements:=#(1 2 5 6 9).
	^elements select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:15:24'!
findOddsPart2ymedio
	
^#(1 2 5 6 9) select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:15:33' prior: 50650554!
findOddsPart2ymedio
	^#(1 2 5 6 9) select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:16:46' prior: 50650548!
findOddsPart2
	|elements |
	elements:=#(1 2 5 6 9).
	^elements select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:17:50'!
findDoubles
	|elements |
	elements:=#(1 2 5 6 9).
	^elements select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:22:38'!
findDoubles0
	|elements|
	
	elements:=#(1 2 5 6 9).
	^elements collect: [:element| element*2].! !

!methodRemoval: XXX #findDoubles0 stamp: 's 8/31/2023 21:22:44'!
findDoubles0
	|elements|
	
	elements:=#(1 2 5 6 9).
	^elements collect: [:element| element*2].!
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:23:01' prior: 50650570!
findDoubles
	|elements |
	elements:=#(1 2 5 6 9).
	^elements collect: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:23:04' prior: 50650587!
findDoubles
	|elements |
	elements:=#(1 2 5 6 9).
	^elements collect: [:element | element*2]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:24:48'!
findFirstEven
	|elements |
	elements:=#(1 2 5 6 9).
	^elements findFirst: [:element| element even] startingAt: 1.
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:25:54'!
findFirstEven2
	|elements |
	elements:=#(1 2 5 6 9).
	^elements findFirst: [:element| element even] startingAt: 1.
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:26:52' prior: 50650599!
findFirstEven
	|elements |
	elements:=#(1 2 5 6 9).
	^elements detect: [:element| element even].
	! !

	|elements |
	elements:=#(1 2 5 6 9).
	^elements detect: [:element| element even].
	!

|elements |
	elements:=#(1 2 5 6 9).
	^elements findFirst: [:element| element even] startingAt: 1.!

|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at: index)].
		index := index+1.
		].
	^odds. !

----STARTUP---- (31 August 2023 21:29:51) as /home/clinux01/linux64/linux64/CuisUniversity-5981.image!


!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 't 8/31/2023 21:29:55'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 't 8/31/2023 21:29:55'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 't 8/31/2023 21:29:56'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 't 8/31/2023 21:29:56'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 't 8/31/2023 21:29:56'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 't 8/31/2023 21:29:56'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 't 8/31/2023 21:29:56'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 't 8/31/2023 21:29:56'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 't 8/31/2023 21:29:56'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!
!XXX methodsFor: 'no messages' stamp: 'toto 8/31/2023 20:49:56'!
findOddsPart0
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at index)].
		index := index+1.
		].
	^odds. ! !

----STARTUP---- (31 August 2023 21:30:01) as /home/clinux01/linux64/linux64/CuisUniversity-5981.image!


!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:30:38'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:30:38'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

----STARTUP---- (31 August 2023 21:31:07) as /home/clinux01/linux64/linux64/CuisUniversity-5981.image!


!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:31:41'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:31:41'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

----STARTUP---- (31 August 2023 21:32:08) as /home/clinux01/linux64/linux64/CuisUniversity-5981.image!


!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 't 8/31/2023 21:32:12'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 't 8/31/2023 21:32:12'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 't 8/31/2023 21:32:12'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 't 8/31/2023 21:32:12'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 't 8/31/2023 21:32:12'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 't 8/31/2023 21:32:12'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 't 8/31/2023 21:32:12'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 't 8/31/2023 21:32:12'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 't 8/31/2023 21:32:12'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!
!XXX methodsFor: 'no messages' stamp: 'toto 8/31/2023 20:49:56'!
findOddsPart0
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at index)].
		index := index+1.
		].
	^odds. ! !

----STARTUP---- (31 August 2023 21:32:47) as /home/clinux01/linux64/linux64/CuisUniversity-5981.image!


!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:33:28'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:33:28'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:33:57'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:33:57'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:04'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:04'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:15'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:18'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:18'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:30'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:57'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:34:58'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'd 8/31/2023 21:35:01'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!
!XXX methodsFor: 'no messages' stamp: 's 8/31/2023 21:09:19'!
findOddsPart0
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at: index)].
		index := index+1.
		].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:24:48'!
findFirstEven
	|elements |
	elements:=#(1 2 5 6 9).
	^elements findFirst: [:element| element even] startingAt: 1.
	! !
!XXX methodsFor: 'no messages' stamp: 's 8/31/2023 21:09:19' prior: 50651396!
findOddsPart0
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at: index)].
		index := index+1.
		].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:11:07'!
findOddsPart1
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	elements do:[:element | element odd ifTrue: [odds add: element]].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:11:16' prior: 50651425!
findOddsPart1
	|elements odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	elements do:[:element | element odd ifTrue: [odds add: element]].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:12:22'!
findOddsPart2
	|elements odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	elements select: []. 
	elements do:[:element | element odd ifTrue: [odds add: element]].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:12:28' prior: 50651434!
findOddsPart1
	|elements odds|
	
	elements:=#(1 2 5 6 9).
	odds:=Set new.
	elements do:[:element | element odd ifTrue: [odds add: element]].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:13:14' prior: 50651442!
findOddsPart2
	|elements odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	elements select: [:element | element odd]. 
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:13:41' prior: 50651459!
findOddsPart2
	|elements odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	elements select: [:element | element odd]. 
	^elements. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:14:35' prior: 50651467!
findOddsPart2
	|elements |
	
	elements:=#(1 2 5 6 9).
	^elements select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:14:55' prior: 50651475!
findOddsPart2
	|elements |
	elements:=#(1 2 5 6 9).
	^elements select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:15:24'!
findOddsPart2ymedio
	
^#(1 2 5 6 9) select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:15:33' prior: 50651487!
findOddsPart2ymedio
	^#(1 2 5 6 9) select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:16:46' prior: 50651481!
findOddsPart2
	|elements |
	elements:=#(1 2 5 6 9).
	^elements select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:17:50'!
findDoubles
	|elements |
	elements:=#(1 2 5 6 9).
	^elements select: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:22:38'!
findDoubles0
	|elements|
	
	elements:=#(1 2 5 6 9).
	^elements collect: [:element| element*2].! !

!methodRemoval: XXX #findDoubles0 stamp: 'd 8/31/2023 21:35:53'!
findDoubles0
	|elements|
	
	elements:=#(1 2 5 6 9).
	^elements collect: [:element| element*2].!
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:23:01' prior: 50651503!
findDoubles
	|elements |
	elements:=#(1 2 5 6 9).
	^elements collect: [:element | element odd]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:23:04' prior: 50651520!
findDoubles
	|elements |
	elements:=#(1 2 5 6 9).
	^elements collect: [:element | element*2]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:24:48' prior: 50651407!
findFirstEven
	|elements |
	elements:=#(1 2 5 6 9).
	^elements findFirst: [:element| element even] startingAt: 1.
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:25:54'!
findFirstEven2
	|elements |
	elements:=#(1 2 5 6 9).
	^elements findFirst: [:element| element even] startingAt: 1.
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 's 8/31/2023 21:26:52' prior: 50651532!
findFirstEven
	|elements |
	elements:=#(1 2 5 6 9).
	^elements detect: [:element| element even].
	! !
!XXX methodsFor: 'no messages' stamp: 'toto 8/31/2023 20:49:56' prior: 50651414!
findOddsPart0
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at index)].
		index := index+1.
		].
	^odds. ! !
!XXX methodsFor: 'no messages' stamp: 'toto 8/31/2023 20:49:56' prior: 50651551!
findOddsPart0
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at index)].
		index := index+1.
		].
	^odds. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'd 8/31/2023 21:36:36' prior: 50651545!
findFirstEven
	|elements |
	elements:=#(1 2 5 6 9).
	^elements detect: [:element| element even] ifNone: [0].
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'd 8/31/2023 21:37:30' prior: 50651573!
findFirstEven
	|elements |
	elements:=#(1 2 5 6 9).
	^elements detect: [:element| element even] ifNone: [self error: 'falla'].
	! !
!XXX methodsFor: 'as yet unclassified' stamp: 'd 8/31/2023 21:40:26'!
sumElementsInjecting
	|elements |
	elements:=#(1 2 5 6 9).
	^elements inject: 0 into:[:sum : element | sum+element]. ! !

|elements |
	elements:=#(1 2 5 6 9).
	^elements inject: 0 into:[:sum : element | sum+element]. !
!XXX methodsFor: 'as yet unclassified' stamp: 'd 8/31/2023 21:41:45' prior: 50651587!
sumElementsInjecting
	|elements |
	elements:=#(1 2 5 6 9).
	^elements inject: 2 into:[:sum : element | sum+element].  ! !

|elements |
	elements:=#(1 2 5 6 9).
	^elements inject: 2 into:[:sum : element | sum+element].  !
!XXX methodsFor: 'as yet unclassified' stamp: 'd 8/31/2023 21:42:29' prior: 50651597!
sumElementsInjecting
	|elements |
	elements:=#(1 2 5 6 9).
	^elements inject: 0 into:[:sum : element | sum+element]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'd 8/31/2023 21:43:34' prior: 50651607!
sumElementsInjecting
	|elements |
	elements:=#().
	^elements inject: 0 into:[:sum : element | sum+element]. ! !

|elements |
	elements:=#().
	^elements inject: 0 into:[:sum : element | sum+element].!
!XXX methodsFor: 'as yet unclassified' stamp: 'd 8/31/2023 21:43:49' prior: 50651614!
sumElementsInjecting
	|elements |
	elements:=#(1 2 5 6 9).
	^elements inject: 0 into:[:sum : element | sum+element]. ! !
!XXX methodsFor: 'as yet unclassified' stamp: 'd 8/31/2023 21:48:09'!
extractVowels
	|str |
	str:='asdfñlkasdflki'.
	^str select:[:char | char isVowel ].! !
!XXX methodsFor: 'as yet unclassified' stamp: 'd 8/31/2023 21:48:18' prior: 50651629!
extractVowels
	|string |
	string:='asdfñlkasdflki'.
	^string select:[:char | char isVowel ].! !

----End fileIn of /home/clinux01/linux64/linux64/Packages/TerseGuide.pck.st----!

x  OrderedCollection with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x  OrderedCollection new.						"allocate a collection"
x add: 3; add: 2; add: 1; add: 4; yourself!

x  OrderedCollection with: 4 with: 3 with: 2 with: 1.	"create collection with 4 elements"
x  OrderedCollection new.						"allocate a collection"
x add: 3; add: 2; add: 1; add: 4; yourself.	"add element to collection"
y  x addFirst: 5; yourself.	!

----STARTUP---- (28 September 2023 17:59:37) as /home/clinux01/linux64/linux64/CuisUniversity-5981.image!


!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'k 9/28/2023 18:01:15'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #NameOfSubclass category: 'Collections-Excercises' stamp: 'k 9/28/2023 18:01:15'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'k 9/28/2023 18:01:15'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XX category: 'Collections-Excercises' stamp: 'k 9/28/2023 18:01:15'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'k 9/28/2023 18:01:15'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collections-Excercises' stamp: 'k 9/28/2023 18:01:15'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classRemoval: #XX stamp: 'k 9/28/2023 18:01:16'!
Object subclass: #XX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collections-Excercises'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'k 9/28/2023 18:01:16'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!

!classDefinition: #XXX category: 'Collection-Excercise' stamp: 'k 9/28/2023 18:01:16'!
Object subclass: #XXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Collection-Excercise'!
!XXX methodsFor: 'no messages' stamp: 'toto 8/31/2023 20:49:56'!
findOddsPart0
	|elements index odds|
	
	elements:=#(1 2 5 6 9).
	odds:=OrderedCollection new.
	index:=1.
	[index <= elements  size ]
	whileTrue :[
		((elements at: index) odd) ifTrue: [odds add:(elements at index)].
		index := index+1.
		].
	^odds. ! !

----STARTUP---- (28 September 2023 18:05:53) as /home/clinux01/linux64/linux64/CuisUniversity-5981.image!


TestCase subclass: #Roman
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!

!classDefinition: #Roman category: 'Roman' stamp: 'd 9/28/2023 18:27:14'!
TestCase subclass: #Roman
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!
!Roman methodsFor: 'nil' stamp: 'd 9/28/2023 18:27:49'!
test01

	self assert: 1 asRoman equals: 'I'.! !
!Roman methodsFor: 'as yet unclassified' stamp: 'd 9/28/2023 18:27:57'!
test02

	self assert: 2 asRoman equals: 'Il'.! !
!Roman methodsFor: 'as yet unclassified' stamp: 'd 9/28/2023 18:28:07'!
test03

	self assert: 3 asRoman equals: 'III'.! !
!Roman methodsFor: 'as yet unclassified' stamp: 'd 9/28/2023 18:28:13'!
test04

	self assert: 4 asRoman equals: 'IV'.! !
!Roman methodsFor: 'as yet unclassified' stamp: 'd 9/28/2023 18:28:19'!
test05

	self assert: 5 asRoman equals: 'V'.! !
!Roman methodsFor: 'as yet unclassified' stamp: 'd 9/28/2023 18:28:26'!
test06

	self assert: 5 asRoman equals: 'VI'.! !

!testRun: #Roman #test01 stamp: 'd 9/28/2023 18:28:29'!
ERROR!
!SmallInteger methodsFor: '*Romans' stamp: 'd 9/28/2023 18:28:38'!
asRoman
	self shouldBeImplemented.! !
!SmallInteger methodsFor: '*Romans' stamp: 'd 9/28/2023 18:28:52' prior: 50650897!
asRoman
	self = 1 ifTrue: ['I'].! !
!SmallInteger methodsFor: '*Romans' stamp: 'd 9/28/2023 18:29:14' prior: 50650901!
asRoman
	self = 1 ifTrue: ['I'].
	self = 2 ifTrue: ['II'].
	self = 3 ifTrue: ['III'].
	self = 4 ifTrue: ['IV'].
	self = 5 ifTrue: ['V'].
	self = 6 ifTrue: ['VI'].
	! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'd 9/28/2023 18:29:15'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'd 9/28/2023 18:29:15'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'd 9/28/2023 18:29:15'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'd 9/28/2023 18:29:15'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'd 9/28/2023 18:29:15'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'd 9/28/2023 18:29:15'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'd 9/28/2023 18:29:15'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'd 9/28/2023 18:29:15'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'd 9/28/2023 18:29:15'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'd 9/28/2023 18:29:15'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'd 9/28/2023 18:29:15'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'd 9/28/2023 18:29:15'!
PASSED!

!testRun: #Roman #test01 stamp: 'd 9/28/2023 18:29:19'!
FAILURE!

!testRun: #Roman #test01 stamp: 'd 9/28/2023 18:29:19'!
FAILURE!

!testRun: #Roman #test01 stamp: 'd 9/28/2023 18:29:22'!
FAILURE!

!testRun: #Roman #test02 stamp: 'd 9/28/2023 18:29:22'!
FAILURE!

!testRun: #Roman #test03 stamp: 'd 9/28/2023 18:29:22'!
FAILURE!

!testRun: #Roman #test04 stamp: 'd 9/28/2023 18:29:22'!
FAILURE!

!testRun: #Roman #test05 stamp: 'd 9/28/2023 18:29:22'!
FAILURE!

!testRun: #Roman #test06 stamp: 'd 9/28/2023 18:29:22'!
FAILURE!
!Roman methodsFor: 'as yet unclassified' stamp: 'd 9/28/2023 18:29:35' prior: 50650871!
test01

	self assert: 1 asRoman equals: 'I'.! !

!testRun: #Roman #test01 stamp: 'd 9/28/2023 18:29:36'!
FAILURE!

!testRun: #Roman #test01 stamp: 'd 9/28/2023 18:29:39'!
FAILURE!

!testRun: #Roman #test02 stamp: 'd 9/28/2023 18:29:39'!
FAILURE!

!testRun: #Roman #test03 stamp: 'd 9/28/2023 18:29:39'!
FAILURE!

!testRun: #Roman #test04 stamp: 'd 9/28/2023 18:29:39'!
FAILURE!

!testRun: #Roman #test05 stamp: 'd 9/28/2023 18:29:39'!
FAILURE!

!testRun: #Roman #test06 stamp: 'd 9/28/2023 18:29:39'!
FAILURE!
!SmallInteger methodsFor: '*Romans' stamp: 'd 9/28/2023 18:30:06' prior: 50650905!
asRoman
	self = 1 ifTrue: [^'I'].
	self = 2 ifTrue: [^'II'].
	self = 3 ifTrue: [^'III'].
	self = 4 ifTrue: [^'IV'].
	self = 5 ifTrue: [^'V'].
	self = 6 ifTrue: [^'VI'].
	! !

!testRun: #Roman #test01 stamp: 'd 9/28/2023 18:30:09'!
PASSED!

!testRun: #Roman #test02 stamp: 'd 9/28/2023 18:30:09'!
FAILURE!

!testRun: #Roman #test03 stamp: 'd 9/28/2023 18:30:09'!
PASSED!

!testRun: #Roman #test04 stamp: 'd 9/28/2023 18:30:09'!
PASSED!

!testRun: #Roman #test05 stamp: 'd 9/28/2023 18:30:09'!
PASSED!

!testRun: #Roman #test06 stamp: 'd 9/28/2023 18:30:09'!
FAILURE!
!Roman methodsFor: 'as yet unclassified' stamp: 'd 9/28/2023 18:30:12' prior: 50650875!
test02

	self assert: 2 asRoman equals: 'II'.! !
!Roman methodsFor: 'as yet unclassified' stamp: 'd 9/28/2023 18:30:18' prior: 50650891!
test06

	self assert: 6 asRoman equals: 'VI'.! !

!testRun: #Roman #test01 stamp: 'd 9/28/2023 18:30:23'!
PASSED!

!testRun: #Roman #test02 stamp: 'd 9/28/2023 18:30:23'!
PASSED!

!testRun: #Roman #test03 stamp: 'd 9/28/2023 18:30:23'!
PASSED!

!testRun: #Roman #test04 stamp: 'd 9/28/2023 18:30:23'!
PASSED!

!testRun: #Roman #test05 stamp: 'd 9/28/2023 18:30:23'!
PASSED!

!testRun: #Roman #test06 stamp: 'd 9/28/2023 18:30:23'!
PASSED!

!classRemoval: #Roman stamp: 'd 9/28/2023 20:17:22'!
TestCase subclass: #Roman
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Roman'!

----End fileIn of /home/clinux01/Descargas/TDDBabyStepsGame.st----!

	^ TDDBabyStepsGameView for: self buildGame.!

TDDBabyStepsGameContador start!

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'd 9/28/2023 20:29:20'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

game:= TDDBabyStepsContadorTest start.!

game:= TDDBabyStepsGameContador start.!

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'd 9/28/2023 20:31:28'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:31:41'!
test01UnNuevoContadorEmpiezaConValorCero

	| contador |
		
	contador := Contador new.
	self assert: 0 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:31:52'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:32:25'!
ERROR!
!Object methodsFor: 'x' stamp: 'd 9/28/2023 20:32:34'!
new
	self shouldBeImplemented.! !

!classDefinition: #Contador category: 'TDDBabySteps' stamp: 'd 9/28/2023 20:33:38'!
Object subclass: #Contador
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabySteps'!
!Object methodsFor: 'x' stamp: 'd 9/28/2023 20:33:00' prior: 50652867!
new
	Contador initialize.! !

!testRun: #ObjectTest #testErrorSignalsTheRightException stamp: 'd 9/28/2023 20:33:40'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenBecauseSignalsTheRightError stamp: 'd 9/28/2023 20:33:40'!
PASSED!

!testRun: #ObjectTest #testShouldNotHappenSignalsTheRightError stamp: 'd 9/28/2023 20:33:40'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:33:45'!
ERROR!
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:33:53'!
valor
	self shouldBeImplemented.! !
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:34:00' prior: 50652895!
valor
	^value.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:34:02'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:34:10'!
FAILURE!

!classDefinition: #Contador category: 'TDDBabySteps' stamp: 'd 9/28/2023 20:34:44'!
Object subclass: #Contador
	instanceVariableNames: 'value valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabySteps'!
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:34:41' overrides: 16920235!
initialize
	^valor:= 0.! !

Object subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabySteps'!

!classDefinition: #Contador category: 'TDDBabySteps' stamp: 'd 9/28/2023 20:34:50'!
Object subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabySteps'!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:35:03'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:35:03'!
ERROR!
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:35:25' prior: 50652899!
valor
	^valor.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:35:28'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:35:28'!
ERROR!
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:35:39' prior: 50652917 overrides: 16920235!
initialize
	^valor := 0.! !

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classDefinition: #NameOfSubclass category: 'TDDBabyStepsGame' stamp: 'd 9/28/2023 20:36:11'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

Object subclass: #Contador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classDefinition: #Contador category: 'TDDBabyStepsGame' stamp: 'd 9/28/2023 20:36:17'!
Object subclass: #Contador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

Object subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!classDefinition: #Contador category: 'TDDBabyStepsGame' stamp: 'd 9/28/2023 20:36:29'!
Object subclass: #Contador
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGame'!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:36:38'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:36:38'!
ERROR!
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:37:00' prior: 50652939!
valor
	^valor value.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:37:03'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:37:03'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:37:07'!
ERROR!
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:37:19' prior: 50652995!
valor
	^valor.! !
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:37:22' prior: 50652950 overrides: 16920235!
initialize
	valor := 0.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:37:23'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:37:25'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:37:25'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:37:25'!
ERROR!

!methodRemoval: TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:37:25'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:37:25'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:37:25'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:37:40'!
ERROR!
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:37:43'!
incrementar
	self shouldBeImplemented.! !
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:37:50' prior: 50653060!
incrementar
	valor:= valor+1.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:37:53'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:37:53'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:37:55'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:37:55'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:37:55'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'd 9/28/2023 20:37:55'!
PASSED!

!methodRemoval: TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'd 9/28/2023 20:37:55'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	!
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:38:48' prior: 50653064!
incrementar
	valor:= 1.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:38:50'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:38:50'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:38:51'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:38:51'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:38:51'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'd 9/28/2023 20:38:51'!
FAILURE!

!methodRemoval: TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'd 9/28/2023 20:38:51'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:38:51'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'd 9/28/2023 20:38:51'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:38:58'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:38:58'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'd 9/28/2023 20:38:58'!
FAILURE!
!Contador methodsFor: 'x' stamp: 'd 9/28/2023 20:39:16' prior: 50653111!
incrementar
	valor:= valor+1.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:39:17'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:39:17'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'd 9/28/2023 20:39:17'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:39:18'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:39:18'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'd 9/28/2023 20:39:18'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:39:18'!
extraTest
	
	self assert: true.
	! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'd 9/28/2023 20:39:18'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'd 9/28/2023 20:39:18'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'd 9/28/2023 20:39:18'!
PASSED!

game:= TDDBabyStepsGameAnagrams start.!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'd 9/28/2023 20:41:39'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:42:35'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:42:37'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:42:37'!
ERROR!
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:42:57'!
anagrams
	self shouldBeImplemented.! !
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:43:16' prior: 50653257!
anagrams
	^''.! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:43:25'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:43:25'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:44:02'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:44:02'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:44:18'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:44:18'!
FAILURE!

'' anagrams!
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:44:42' prior: 50653261!
anagrams
	^Set with: ''.! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:44:44'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:44:47'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:44:47'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:44:47'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:44:47'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:44:47'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:44:47'!
FAILURE!
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:45:38' prior: 50653291!
anagrams
	self = '' ifTrue: [^Set with: ''].
	^'a'.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:45:44'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:45:44'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:45:44'!
FAILURE!
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:46:43' prior: 50653334!
anagrams
	self = '' ifTrue: [^Set with: ''].
	^Set with: 'a'.
	! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'd 9/28/2023 20:46:44'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:46:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:46:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:46:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:46:51'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:46:51'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:46:51'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:46:51'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:46:51'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:46:51'!
FAILURE!
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:47:34' prior: 50653352!
anagrams
	self = '' ifTrue: [^Set with: ''].
	self = 'a' ifTrue: [^Set with: 'a'].
	^Set with: 'ab'.
	! !
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:47:53' prior: 50653464!
anagrams
	self = '' ifTrue: [^Set with: ''].
	self = 'a' ifTrue: [^Set with: 'a'].
	^Set with:'ab' with: 'ba'.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:48:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:48:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:48:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:48:20'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:48:20'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:48:20'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:48:20'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 20:48:20'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 20:48:20'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:48:20'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 20:48:20'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 20:48:35'!
FAILURE!
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:51:01' prior: 50653470!
anagrams
	|anagrams|
	
	self = '' ifTrue: [^Set with: ''].
	self = 'a' ifTrue: [^Set with: 'a'].
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'].
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.
	
	^anagrams.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:51:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:51:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:51:05'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 20:51:05'!
PASSED!

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'd 9/28/2023 20:51:23'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:51:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:51:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:51:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 20:51:28'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:51:29'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:51:29'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:51:29'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 20:51:29'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:51:29'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'd 9/28/2023 20:51:29'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'd 9/28/2023 20:51:29'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:51:29'!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.

	self assert: anagrams equals: 'abcd' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'd 9/28/2023 20:51:29'!
FAILURE!
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:52:12' prior: 50653554!
anagrams
	|anagrams anagrams2|
	
	self = '' ifTrue: [^Set with: ''].
	self = 'a' ifTrue: [^Set with: 'a'].
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'].
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.
	
	anagrams2 := Set new.
	anagrams2 add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.
	
	^anagrams.
	! !
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:52:46' prior: 50653745!
anagrams
	|anagrams anagrams2|
	
	self = '' ifTrue: [^Set with: ''].
	self = 'a' ifTrue: [^Set with: 'a'].
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'].
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.
	self = 'abc' ifTrue: [^anagrams].
	
	anagrams2 := Set new.
	anagrams2 add: 'abcd'; add: 'abdc'; add: 'acbd'; add: 'acdb'; add: 'adbc'; add: 'adcb'; add: 'bacd'; add: 'badc'; add: 'bcad'; add: 'bcda'; add: 'bdac'; add: 'bdca'; add: 'cabd'; add: 'cadb'; add: 'cbad'; add: 'cbda'; add: 'cdab'; add: 'cdba'; add: 'dabc'; add: 'dacb'; add: 'dbac'; add: 'dbca'; add: 'dcab'; add: 'dcba'.
	
	^anagrams2.
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:52:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:52:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:52:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 20:52:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'd 9/28/2023 20:52:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:52:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:52:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:52:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 20:52:54'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'd 9/28/2023 20:52:54'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'd 9/28/2023 20:52:54'!
testExtraToCheckGeneralizationOnKata

	self assert: 40320 equals:`'abcdefgh' anagrams` size.
	
	self assert: (`'abcdefgh' anagrams`) includes: 'cghdbeaf'.
	
	self assert: 10080 equals: `'abcdefab' anagrams` size
	! !

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'd 9/28/2023 20:52:54'!
FAILURE!
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:57:55' prior: 50653769!
anagrams
	
	
	self = '' ifTrue: [^Set with: ''].
	self = 'a' ifTrue: [^Set with: 'a'].
	
	self do:[:letra| letra ,((self remove:letra) anagrams)]
	! !
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 20:58:12' prior: 50653853!
anagrams
	
	
	self = '' ifTrue: [^Set with: ''].
	
	self do:[:letra| letra ,((self remove:letra) anagrams)]
	! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'd 9/28/2023 20:58:13'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 20:58:23'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:58:23'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 20:58:23'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 20:58:23'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'd 9/28/2023 20:58:23'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'd 9/28/2023 20:58:23'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 20:58:27'!
ERROR!
!String methodsFor: '*anagrams' stamp: 'd 9/28/2023 21:01:01' prior: 50653861!
anagrams
	
	|anagrams|
	self = '' ifTrue: [^Set with: ''].
	anagrams:= Set new.
	self do:[:letra |anagrams add: ( letra , ((self remove:letra) anagrams)) ].
	^anagrams.! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'd 9/28/2023 21:01:02'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'd 9/28/2023 21:01:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 21:01:07'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'd 9/28/2023 21:01:08'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'd 9/28/2023 21:01:08'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'd 9/28/2023 21:01:08'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'd 9/28/2023 21:01:08'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'd 9/28/2023 21:01:09'!
ERROR!

 TDDBabyStepsGameRot13 start. !

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'd 9/28/2023 21:03:56'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:04:06'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:04:09'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:04:09'!
ERROR!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:04:21'!
asRot13
	self shouldBeImplemented.! !
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:04:31' prior: 50654075!
asRot13
	 ^true.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:04:35'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:04:35'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:04:56' prior: 50654079!
asRot13
	 ^'a'.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:05:01'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:05:01'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:05:13' prior: 50654091!
asRot13
	 ^'n'.! !

!testRun: #CharacterTest #testCaseConversion stamp: 'd 9/28/2023 21:05:14'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'd 9/28/2023 21:05:14'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'd 9/28/2023 21:05:14'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'd 9/28/2023 21:05:14'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'd 9/28/2023 21:05:14'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'd 9/28/2023 21:05:14'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'd 9/28/2023 21:05:14'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'd 9/28/2023 21:05:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:05:16'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:05:16'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:05:26' prior: 50654103!
asRot13
	 ^$n.! !

!testRun: #CharacterTest #testCaseConversion stamp: 'd 9/28/2023 21:05:27'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'd 9/28/2023 21:05:27'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'd 9/28/2023 21:05:27'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'd 9/28/2023 21:05:27'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'd 9/28/2023 21:05:27'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'd 9/28/2023 21:05:27'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'd 9/28/2023 21:05:27'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'd 9/28/2023 21:05:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:05:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:05:30'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:05:30'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:05:30'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:05:30'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:05:30'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:05:30'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:06:08' prior: 50654136!
asRot13
	self = $a ifTrue: [^$n.].
	^$m.
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:09'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:09'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:06:16' prior: 50654198!
asRot13
	self = $a ifTrue: [^$n.].
	^$z.
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:20'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:06:20'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:20'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:20'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:06:20'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:20'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:06:40' prior: 50654216!
asRot13
	self = $a ifTrue: [^$n.].
	self = $n ifTrue: [^$a.].
	^$z.
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:48'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:48'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:06:48'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:48'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:48'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:06:48'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:06:48'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:07:19' prior: 50654267!
asRot13
	self = $a ifTrue: [^$n.].
	self = $n ifTrue: [^$a.].
	self = $m ifTrue: [^$z.].
	^$m.
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:23'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:07:23'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:07:23'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:07:23'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:07:23'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:07:23'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:07:47' prior: 50654327!
asRot13
	self = $a ifTrue: [^$n.].
	self = $n ifTrue: [^$a.].
	self = $m ifTrue: [^$z.].
	self = $z ifTrue: [^$m.].
	^$`.
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:07:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:07:51'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:07:51'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:07:51'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:07:51'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:07:51'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:07:51'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:07:51'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:08:09' prior: 50654392!
asRot13
	self = $a ifTrue: [^$n.].
	self = $n ifTrue: [^$a.].
	self = $m ifTrue: [^$z.].
	self = $z ifTrue: [^$m.].
	self = $` ifTrue: [^$`.].
	^${.
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:08:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:08:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:08:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:08:13'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:08:13'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:13'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:13'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:08:13'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:08:13'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:09:00' prior: 50654465!
asRot13
	self = $a ifTrue: [^$n.].
	self = $n ifTrue: [^$a.].
	self = $m ifTrue: [^$z.].
	self = $z ifTrue: [^$m.].
	self = $` ifTrue: [^$`.].
	self = ${ ifTrue: [^${.].
	self = $M ifTrue: [^$Z.].
	self = $Z ifTrue: [^$M.].
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:09:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:09:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:02'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:02'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:09:12' prior: 50654555!
asRot13
	self = $a ifTrue: [^$n.].
	self = $n ifTrue: [^$a.].
	self = $m ifTrue: [^$z.].
	self = $z ifTrue: [^$m.].
	self = $` ifTrue: [^$`.].
	self = ${ ifTrue: [^${.].
	self = $N ifTrue: [^$A.].
	self = $Z ifTrue: [^$M.].
	 ! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:14'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:14'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:09:35' prior: 50654599!
asRot13
	self = $a ifTrue: [^$n.].
	self = $n ifTrue: [^$a.].
	self = $m ifTrue: [^$z.].
	self = $z ifTrue: [^$m.].
	self = $` ifTrue: [^$`.].
	self = ${ ifTrue: [^${.].
	self = $A ifTrue: [^$N.].
	self = $M ifTrue: [^$Z.].
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:09:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:09:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:37'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:09:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:09:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:39'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:09:39'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:39'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:39'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:09:39'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:09:39'!
FAILURE!

$`!

 $`+13!

----End fileIn of /home/clinux01/linux64/linux64/Packages/TerseGuide.pck.st----!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:12:48' prior: 50654618!
asRot13
	self isAlphaNumeric ifFalse:[self].
	self = $a ifTrue: [^$n].
	self = $n ifTrue: [^$a].
	self = $m ifTrue: [^$z].
	self = $z ifTrue: [^$m].
	
	self = $A ifTrue: [^$N].
	self = $M ifTrue: [^$Z].
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:12:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:12:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:12:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:12:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:12:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:12:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:12:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:12:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:12:53'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:13:12' prior: 50657639!
asRot13
	self isAlphaNumeric ifFalse:[self].
	self = $a ifTrue: [^$n].
	self = $n ifTrue: [^$a].
	self = $m ifTrue: [^$z].
	self = $z ifTrue: [^$m].
	
	self = $A ifTrue: [^$N].
	self = $Z ifTrue: [^$M].
	
	
	 ! !
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:13:26' prior: 50657687!
asRot13
	self isAlphaNumeric ifFalse:[self].
	self = $a ifTrue: [^$n].
	self = $n ifTrue: [^$a].
	self = $m ifTrue: [^$z].
	self = $z ifTrue: [^$m].
	
	self = $N ifTrue: [^$A].
	self = $Z ifTrue: [^$M].
	
	
	 ! !

!testRun: #CharacterTest #testCaseConversion stamp: 'd 9/28/2023 21:13:27'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'd 9/28/2023 21:13:27'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'd 9/28/2023 21:13:27'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'd 9/28/2023 21:13:27'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'd 9/28/2023 21:13:27'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'd 9/28/2023 21:13:27'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'd 9/28/2023 21:13:27'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'd 9/28/2023 21:13:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:13:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:13:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:13:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:13:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:13:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:13:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:13:30'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:13:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:13:30'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:14:39' prior: 50657697!
asRot13
	self isAlphaNumeric ifFalse:[^self].
	^(self asciiValue +13) asCharacter.
	
	
	
	 ! !

!testRun: #CharacterTest #testCaseConversion stamp: 'd 9/28/2023 21:14:39'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'd 9/28/2023 21:14:39'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'd 9/28/2023 21:14:39'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'd 9/28/2023 21:14:39'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'd 9/28/2023 21:14:39'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'd 9/28/2023 21:14:39'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'd 9/28/2023 21:14:39'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'd 9/28/2023 21:14:39'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:14:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:14:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:14:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:14:42'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:14:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:14:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:14:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:14:42'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:15:35' prior: 50657765!
asRot13
	self isAlphaNumeric ifFalse:[^self].

	^(self asciiValue +13) %27 asCharacter.
	
	
	
	 ! !

!testRun: #CharacterTest #testCaseConversion stamp: 'd 9/28/2023 21:15:36'!
PASSED!

!testRun: #CharacterTest #testFromUtf8 stamp: 'd 9/28/2023 21:15:36'!
PASSED!

!testRun: #CharacterTest #testIsCharacter stamp: 'd 9/28/2023 21:15:36'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsFromUtf8 stamp: 'd 9/28/2023 21:15:36'!
PASSED!

!testRun: #CharacterTest #testSomeLatinCharsToUtf8 stamp: 'd 9/28/2023 21:15:36'!
PASSED!

!testRun: #CharacterTest #testSorting stamp: 'd 9/28/2023 21:15:36'!
PASSED!

!testRun: #CharacterTest #testTestingMethods stamp: 'd 9/28/2023 21:15:36'!
PASSED!

!testRun: #CharacterTest #testToUtf8 stamp: 'd 9/28/2023 21:15:36'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:38'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:38'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:38'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:38'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:15:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:15:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:38'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:38'!
ERROR!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:15:43' prior: 50657825!
asRot13
	self isAlphaNumeric ifFalse:[^self].

	^(self asciiValue +13) %26 asCharacter.
	
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:45'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:45'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:45'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:45'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:15:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:15:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:45'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:45'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:15:47'!
ERROR!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:16:48' prior: 50657885!
asRot13
	self isAlphaNumeric ifFalse:[^self].

	^((self asciiValue +13) mod: 26 )asCharacter.
	
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:16:50'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:16:50'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:16:50'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:16:50'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:16:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:16:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:16:50'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:16:50'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:17:05'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:17:08'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:17:08'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:17:08'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:17:08'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:17:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:17:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:17:08'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:17:08'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:17:09'!
FAILURE!

self!

self asciiValue +13!

self asciiValue !

$a asciiValue!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:18:48' prior: 50657929!
asRot13
	self isAlphaNumeric ifFalse:[^self].

	^((self asciiValue +13-97) mod: 26 +97) asCharacter.
	
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:18:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:18:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:18:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:18:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:18:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:18:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:18:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:18:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:18:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:18:59'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:21'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:21'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:21'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:21'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:19:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:19:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:21'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:21'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:22'!
FAILURE!

((self asciiValue +13-97) mod: 26 +97) asCharacter!

self asciiValue +13-97!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:19:45' prior: 50658013!
asRot13
	self isAlphaNumeric ifFalse:[^self].

	^(((self asciiValue +13-97) mod: 26) +97) asCharacter.
	
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:19:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:19:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:49'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:19:49'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:21:56' prior: 50658102!
asRot13
	self isAlphaNumeric ifFalse:[^self].
	self isLowercase ifTrue: [^(((self asciiValue +13-97) mod: 26) +97) asCharacter].
	self isUppercase  ifTrue:  [^(((self asciiValue +13-97) mod: 26) +97) asCharacter].
	^self.
	
	
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:21:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:21:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:21:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:21:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:21:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:21:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:21:59'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:21:59'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:22:00'!
FAILURE!

self asciiValue!

$a asciiValue!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:23:28' prior: 50658142!
asRot13
	self isAlphaNumeric ifFalse:[^self].
	self isLowercase ifTrue: [^(((self asciiValue +13-97) mod: 26) +97) asCharacter].
	self isUppercase  ifTrue:  [self asLowercase asRot13 asUppercase ].
	
	
	
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:23:31'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:23:31'!
FAILURE!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:24:13' prior: 50658191!
asRot13
	self isAlphaNumeric ifFalse:[^self].
	self isLowercase ifTrue: [^(((self asciiValue +13-97) mod: 26) +97) asCharacter].
	self isUppercase ifTrue: [self asLowercase asRot13 asUppercase].
	
	
	
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:24:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:24:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:24:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:24:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:24:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:24:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:24:17'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:24:17'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:24:18'!
FAILURE!

self!

self asLowercase!

self asLowercase asRot13!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:25:00' prior: 50658234!
asRot13
	self isAlphaNumeric ifFalse:[^self].
	self isLowercase ifTrue: [^(((self asciiValue +13-97) mod: 26) +97) asCharacter].
	self isUppercase ifTrue: [^self asLowercase asRot13 asUppercase].
	
	
	
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:25:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:25:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:25:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:25:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:22'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:22'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:25:22'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:25:22'!
ERROR!

!methodRemoval: TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:25:22'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:25:22'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:25:22'!
ERROR!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:25:55' prior: 50658283!
asRot13
	
	
	self isLowercase ifTrue: [^(((self asciiValue +13-97) mod: 26) +97) asCharacter].
	self isUppercase ifTrue: [^self asLowercase asRot13 asUppercase].
	^self.
	
	
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:25:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:25:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:25:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:25:59'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:25:59'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:26:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:26:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:26:04'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:26:04'!
ERROR!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:26:16'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:26:21' prior: 50658470!
asRot13
	^self! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:26:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:26:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:26:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:26:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:26:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:27'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:26:27'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:26:27'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:26:27'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:26:27'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:26:27'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:26:27'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:26:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:26:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:26:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:26:52'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:26:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:26:52'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:27:07'!
FAILURE!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:27:35' prior: 50658474!
asRot13
	^self asCharacterSet asRot13 asString.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:27:38'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:27:38'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:27:38'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:27:44'!
ERROR!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:28:01' prior: 50658633!
asRot13
	^self first asRot13 asString.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:28:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:28:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:28:04'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:28:04'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:28:04'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:28:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:28:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:28:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:28:23'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:28:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:28:23'!
ERROR!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:29:16' prior: 50658681!
asRot13
	^self asSymbol asRot13 asString.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:17'!
PASSED!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:29:56' prior: 50658772!
asRot13
	^(self at:1) asRot13 asString.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:29:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:29:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:29:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:29:58'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:29:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:29:58'!
ERROR!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:30:26' prior: 50658810!
asRot13
	self = '' ifTrue: [^self].
	^(self at:1) asRot13 asString.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:30:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:30:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:30:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:30:28'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:30:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:30:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:30:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:30:30'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:30:30'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:30:30'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:30:30'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:30:30'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:30:30'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:30:30'!
FAILURE!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:32:33' prior: 50658858!
asRot13
	self = '' ifTrue: [^self].
	^self asOrderedCollection inject: '' into:[:stringEncodeado :letra| letra asRot13 ] .
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:32:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:32:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:32:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:32:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:32:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:32:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:32:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:32:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:32:35'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:32:35'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:32:35'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:32:36'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:32:52'!
FAILURE!

self asOrderedCollection!

self asOrderedCollection inject: '' into:[:stringEncodeado :letra| letra asRot13 ]!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:33:41' prior: 50658967!
asRot13
	self = '' ifTrue: [^self].
	^self asOrderedCollection inject: '' into:[:stringEncodeado :letra| letra asRot13 ] asString .
	! !
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:33:49' prior: 50659028!
asRot13
	self = '' ifTrue: [^self].
	^(self asOrderedCollection inject: '' into:[:stringEncodeado :letra| letra asRot13 ]) asString .
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:33:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:33:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:33:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:33:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:33:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:33:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:33:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:33:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:33:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:33:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:33:53'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:33:53'!
FAILURE!

(self asOrderedCollection inject: '' into:[:stringEncodeado :letra| letra asRot13 ]) asString!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:34:18' prior: 50659035!
asRot13
	self = '' ifTrue: [^self].
	^(self asOrderedCollection inject: '' into:[:stringEncodeado :letra| stringEncodeado,letra asRot13 ]) asString .
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:34:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:34:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:34:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:34:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:34:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:34:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:34:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:34:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:34:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:34:20'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:34:21'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:34:25'!
ERROR!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:36:23' prior: 50659092!
asRot13
	self = '' ifTrue: [^self].
	^(self transform: [ :letra|letra asRot13 ]) .
	! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'd 9/28/2023 21:36:23'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'd 9/28/2023 21:36:23'!
PASSED!
!String methodsFor: '*Rot' stamp: 'd 9/28/2023 21:40:56' prior: 50659147!
asRot13
	self = '' ifTrue: [^self].
	^(self collect: [ :letra|letra asRot13 ]) .
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:40:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:40:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:40:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:40:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:40:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:40:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:40:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:40:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:40:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:40:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:40:58'!
PASSED!
!Character methodsFor: '*Rot13' stamp: 'd 9/28/2023 21:41:40' prior: 50658382!
asRot13

	
	self isLowercase ifTrue: [^(((self asciiValue +13-97) mod: 26) +97) asCharacter].
	self isUppercase ifTrue: [^self asLowercase asRot13 asUppercase].
	^self.
	
	
	
	
	 ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:41:49'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:41:49'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'd 9/28/2023 21:41:49'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'd 9/28/2023 21:41:49'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:41:59'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:42:03'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:42:03'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'd 9/28/2023 21:42:03'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'd 9/28/2023 21:42:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'd 9/28/2023 21:42:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'd 9/28/2023 21:42:09'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'd 9/28/2023 21:42:09'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'd 9/28/2023 21:42:09'!
PASSED!

----QUIT----(28 September 2023 21:44:42) CuisUniversity-5981.image priorSource: 10197292!
| game |
game  := TDDBabyStepsGameCuentaBancaria start.
game openHelp.
game openDefinition.
game next.!
| game |
game  := TDDBabyStepsGameContador start.
game openHelp.
game openDefinition.
game next.!
| game |
game  := TDDBabyStepsGameCuentaBancaria start.
game openHelp.
game openDefinition.
game next.!
| game |
game  := TDDBabyStepsGameDemo start.
game openHelp.
game openDefinition.
game next.!
| game |
game  := TDDBabyStepsGameCuentaBancaria start.
game openHelp.
game openDefinition.
game next.!
| game |
game  := TDDBabyStepsGameCuentaBancaria start.
game openHelp.
game openDefinition.
game next.!

----STARTUP---- (29 September 2023 00:08:49) as /home/totorroto/Downloads/babysteps/linux64/CuisUniversity-5981.image!

!Character methodsFor: '*Rot13' stamp: 'TAO 9/29/2023 00:09:47' prior: 50659258!
asRot13
	self isLowercase ifTrue: [ ^ ((self asciiValue + 13 - 97 mod: 26) + 97) asCharacter ].
	self isUppercase ifTrue: [ ^ self asLowercase asRot13 asUppercase ].
	^self.! !
!Character methodsFor: '*Rot13' stamp: 'TAO 9/29/2023 00:10:09' prior: 50650323!
asRot13
"esto no esta muy declarativo el tema de porque hacer mod 26 o restar 97 y todo eso"
	self isLowercase ifTrue: [ ^ ((self asciiValue + 13 - 97 mod: 26) + 97) asCharacter ].
	self isUppercase ifTrue: [ ^ self asLowercase asRot13 asUppercase ].
	^self.! !
!String methodsFor: '*Rot' stamp: 'TAO 9/29/2023 00:10:21' prior: 50659209!
asRot13
	self = '' ifTrue: [ ^ self ].
	^ self collect: [ :letra | letra asRot13 ].! !
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:12:49' prior: 50653955!
anagrams
	| temp1 |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	self do: [ :letra |
		temp1 add: (letra , (self remove: letra) anagrams) ].
	
	^ temp1.
	
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"! !

!testRun: #StringTest #testAfterBlanksEndsWith stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testArticle stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testAsUtf8 stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testBase64 stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testBeginsWith stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testCaseConversion stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testEncompassParagraph1 stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testEncompassParagraph2 stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testEncompassParagraph3 stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testEncompassParagraph4 stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testEncompassParagraph5 stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testFindSelector stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testFirstNonSeparator stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testIsString stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testLastNonSeparator stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testLineSeparators stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testSorting stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testWithBlanksTrimmed stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testWithoutLeadingBlanks stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testWithoutPrefix stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testWithoutSeparators stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #StringTest #testWithoutTrailingBlanks stamp: 'TAO 9/29/2023 00:12:51'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:12:56'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:12:56'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'TAO 9/29/2023 00:12:56'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'TAO 9/29/2023 00:12:56'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'TAO 9/29/2023 00:12:56'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'TAO 9/29/2023 00:12:56'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:12:58'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:13:07'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:13:13'!
ERROR!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:13:43' prior: 50650349!
anagrams
	| temp1 |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	self asOrderedCollection do:[ :letra |
		temp1 add: (letra , (self remove: letra) anagrams) ].
	
	^ temp1.
	
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:13:46'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:13:46'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'TAO 9/29/2023 00:13:46'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'TAO 9/29/2023 00:13:46'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'TAO 9/29/2023 00:13:46'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'TAO 9/29/2023 00:13:46'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:13:47'!
ERROR!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:14:03' prior: 50650458!
anagrams
	| temp1 |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	self asOrderedCollection do:[ :letra | 	temp1 add: (letra , (self remove: letra) anagrams) ].
	
	^ temp1.
	
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"! !
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:14:41' prior: 50650501!
anagrams
	| temp1 |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	(self asOrderedCollection) do:[ :letra | 	temp1 add: (letra , ((self remove: letra) anagrams)) ].
	^ temp1.
	
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:14:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:14:49'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'TAO 9/29/2023 00:14:49'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'TAO 9/29/2023 00:14:49'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'TAO 9/29/2023 00:14:49'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'TAO 9/29/2023 00:14:49'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:14:50'!
ERROR!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:18:40' prior: 50650512!
anagrams
	| temp1 |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	
	
	self do:[ :letra | 	temp1 add: (letra , ((self asOrderedCollection remove: letra) anagrams)).  ].
	^ temp1.
	
	
	
	
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:18:49'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:18:49'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'TAO 9/29/2023 00:18:49'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'TAO 9/29/2023 00:18:49'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'TAO 9/29/2023 00:18:49'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'TAO 9/29/2023 00:18:49'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:18:51'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:19:34'!
ERROR!

self!

self asOrderedCollection!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:20:40' prior: 50650555!
anagrams
	| temp1 |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	
	
	self do:[ :letra | 	temp1 add: (letra asString , ((self asOrderedCollection remove: letra) asString anagrams)).  ].
	^ temp1.
	
	
	
	
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:20:43'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:21:52'!
PASSED!

index!

self!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:23:00' prior: 50650604!
anagrams
	| temp1 |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	
	
	self do:[ :letra | 	temp1 add: (letra asString , ((self asOrderedCollection remove: 'a') asString anagrams)).  ].
	^ temp1.
	
	
	
	
	! !

(self asOrderedCollection remove: 'a')!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:23:12' prior: 50650626!
anagrams
	| temp1 |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	
	
	self do:[ :letra | 	temp1 add: (letra asString , ((self asOrderedCollection remove: $a) asString anagrams)).  ].
	^ temp1.
	
	
	
	
	! !

(self asOrderedCollection remove: $a)!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:26:54' prior: 50650640!
anagrams
	| temp1 ix letra |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	ix:=1.
	(ix<= self size) whileTrue:[
		letra := self at: ix.
		self at: ix put: ''.
		temp1 add: (letra asString , self anagrams).
		self at: ix put: letra.
		
		].
	
	
	^ temp1.
	
	
	
	
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:26:57'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:26:57'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'TAO 9/29/2023 00:26:57'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'TAO 9/29/2023 00:26:57'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'TAO 9/29/2023 00:26:57'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'TAO 9/29/2023 00:26:57'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:26:58'!
ERROR!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:27:45' prior: 50650654!
anagrams
	| temp1 ix letra |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	ix:=1.
	(ix<= self size) whileTrue:[
		letra := self at: ix.
		self at: ix put: ''.
		temp1 add: (letra asString , self anagrams).
		self at: ix put: letra.
		
		].
	
	
	^ temp1.
	
	
	
	
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:27:47'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:27:47'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'TAO 9/29/2023 00:27:47'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'TAO 9/29/2023 00:27:47'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'TAO 9/29/2023 00:27:47'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'TAO 9/29/2023 00:27:47'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:27:49'!
ERROR!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:30:18' prior: 50650700!
anagrams
	| temp1 ix letra |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	ix:=1.
	[ix<= self size] whileTrue:[
		letra := self at: ix.
		self at: ix put: ''.
		temp1 add: (letra asString , self anagrams).
		self at: ix put: letra.
		
		].
	
	
	^ temp1.
	
	
	
	
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:30:20'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:30:20'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'TAO 9/29/2023 00:30:21'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'TAO 9/29/2023 00:30:21'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'TAO 9/29/2023 00:30:21'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'TAO 9/29/2023 00:30:21'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:30:26'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:30:26'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'TAO 9/29/2023 00:30:26'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'TAO 9/29/2023 00:30:26'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'TAO 9/29/2023 00:30:26'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'TAO 9/29/2023 00:30:26'!
FAILURE!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'TAO 9/29/2023 00:30:43' prior: 50653323!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString
	self
		assert: (Set with: 'a')
		equals: 'a' anagrams.! !
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'TAO 9/29/2023 00:30:48' prior: 50653452!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped
	self
		assert:
			(Set
				with: 'ab'
				with: 'ba')
		equals: 'ab' anagrams.! !
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'TAO 9/29/2023 00:30:54'!
stest05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations
	| temp1 |
	temp1 := Set new.
	temp1
		add: 'abcd';
		add: 'abdc';
		add: 'acbd';
		add: 'acdb';
		add: 'adbc';
		add: 'adcb';
		add: 'bacd';
		add: 'badc';
		add: 'bcad';
		add: 'bcda';
		add: 'bdac';
		add: 'bdca';
		add: 'cabd';
		add: 'cadb';
		add: 'cbad';
		add: 'cbda';
		add: 'cdab';
		add: 'cdba';
		add: 'dabc';
		add: 'dacb';
		add: 'dbac';
		add: 'dbca';
		add: 'dcab';
		add: 'dcba'.
	self
		assert: temp1
		equals: 'abcd' anagrams.! !
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'TAO 9/29/2023 00:30:56' prior: 50653722!
test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations
	| temp1 |
	temp1 := Set new.
	temp1
		add: 'abcd';
		add: 'abdc';
		add: 'acbd';
		add: 'acdb';
		add: 'adbc';
		add: 'adcb';
		add: 'bacd';
		add: 'badc';
		add: 'bcad';
		add: 'bcda';
		add: 'bdac';
		add: 'bdca';
		add: 'cabd';
		add: 'cadb';
		add: 'cbad';
		add: 'cbda';
		add: 'cdab';
		add: 'cdba';
		add: 'dabc';
		add: 'dacb';
		add: 'dbac';
		add: 'dbca';
		add: 'dcab';
		add: 'dcba'.
	self
		assert: temp1
		equals: 'abcd' anagrams.! !

!methodRemoval: TDDBabyStepsAnagramsTest #stest05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'TAO 9/29/2023 00:30:59'!
stest05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations
	| temp1 |
	temp1 := Set new.
	temp1
		add: 'abcd';
		add: 'abdc';
		add: 'acbd';
		add: 'acdb';
		add: 'adbc';
		add: 'adcb';
		add: 'bacd';
		add: 'badc';
		add: 'bcad';
		add: 'bcda';
		add: 'bdac';
		add: 'bdca';
		add: 'cabd';
		add: 'cadb';
		add: 'cbad';
		add: 'cbda';
		add: 'cdab';
		add: 'cdba';
		add: 'dabc';
		add: 'dacb';
		add: 'dbac';
		add: 'dbca';
		add: 'dcab';
		add: 'dcba'.
	self
		assert: temp1
		equals: 'abcd' anagrams.!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:31:01'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:31:01'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'TAO 9/29/2023 00:31:01'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'TAO 9/29/2023 00:31:01'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test05MoreThanThreeCharStringAnagramReturnsAllTheCorrectPossibleOrderCombinations stamp: 'TAO 9/29/2023 00:31:01'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #testExtraToCheckGeneralizationOnKata stamp: 'TAO 9/29/2023 00:31:01'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'TAO 9/29/2023 00:31:03'!
ERROR!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:33:01' prior: 50650746!
anagrams
	| temp1 ix |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	ix:=1.
	[ix<= self size] whileTrue:[
		 temp1 add: (self copyFrom: 1 to: ix) anagramas, (self copyFrom: ix to: self size).
		
		].
	
	
	^ temp1.
	
	
	
	
	! !
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:33:13' prior: 50650922!
anagrams
	| temp1 ix |
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	ix:=1.
	[ix<= self size] whileTrue:[
		 temp1 add: (self copyFrom: 1 to: ix) anagramas, (self copyFrom: ix to: self size).
		ix:= ix+1.
		].
	
	
	^ temp1.
	
	
	
	
	! !
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:34:30' prior: 50650935!
anagrams
	| temp1 ix a b|
	self = '' ifTrue: [ ^ Set with: '' ].
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	ix:=1.
	[ix<= self size] whileTrue:[
		a:= (self copyFrom: 1 to: ix).
		b:= (self copyFrom: ix to: self size).
		 temp1 add: (a anagrams , b anagrams).
		ix:= ix+1.
		].
	
	^ temp1.
	
	
	
	
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:34:35'!
PASSED!
!String methodsFor: '*anagrams' stamp: 'TAO 9/29/2023 00:35:06' prior: 50650948!
anagrams
	| temp1 ix a b|
	self = '' ifTrue: [ ^ Set with: '' ].
	self size =1 ifTrue:[self].
	
	temp1 := Set new.
	
	"lo que quiero hacer, es por cada letra, agregar ella+anagrama del resto"
	
	ix:=1.
	[ix<= self size] whileTrue:[
		a:= (self copyFrom: 1 to: ix).
		b:= (self copyFrom: ix to: self size).
		 temp1 add: (a anagrams , b anagrams).
		ix:= ix+1.
		].
	
	^ temp1.
	
	
	
	
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'TAO 9/29/2023 00:35:09'!
PASSED!

a !

self!

self!

----STARTUP---- (29 September 2023 00:36:28) as /home/totorroto/Downloads/babysteps/linux64/CuisUniversity-5981.image!

!String methodsFor: '*anagrams' stamp: 'toto 9/29/2023 00:37:32' prior: 50653955!
anagrams
	| temp1 ix |
	self = '' ifTrue: [ ^ Set with: '' ].
	self size =1 ifTrue: [^self].
	temp1 := Set new.
	self do: [ :argm2_2 |
		temp1 add: argm2_2 , (self remove: argm2_2) anagrams ].
	^ temp1.
	
	
	
	
	
	! !
!String methodsFor: '*anagrams' stamp: 'toto 9/29/2023 00:39:17' prior: 50650991!
anagrams
	| temp1 ix a b |
	self = '' ifTrue: [ ^ Set with: '' ].
	self size =1 ifTrue: [^self].
	temp1 := Set new.
	ix:=1.
	[ix<= self size] whileTrue: [
		a:= self copyFrom: 1 to:ix.
		b:= self copyFrom: ix  to: self size.
		temp1 add: (a anagrams, b anagrams).
		ix:= ix+1.
		].
	
	^ temp1.
	
	
	
	
	
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'toto 9/29/2023 00:39:20'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'toto 9/29/2023 00:39:20'!
FAILURE!

self!

self!

self copyFrom: 1 to:ix.!

self copyFrom: ix  to: self size.!
!String methodsFor: '*anagrams' stamp: 'toto 9/29/2023 00:39:55' prior: 50651001!
anagrams
	| temp1 ix a b |
	self = '' ifTrue: [ ^ Set with: '' ].
	self size =1 ifTrue: [^self].
	temp1 := Set new.
	ix:=1.
	[ix<= self size] whileTrue: [
		a:= self copyFrom: 1 to:ix.
		b:= self copyFrom: ix+1  to: self size.
		temp1 add: (a anagrams, b anagrams).
		ix:= ix+1.
		].
	
	^ temp1.
	
	
	
	
	
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'toto 9/29/2023 00:39:57'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'toto 9/29/2023 00:39:57'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'toto 9/29/2023 00:40:10'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'toto 9/29/2023 00:40:12'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'toto 9/29/2023 00:40:12'!
FAILURE!

 'a' anagrams!

 'a' anagrams!
!String methodsFor: '*anagrams' stamp: 'toto 9/29/2023 00:40:42' prior: 50651025!
anagrams
	| temp1 ix a b |
	self = '' ifTrue: [ ^ Set with: '' ].
	self size =1 ifTrue: [^Set with: self].
	temp1 := Set new.
	ix:=1.
	[ix<= self size] whileTrue: [
		a:= self copyFrom: 1 to:ix.
		b:= self copyFrom: ix+1  to: self size.
		temp1 add: (a anagrams, b anagrams).
		ix:= ix+1.
		].
	
	^ temp1.
	
	
	
	
	
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'toto 9/29/2023 00:40:45'!
PASSED!

TDDBabyStepsGamePrimeFactors start.!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'toto 9/29/2023 00:41:45'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'toto 9/29/2023 00:42:04'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:42:10'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:42:10'!
ERROR!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:42:19'!
factorize
	self shouldBeImplemented.! !
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:42:23' prior: 50651102!
factorize
	^1.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:42:31'!
FAILURE!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:42:44' prior: 50651107!
factorize
	^Bag new.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:42:46'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:42:48'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'toto 9/29/2023 00:42:48'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:42:48'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:42:48'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'toto 9/29/2023 00:42:48'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:42:48'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:42:57'!
FAILURE!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:44:05' prior: 50651114!
factorize
	|factores|
	factores:= Bag new.
	self =1 ifTrue: [factores].
	factores add: 2.
	^factores.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:44:07'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:44:07'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:44:12'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:44:12'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:44:12'!
FAILURE!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:44:24' prior: 50651157!
factorize
	|factores|
	factores:= Bag new.
	self =1 ifTrue: [^factores].
	factores add: 2.
	^factores.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:44:25'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:44:25'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:44:27'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:44:27'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'toto 9/29/2023 00:44:27'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:44:27'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:44:27'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'toto 9/29/2023 00:44:27'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:44:27'!
FAILURE!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:44:59' prior: 50651182!
factorize
	self isPrime ^Bag with: self.
	^Bag new.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:45:02'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:45:02'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:45:02'!
ERROR!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:45:16' prior: 50651231!
factorize
	self isPrime ifTrue:[ ^Bag with: self].
	^Bag new.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:45:19'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:45:19'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:45:19'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:45:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:45:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:45:21'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'toto 9/29/2023 00:45:21'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:45:21'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:45:21'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'toto 9/29/2023 00:45:21'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:45:21'!
FAILURE!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:46:04' prior: 50651248!
factorize
	self =1 ifTrue:[^Bag with:self].
	self isPrime ifTrue:[ ^Bag with: self].
	
	^Bag with:2 with:2.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:46:06'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:46:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:46:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:46:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:46:06'!
FAILURE!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:46:19' prior: 50651307!
factorize
	self =1 ifTrue:[^Bag new].
	self isPrime ifTrue:[ ^Bag with: self].
	
	^Bag with:2 with:2.! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:46:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:46:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:46:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:46:21'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:46:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:46:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:46:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:46:23'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'toto 9/29/2023 00:46:23'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'toto 9/29/2023 00:46:23'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'toto 9/29/2023 00:46:23'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'toto 9/29/2023 00:46:23'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'toto 9/29/2023 00:46:23'!
FAILURE!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:47:33' prior: 50651333!
factorize
	self =1 ifTrue:[^Bag new].
	self isPrime ifTrue:[ ^Bag with: self].
	
! !
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:53:57' prior: 50651404!
factorize
	|factores ix |
	factores:= Bag new.
	self =1 ifTrue:[^factores].
	
	ix:= 2.
	[self isDivisibleBy: ix] whileFalse:[ ix:= ix+1].
	
	^(self /ix) factorize add: ix.
	
	
	
! !

!testRun: #SmallIntegerTest #testBasicNew stamp: 'toto 9/29/2023 00:53:58'!
ERROR!

!testRun: #SmallIntegerTest #testBasicNew stamp: 'toto 9/29/2023 00:53:58'!
PASSED!

!testRun: #SmallIntegerTest #testDivide stamp: 'toto 9/29/2023 00:53:58'!
PASSED!

!testRun: #SmallIntegerTest #testEven stamp: 'toto 9/29/2023 00:53:58'!
PASSED!

!testRun: #SmallIntegerTest #testMaxVal stamp: 'toto 9/29/2023 00:53:58'!
PASSED!

!testRun: #SmallIntegerTest #testMinVal stamp: 'toto 9/29/2023 00:53:58'!
PASSED!

!testRun: #SmallIntegerTest #testNew stamp: 'toto 9/29/2023 00:53:58'!
ERROR!

!testRun: #SmallIntegerTest #testNew stamp: 'toto 9/29/2023 00:53:58'!
PASSED!

!testRun: #SmallIntegerTest #testOdd stamp: 'toto 9/29/2023 00:53:58'!
PASSED!

!testRun: #SmallIntegerTest #testPrintPaddedWith stamp: 'toto 9/29/2023 00:53:58'!
PASSED!

!testRun: #SmallIntegerTest #testPrintString stamp: 'toto 9/29/2023 00:53:58'!
PASSED!

!testRun: #SmallIntegerTest #testZeroRaisedToNegativePower stamp: 'toto 9/29/2023 00:53:58'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:54:00'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:54:00'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:54:00'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:54:00'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'toto 9/29/2023 00:54:00'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:54:02'!
FAILURE!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:55:06' prior: 50651410!
factorize
	|ix |
	self =1 ifTrue:[^Bag new.].
	
	ix:= 2.
	[self isDivisibleBy: ix] whileFalse:[ ix:= ix+1].
	
	^(self / ix) factorize add: ix.
	
	
	
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:55:10'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:55:10'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:55:10'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:55:10'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'toto 9/29/2023 00:55:10'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:55:11'!
FAILURE!

self!

self isDivisibleBy: ix!

self!

ix!

self isDivisibleBy: 2!

self / ix!

2 factorize!

3 factorize!

4 factorize!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:57:09' prior: 50651476!
factorize
	|ix |
	self =1 ifTrue:[^Bag new.].
	
	ix:= 2.
	[self isDivisibleBy: ix] whileFalse:[ ix:= ix+1].
	
	^((self / ix) factorize) add: ix.
	
	
	
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:57:12'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:57:12'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:57:12'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:57:12'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'toto 9/29/2023 00:57:12'!
ERROR!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 00:58:24' prior: 50651513!
factorize
	|ix |
	self =1 ifTrue:[^Bag new.].
	self isPrime ifTrue:[^Bag with: self.].
	ix:= 2.
	[self isDivisibleBy: ix] whileFalse:[ ix:= ix+1].
	
	^((self / ix) factorize) add: ix.
	
	
	
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 00:58:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:58:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 00:58:29'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:58:29'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'toto 9/29/2023 00:58:29'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 00:58:31'!
FAILURE!

self!

((self / ix) factorize) add: ix!

4 factorize!

Bag!

self!

SmallInteger!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 01:29:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 01:29:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 01:29:33'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 01:29:33'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'toto 9/29/2023 01:29:33'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 01:29:35'!
FAILURE!

((self / ix) factorize)!

((self / 2) factorize)!

((self / 1) factorize)!

((self / 1) factorize) add: 2!

((self / 1) factorize) !

((self / 1) factorize) add: 2!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 01:30:55' prior: 50651542!
factorize
	|ix |
	self =1 ifTrue:[^Bag new.].
	self isPrime ifTrue:[^Bag with: self].
	ix:= 2.
	[self isDivisibleBy: ix] whileFalse:[ ix:= ix+1].
	
	^((self / ix) factorize) with: ix.
	
	
	
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'toto 9/29/2023 01:31:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 01:31:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'toto 9/29/2023 01:31:01'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 01:31:01'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'toto 9/29/2023 01:31:01'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'toto 9/29/2023 01:31:02'!
ERROR!
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 01:31:13' prior: 50651609!
factorize
	|ix |
	self =1 ifTrue:[^Bag new.].
	self isPrime ifTrue:[^Bag with: self].
	ix:= 2.
	[self isDivisibleBy: ix] whileFalse:[ ix:= ix+1].
	
	^((self / ix) factorize) add: ix.
	
	
	
! !
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 01:31:15' prior: 50651643!
factorize
	|ix |
	self =1 ifTrue:[^Bag new.].
	self isPrime ifTrue:[^Bag with: self].
	ix:= 2.
	[self isDivisibleBy: ix] whileFalse:[ ix:= ix+1].
	
	^((self / ix) factorize) add: ix.
	
	
	
! !

TDDBabyStepsGameBase start!

TDDBabyStepsGameCuentaBancaria start !

!classDefinition: #TDDBabyStepsCuentaBancariaEnPesosTest category: 'TDDBabyStepsGameCuentaBancariaEnPesos' stamp: 'toto 9/29/2023 02:26:22'!
TestCase subclass: #TDDBabyStepsCuentaBancariaEnPesosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameCuentaBancariaEnPesos'!
!TDDBabyStepsCuentaBancariaEnPesosTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:26:40'!
test01UnaNuevaCuentaComienzaConSaldoCero
	
	self assert: 0 * peso equals: CuentaBancariaEnPesos new saldo.
	! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:26:43'!
ERROR!
!Object methodsFor: 'CuentaBancariaPesos' stamp: 'toto 9/29/2023 02:27:02'!
saldo
	self shouldBeImplemented.! !
!Object methodsFor: 'CuentaBancariaPesos' stamp: 'toto 9/29/2023 02:27:08' prior: 50651685!
saldo
	^0! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:27:14'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:27:14'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:27:23'!
PASSED!
!TDDBabyStepsCuentaBancariaEnPesosTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:27:23'!
test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 10 * peso.
 	self assert: 10 * peso equals: cuentaBancaria saldo.
	! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:27:23'!
ERROR!

!methodRemoval: TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:27:23'!
test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 10 * peso.
 	self assert: 10 * peso equals: cuentaBancaria saldo.
	!
!TDDBabyStepsCuentaBancariaEnPesosTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:27:23'!
test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 10 * peso.
 	self assert: 10 * peso equals: cuentaBancaria saldo.
	! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:27:23'!
ERROR!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:27:33'!
ERROR!
!UndefinedObject methodsFor: 'as yet unclassified' stamp: 'toto 9/29/2023 02:27:46'!
depositar: aRenameMe1 
	self shouldBeImplemented.! !
!UndefinedObject methodsFor: 'as yet unclassified' stamp: 'toto 9/29/2023 02:28:03' prior: 50651752!
depositar: aNumber 
	^10.! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:28:10'!
FAILURE!

Object subclass: #CuentaBancariaEnPesos
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameCuentaBancariaEnPesos'!

!classDefinition: #CuentaBancariaEnPesos category: 'TDDBabyStepsGameCuentaBancariaEnPesos' stamp: 'toto 9/29/2023 02:28:46'!
Object subclass: #CuentaBancariaEnPesos
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameCuentaBancariaEnPesos'!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:28:51'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:28:51'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:28:51'!
ERROR!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:28:51'!
ERROR!
!CuentaBancariaEnPesos methodsFor: 'depositos' stamp: 'toto 9/29/2023 02:29:00'!
depositar: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #CuentaBancariaEnPesos category: 'TDDBabyStepsGameCuentaBancariaEnPesos' stamp: 'toto 9/29/2023 02:29:24'!
Object subclass: #CuentaBancariaEnPesos
	instanceVariableNames: 'saldo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameCuentaBancariaEnPesos'!
!CuentaBancariaEnPesos methodsFor: 'depositos' stamp: 'toto 9/29/2023 02:29:21' prior: 50651798!
depositar: unSaldo 
	saldo:= unSaldo.! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:29:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:29:31'!
FAILURE!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:29:31'!
FAILURE!
!CuentaBancariaEnPesos methodsFor: 'depositos' stamp: 'toto 9/29/2023 02:29:59' overrides: 50651689!
saldo  
	^saldo! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:30:01'!
FAILURE!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:30:01'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:30:01'!
FAILURE!
!CuentaBancariaEnPesos methodsFor: 'depositos' stamp: 'toto 9/29/2023 02:30:37' overrides: 16920235!
initialize  
	saldo:= 0.! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:30:39'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:30:39'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:30:41'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:30:41'!
PASSED!
!TDDBabyStepsCuentaBancariaEnPesosTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:30:41'!
test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 10 * peso.
	cuentaBancaria depositar: 20 * peso.
 	self assert: 30 * peso equals: cuentaBancaria saldo.
	! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:30:41'!
FAILURE!

!methodRemoval: TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:30:41'!
test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 10 * peso.
	cuentaBancaria depositar: 20 * peso.
 	self assert: 30 * peso equals: cuentaBancaria saldo.
	!
!TDDBabyStepsCuentaBancariaEnPesosTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:30:41'!
test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 10 * peso.
	cuentaBancaria depositar: 20 * peso.
 	self assert: 30 * peso equals: cuentaBancaria saldo.
	! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:30:41'!
FAILURE!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:30:51'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:30:51'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:30:51'!
FAILURE!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:30:51'!
FAILURE!
!CuentaBancariaEnPesos methodsFor: 'depositos' stamp: 'toto 9/29/2023 02:31:38' prior: 50651812!
depositar: aNumber 
	^saldo:= self saldo +10.! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:31:41'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:31:41'!
FAILURE!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:31:41'!
FAILURE!
!Object methodsFor: 'CuentaBancariaPesos' stamp: 'toto 9/29/2023 02:32:03' prior: 50651689!
saldo! !

!methodRemoval: Object #saldo stamp: 'toto 9/29/2023 02:32:11'!
saldo!

!methodRemoval: UndefinedObject #depositar: stamp: 'toto 9/29/2023 02:32:25'!
depositar: aNumber 
	^10.!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:32:32'!
FAILURE!
!CuentaBancariaEnPesos methodsFor: 'depositos' stamp: 'toto 9/29/2023 02:32:40' prior: 50651937!
depositar: aNumber 
	^saldo:= self saldo +aNumber.! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:32:44'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:32:44'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:32:44'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:32:46'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:32:46'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:32:46'!
PASSED!
!TDDBabyStepsCuentaBancariaEnPesosTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:32:46'!
test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 30 * peso.
	cuentaBancaria extraer: 20 * peso.
 	self assert: 10 * peso equals: cuentaBancaria saldo.
	! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:32:46'!
ERROR!

!methodRemoval: TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:32:46'!
test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 30 * peso.
	cuentaBancaria extraer: 20 * peso.
 	self assert: 10 * peso equals: cuentaBancaria saldo.
	!
!TDDBabyStepsCuentaBancariaEnPesosTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:32:46'!
test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 30 * peso.
	cuentaBancaria extraer: 20 * peso.
 	self assert: 10 * peso equals: cuentaBancaria saldo.
	! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:32:46'!
ERROR!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:32:51'!
ERROR!
!CuentaBancariaEnPesos methodsFor: 'extraccion' stamp: 'toto 9/29/2023 02:33:01'!
extraer: aRenameMe1 
	self shouldBeImplemented.! !
!CuentaBancariaEnPesos methodsFor: 'extraccion' stamp: 'toto 9/29/2023 02:33:19' prior: 50652051!
extraer: anAmountOfPesos 
	saldo:= saldo- anAmountOfPesos ! !
!CuentaBancariaEnPesos methodsFor: 'depositos' stamp: 'toto 9/29/2023 02:33:26' prior: 50651970!
depositar: aNumber 
	^saldo:= saldo +aNumber.! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:33:30'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:33:30'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:33:30'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:33:30'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:33:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:33:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:33:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:33:31'!
PASSED!
!TDDBabyStepsCuentaBancariaEnPesosTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:33:31'!
test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 30 * peso.
	cuentaBancaria extraer: 20 * peso.
	self should: [cuentaBancaria extraer: 11 * peso.] 
		raise: Error  
		withExceptionDo: [:anException | 
			self assert: 'La cuenta no puede quedar en descubierto' equals: anException messageText. 
			self assert: 10 * peso equals: cuentaBancaria saldo.
		].
	! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto stamp: 'toto 9/29/2023 02:33:31'!
FAILURE!

!methodRemoval: TDDBabyStepsCuentaBancariaEnPesosTest #test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto stamp: 'toto 9/29/2023 02:33:31'!
test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 30 * peso.
	cuentaBancaria extraer: 20 * peso.
	self should: [cuentaBancaria extraer: 11 * peso.] 
		raise: Error  
		withExceptionDo: [:anException | 
			self assert: 'La cuenta no puede quedar en descubierto' equals: anException messageText. 
			self assert: 10 * peso equals: cuentaBancaria saldo.
		].
	!
!TDDBabyStepsCuentaBancariaEnPesosTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:33:31'!
test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto
	
	| cuentaBancaria |
	cuentaBancaria := CuentaBancariaEnPesos new.
	cuentaBancaria depositar: 30 * peso.
	cuentaBancaria extraer: 20 * peso.
	self should: [cuentaBancaria extraer: 11 * peso.] 
		raise: Error  
		withExceptionDo: [:anException | 
			self assert: 'La cuenta no puede quedar en descubierto' equals: anException messageText. 
			self assert: 10 * peso equals: cuentaBancaria saldo.
		].
	! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto stamp: 'toto 9/29/2023 02:33:31'!
FAILURE!
!CuentaBancariaEnPesos methodsFor: 'extraccion' stamp: 'toto 9/29/2023 02:34:21' prior: 50652056!
extraer: anAmountOfPesos 
	saldo<anAmountOfPesos ifTrue: [self class error: 'La cuenta no puede quedar en descubierto'].
	saldo:= saldo- anAmountOfPesos ! !
!CuentaBancariaEnPesos methodsFor: 'extraccion' stamp: 'toto 9/29/2023 02:34:24' prior: 50652166!
extraer: anAmountOfPesos 
	saldo<anAmountOfPesos ifTrue: [self class error: 'La cuenta no puede quedar en descubierto'].
	saldo:= saldo- anAmountOfPesos .! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto stamp: 'toto 9/29/2023 02:34:27'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:34:27'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:34:27'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:34:27'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:34:27'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto stamp: 'toto 9/29/2023 02:34:27'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:34:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:34:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:34:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:34:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto stamp: 'toto 9/29/2023 02:34:31'!
PASSED!
!TDDBabyStepsCuentaBancariaEnPesosTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:34:31'!
extraTest
	
	self assert: true.
	! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:34:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:34:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:34:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:34:31'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto stamp: 'toto 9/29/2023 02:34:31'!
PASSED!
!CuentaBancariaEnPesos methodsFor: 'extraccion' stamp: 'toto 9/29/2023 02:35:28'!
errorDescriptionLaCuentaNoPuedeQuedarEnDescubierto

	^ 'La cuenta no puede quedar en descubierto'! !
!CuentaBancariaEnPesos methodsFor: 'extraccion' stamp: 'toto 9/29/2023 02:35:28' prior: 50652174!
extraer: anAmountOfPesos 
	saldo<anAmountOfPesos ifTrue: [self class error: self errorDescriptionLaCuentaNoPuedeQuedarEnDescubierto].
	saldo:= saldo- anAmountOfPesos .! !
!CuentaBancariaEnPesos methodsFor: 'extraccion' stamp: 'toto 9/29/2023 02:36:03'!
errorLaCuentaNoPuedeQuedarEnDescubierto

	^ self class error: self errorDescriptionLaCuentaNoPuedeQuedarEnDescubierto! !
!CuentaBancariaEnPesos methodsFor: 'extraccion' stamp: 'toto 9/29/2023 02:36:03' prior: 50652267!
extraer: anAmountOfPesos 
	saldo<anAmountOfPesos ifTrue: [self errorLaCuentaNoPuedeQuedarEnDescubierto].
	saldo:= saldo- anAmountOfPesos .! !

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:36:06'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:36:06'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:36:06'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:36:06'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto stamp: 'toto 9/29/2023 02:36:06'!
PASSED!
!CuentaBancariaEnPesos methodsFor: 'extraccion' stamp: 'toto 9/29/2023 02:36:26' prior: 50652275!
errorLaCuentaNoPuedeQuedarEnDescubierto

	^ self class error: 'La cuenta no puede quedar en descubierto'! !

!methodRemoval: CuentaBancariaEnPesos #errorDescriptionLaCuentaNoPuedeQuedarEnDescubierto stamp: 'toto 9/29/2023 02:36:28'!
errorDescriptionLaCuentaNoPuedeQuedarEnDescubierto

	^ 'La cuenta no puede quedar en descubierto'!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test01UnaNuevaCuentaComienzaConSaldoCero stamp: 'toto 9/29/2023 02:36:36'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test02AlHacerUnDepositoSeIncrementaElSaldoConElMontoDepositado stamp: 'toto 9/29/2023 02:36:36'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test03AlHacerVariosDepositosSeIncrementaElSaldoConElTotalDepositado stamp: 'toto 9/29/2023 02:36:36'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test04AlExtrerDisminuyeElSaldoSegunElMontoExtraido stamp: 'toto 9/29/2023 02:36:36'!
PASSED!

!testRun: #TDDBabyStepsCuentaBancariaEnPesosTest #test05AlExtraerLaCuentaNoPuedeQuedarEnDescubierto stamp: 'toto 9/29/2023 02:36:36'!
PASSED!

TDDBabyStepsGameDemo start.!

!classDefinition: #TDDBabyStepsDemoTest category: 'TDDBabyStepsGameDemo' stamp: 'toto 9/29/2023 02:37:11'!
TestCase subclass: #TDDBabyStepsDemoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameDemo'!
!TDDBabyStepsDemoTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:37:24'!
test01
	
	self assert: false.
	! !

!testRun: #TDDBabyStepsDemoTest #test01 stamp: 'toto 9/29/2023 02:37:31'!
FAILURE!

!testRun: #TDDBabyStepsDemoTest #test01 stamp: 'toto 9/29/2023 02:37:31'!
FAILURE!
!TDDBabyStepsDemoTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:37:37' prior: 50652358!
test01
	
	self assert: true.
	! !

!testRun: #TDDBabyStepsDemoTest #test01 stamp: 'toto 9/29/2023 02:37:38'!
PASSED!

!testRun: #TDDBabyStepsDemoTest #test01 stamp: 'toto 9/29/2023 02:37:38'!
PASSED!

!testRun: #TDDBabyStepsDemoTest #test01 stamp: 'toto 9/29/2023 02:37:41'!
PASSED!
!TDDBabyStepsDemoTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:37:41'!
test02
	
	self assert: false.
	! !

!testRun: #TDDBabyStepsDemoTest #test02 stamp: 'toto 9/29/2023 02:37:41'!
FAILURE!

!methodRemoval: TDDBabyStepsDemoTest #test02 stamp: 'toto 9/29/2023 02:37:41'!
test02
	
	self assert: false.
	!
!TDDBabyStepsDemoTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:37:41'!
test02
	
	self assert: false.
	! !

!testRun: #TDDBabyStepsDemoTest #test02 stamp: 'toto 9/29/2023 02:37:41'!
FAILURE!
!TDDBabyStepsDemoTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:37:47' prior: 50652390!
test02
	
	self assert: true.
	! !

!testRun: #TDDBabyStepsDemoTest #test01 stamp: 'toto 9/29/2023 02:37:51'!
PASSED!

!testRun: #TDDBabyStepsDemoTest #test02 stamp: 'toto 9/29/2023 02:37:51'!
PASSED!
!TDDBabyStepsDemoTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:37:51'!
test03
	
	self assert: false.
	! !

!testRun: #TDDBabyStepsDemoTest #test03 stamp: 'toto 9/29/2023 02:37:51'!
FAILURE!

!methodRemoval: TDDBabyStepsDemoTest #test03 stamp: 'toto 9/29/2023 02:37:51'!
test03
	
	self assert: false.
	!
!TDDBabyStepsDemoTest methodsFor: 'tests' stamp: 'toto 9/29/2023 02:37:52'!
test03
	
	self assert: false.
	! !

!testRun: #TDDBabyStepsDemoTest #test03 stamp: 'toto 9/29/2023 02:37:52'!
FAILURE!

TDDBabyStepsGameContador subclass: #Contador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #Contador category: 'TDDBabyStepsGameContador' stamp: 'toto 9/29/2023 02:39:49'!
TDDBabyStepsGameContador subclass: #Contador
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'toto 9/29/2023 02:39:50'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'toto 9/29/2023 02:39:50'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'toto 9/29/2023 02:39:50'!
PASSED!

TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'toto 9/29/2023 02:40:00'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: 'valor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'toto 9/29/2023 02:40:02'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'toto 9/29/2023 02:40:02'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'toto 9/29/2023 02:40:02'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'toto 9/29/2023 02:40:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'toto 9/29/2023 02:40:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'toto 9/29/2023 02:40:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'toto 9/29/2023 02:40:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'toto 9/29/2023 02:40:32'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'toto 9/29/2023 02:40:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'toto 9/29/2023 02:40:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'toto 9/29/2023 02:40:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'toto 9/29/2023 02:40:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'toto 9/29/2023 02:40:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'toto 9/29/2023 02:40:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'toto 9/29/2023 02:40:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'toto 9/29/2023 02:40:33'!
PASSED!
!Character methodsFor: '*Rot13' stamp: 'toto 9/29/2023 02:40:47' prior: 50659258!
asRot13
	self isLowercase ifTrue: [ ^ ((self asciiValue + 13 - 97 mod: 26) + 97) asCharacter ].
	self isUppercase ifTrue: [ ^ self asLowercase asRot13 asUppercase ].
	^self.! !
!String methodsFor: '*Rot' stamp: 'toto 9/29/2023 02:40:58' prior: 50659209!
asRot13
	self = '' ifTrue: [ ^ self ].
	^ self collect: [ :letra |letra asRot13 ].! !
!String methodsFor: '*anagrams' stamp: 'toto 9/29/2023 02:42:00' prior: 50651062!
anagrams
	| temp1 ix a b |
	self = '' ifTrue: [ ^ Set with: '' ].
	self size =1 ifTrue: [^Set with: self].
	temp1 := Set new.
	
	ix:=1.
	[ix<= self size] whileTrue: [
		a:= self copyFrom: 1 to:ix.
		b:= self copyFrom: ix+1  to: self size.
		temp1 add: (a anagrams, b anagrams).
		ix:= ix+1.
		].
	
	^ temp1.
	
	
	
	
	
	! !
!SmallInteger methodsFor: '*factorization' stamp: 'toto 9/29/2023 02:42:25' prior: 50651652!
factorize
	|ix |
	self =1 ifTrue:[^Bag new.].
	self isPrime ifTrue:[^Bag with: self].
	ix:= 2.
	[self isDivisibleBy: ix] whileFalse:[ ix:= ix+1].
	
	^((self / ix) factorize) add: ix.
	
	
	
	
! !

----QUIT----(29 September 2023 02:42:32) CuisUniversity-5981.image priorSource: 10492111!

----STARTUP---- (29 September 2023 02:42:39) as /home/totorroto/Downloads/babysteps/linux64/CuisUniversity-5981.image!


----QUIT----(29 September 2023 02:42:59) CuisUniversity-5981.image priorSource: 10269218!