

----QUIT----(13 August 2023 19:14:09) CuisUniversity-5981.image priorSource: 5713367!

----STARTUP---- (13 August 2023 19:14:10) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5981.image!


----QUIT----(13 August 2023 19:14:10) CuisUniversity-5981.image priorSource: 10197065!

----STARTUP---- (6 November 2023 18:32:19) as /home/clinux01/Escritorio/linux64/CuisUniversity-5981.image!


----End fileIn of /home/clinux01/Descargas/TusLibros-33.st----!

TestCase subclass: #xTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #XTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #XTest category: 'TusLibros' stamp: 'totot 11/6/2023 20:16:20'!
TestCase subclass: #XTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #XTest as: #StoreSystemTest stamp: 'totot 11/6/2023 20:16:35'!
Smalltalk renameClassNamed: #XTest as: #StoreSystemTest!
!StoreSystemTest methodsFor: 'no messages' stamp: 'totot 11/6/2023 20:16:41'!
test01
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:17:28'!
test01CreateCartWithUnregisteredUser
	! !

!methodRemoval: StoreSystemTest #test01 stamp: 'totot 11/6/2023 20:17:28'!
test01
	!
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:17:30' prior: 50650900!
test01CreateCartWithUnregisteredUser
	! !

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'totot 11/6/2023 20:17:59'!
Object subclass: #StoreSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:17:51' prior: 50650908!
test01CreateCartWithUnregisteredUser
	
	| storeSystem |
	storeSystem:= StoreSystem new.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:19:01' prior: 50650920!
test01CreateCartWithUnregisteredUser
	
	| storeSystem cartId |
	storeSystem:= StoreSystem new.
	
	cartId := storeSystem createCartForUserID:'Pedro' withPassword:'pass'.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:19:37' prior: 50650927!
test01CreateCartWithUnregisteredUser
	
	| storeSystem |
	storeSystem:= StoreSystem new.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardHasNoCreditErrorMessage.
			self assert:  True ]! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:20:21' prior: 50650936!
test01CreateCartWithUnregisteredUser
	
	| storeSystem |
	storeSystem:= StoreSystem new.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.
			"hay que testear con el listCart" ]! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:20:58' prior: 50650951!
test01CreateCartWithUnregisteredUser
	
	| storeSystem |
	storeSystem:= StoreSystem new.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:20:59'!
ERROR!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:21:05'!
createCartForUserID: aRenameMe1 withPassword: aRenameMe2 
	self shouldBeImplemented.! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:21:10' prior: 50650981!
createCartForUserID: anUserId withPassword: aRenameMe2 
	self shouldBeImplemented.! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:21:14' prior: 50650987!
createCartForUserID: anUserId withPassword: aPassword 
	self shouldBeImplemented.! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:21:29' prior: 50650993!
createCartForUserID: anUserId withPassword: aPassword 
	self error: 'Invalid username'! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:21:32'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:21:32'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:21:49'!
test02CreateCartWithWrongPassword
	
	| storeSystem |
	storeSystem:= StoreSystem new.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:21:56' prior: 50651011!
test02CreateCartWithWrongPassword
	
	| storeSystem |
	storeSystem:= StoreSystem new.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:21:57'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:22:44' prior: 50651024!
test02CreateCartWithWrongPassword
	
	| storeSystem |
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:22:52' prior: 50650965!
test01CreateCartWithUnregisteredUser
	
	| storeSystem |
	storeSystem:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:23:16' prior: 50651053!
test01CreateCartWithUnregisteredUser
	
	| storeSystem |
	storeSystem:=  StoreSystem authenticatingUsersWith: self.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:23:32'!
ERROR!
!StoreSystem class methodsFor: 'instance creation' stamp: 'totot 11/6/2023 20:23:38'!
authenticatingUsersWith: aStoreSystemTest 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAuthenticatingUsersWith: aStoreSystemTest ! !
!StoreSystem class methodsFor: 'instance creation' stamp: 'totot 11/6/2023 20:23:42' prior: 50651084!
authenticatingUsersWith: aStoreSystemTest 
	
	^self new initializeAuthenticatingUsersWith: aStoreSystemTest ! !
!StoreSystem class methodsFor: 'instance creation' stamp: 'totot 11/6/2023 20:23:51' prior: 50651094!
authenticatingUsersWith: anAuthenticationSystem 
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem ! !

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:23:52'!
ERROR!

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'totot 11/6/2023 20:24:00'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'initialization' stamp: 'totot 11/6/2023 20:24:00'!
initializeAuthenticatingUsersWith: anAuthenticationSystem 
	self shouldBeImplemented.
	authenticationSystem := anAuthenticationSystem.! !
!StoreSystem methodsFor: 'initialization' stamp: 'totot 11/6/2023 20:24:02' prior: 50651118!
initializeAuthenticatingUsersWith: anAuthenticationSystem 
	
	authenticationSystem := anAuthenticationSystem.! !

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:24:03'!
FAILURE!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:24:39' prior: 50650999!
createCartForUserID: anUserId withPassword: aPassword 
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:24:42'!
ERROR!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:24:42'!
ERROR!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:24:50'!
ERROR!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:24:50'!
ERROR!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:24:51'!
ERROR!
!StoreSystemTest methodsFor: 'support' stamp: 'totot 11/6/2023 20:25:04'!
authenticateUser: anUserId withPassword: aPassword 
	self shouldBeImplemented.! !
!StoreSystemTest methodsFor: 'support' stamp: 'totot 11/6/2023 20:25:26' prior: 50651160!
authenticateUser: anUserId withPassword: aPassword 
	self error:'Invalid username'! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:25:27'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:25:27'!
FAILURE!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:25:36'!
PASSED!

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 'totot 11/6/2023 20:26:11'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'support' stamp: 'totot 11/6/2023 20:26:10' prior: 50651166!
authenticateUser: anUserId withPassword: aPassword 
	authenticationProcedure value: anUserId value: aPassword.
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:26:39' prior: 50651040!
test02CreateCartWithWrongPassword
	
	| storeSystem |
	authenticationProcedure:= [self error: 'Wrong password'].
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:27:02' prior: 50651067!
test01CreateCartWithUnregisteredUser
	
	| storeSystem |
	authenticationProcedure:=[self error: 'Invalid username'].
	storeSystem:=  StoreSystem authenticatingUsersWith: self.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:27:03'!
FAILURE!
!StoreSystemTest methodsFor: 'support' stamp: 'totot 11/6/2023 20:27:16' prior: 50651190!
authenticateUser: anUserId withPassword: aPassword 
	authenticationProcedure value
	! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:27:17'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:27:17'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:27:42'!
test03CreateCart
	
	| storeSystem |
	authenticationProcedure:= [].
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:29:06' prior: 50651243!
test03CreateCart
	
	| storeSystem cartId |
	authenticationProcedure:= [].
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	storeSystem listCart: cartId.
	self 
		should: []
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:29:45' prior: 50651257!
test03CreateCart
	
	| storeSystem cartId lista |
	authenticationProcedure:= [].
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	lista:= storeSystem listCart: cartId.
	self assert: lista isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:29:53' prior: 50651272!
test03CreateCart
	
	| storeSystem cartId cartItems |
	authenticationProcedure:= [].
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:29:59' prior: 50651284!
test03CreateCart
	
	| storeSystem cartId cartItems |
	authenticationProcedure:= [].
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.! !

!testRun: #StoreSystemTest #test03CreateCart stamp: 'totot 11/6/2023 20:30:00'!
ERROR!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:30:03'!
listCart: cartId 
	self shouldBeImplemented.! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:30:11' prior: 50651311!
listCart: cartId 
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:30:21' prior: 50651316!
listCart: cartId 
	^OrderedCollection new.! !

!testRun: #StoreSystemTest #test03CreateCart stamp: 'totot 11/6/2023 20:30:22'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:30:22'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:30:22'!
PASSED!

!testRun: #StoreSystemTest #test03CreateCart stamp: 'totot 11/6/2023 20:30:22'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:30:38'!
test03CreateOneCart
	
	| storeSystem cartId cartItems |
	authenticationProcedure:= [].
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.! !

!methodRemoval: StoreSystemTest #test03CreateCart stamp: 'totot 11/6/2023 20:30:38'!
test03CreateCart
	
	| storeSystem cartId cartItems |
	authenticationProcedure:= [].
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:30:55'!
test04CreateMoreOneCart
	
	| storeSystem cartId cartItems |
	authenticationProcedure:= [].
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:32:03' prior: 50651212!
test01CreateCartWithUnregisteredUser
	
	| storeSystem |
	authenticationProcedure:=[self error: 'Invalid username'].

	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 'totot 11/6/2023 20:32:19'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:32:17' prior: 50651360!
test04CreateMoreOneCart
	
	| storeSystem cartId cartItems |
	authenticationProcedure:= [].
	storeSystem1:= StoreSystem authenticatingUsersWith: self.
	cartId:= storeSystem1 createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem1 listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:33:01' prior: 50651336!
test03CreateOneCart
	
	| cartId cartItems |
	authenticationProcedure:= [].
	
	cartId:= storeSystem1 createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem1 listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:33:11' prior: 50651197!
test02CreateCartWithWrongPassword
	
	
	authenticationProcedure:= [self error: 'Wrong password'].
	
	
	self 
		should: [storeSystem1 createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:33:16' prior: 50651373!
test01CreateCartWithUnregisteredUser
	
	
	authenticationProcedure:=[self error: 'Invalid username'].

	
	self 
		should: [storeSystem1 createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:33:23' prior: 50651395!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	authenticationProcedure:= [].
	storeSystem1:= StoreSystem authenticatingUsersWith: self.
	cartId:= storeSystem1 createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem1 listCart: cartId.
	
	self assert: cartItems isEmpty.! !

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 'totot 11/6/2023 20:33:26'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:33:26' prior: 50651445!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	authenticationProcedure:= [].
	storeSystem:= StoreSystem authenticatingUsersWith: self.
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:33:26' prior: 50651432!
test01CreateCartWithUnregisteredUser
	
	
	authenticationProcedure:=[self error: 'Invalid username'].

	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:33:26' prior: 50651419!
test02CreateCartWithWrongPassword
	
	
	authenticationProcedure:= [self error: 'Wrong password'].
	
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:33:26' prior: 50651408!
test03CreateOneCart
	
	| cartId cartItems |
	authenticationProcedure:= [].
	
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:33:39' prior: 50651466!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	authenticationProcedure:= [].
	
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'running' stamp: 'totot 11/6/2023 20:33:56' overrides: 16961394!
setUp
	storeSystem:= StoreSystem authenticatingUsersWith: self.! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:33:57'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:33:57'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:33:57'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:33:57'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:34:32' prior: 50651516!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:35:55' prior: 50651545!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:37:18' prior: 50651556!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: self lastAssignedCartId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'running' stamp: 'totot 11/6/2023 20:38:08' prior: 50651527 overrides: 16961394!
setUp
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsings: self.
! !
!StoreSystem class methodsFor: 'instance creation' stamp: 'totot 11/6/2023 20:39:21'!
authenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator  
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem ! !

!methodRemoval: StoreSystem class #authenticatingUsersWith: stamp: 'totot 11/6/2023 20:39:21'!
authenticatingUsersWith: anAuthenticationSystem 
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem !
!StoreSystem methodsFor: 'initialization' stamp: 'totot 11/6/2023 20:39:51'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator  
	
	authenticationSystem := anAuthenticationSystem.! !
!StoreSystem class methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:39:51' prior: 50651586!
authenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator  
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator ! !

!methodRemoval: StoreSystem #initializeAuthenticatingUsersWith: stamp: 'totot 11/6/2023 20:39:51'!
initializeAuthenticatingUsersWith: anAuthenticationSystem 
	
	authenticationSystem := anAuthenticationSystem.!

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'totot 11/6/2023 20:40:10'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem cartIdGEnerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'initialization' stamp: 'totot 11/6/2023 20:40:08' prior: 50651601!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator  
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGEnerator:= anIdGenerator.! !
!StoreSystemTest methodsFor: 'running' stamp: 'totot 11/6/2023 20:40:27' prior: 50651580 overrides: 16961394!
setUp
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing: self.
! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:40:28'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:40:28'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:40:28'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:40:28'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:40:28'!
ERROR!

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'totot 11/6/2023 20:41:50'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem cartIdGEnerator catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:41:49' prior: 50651136!
createCartForUserID: anUserId withPassword: aPassword 
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	Cart acceptingItemsOf: catalog! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:41:57' prior: 50651673!
createCartForUserID: anUserId withPassword: aPassword 
	| cart |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	! !

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'totot 11/6/2023 20:43:01'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem cartIdGEnerator catalog cartsIds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:43:00' prior: 50651681!
createCartForUserID: anUserId withPassword: aPassword 
	| cart |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartsIds at: cartIdGEnerator nextId put:cart.
	! !
!StoreSystem methodsFor: 'initialization' stamp: 'totot 11/6/2023 20:43:15' prior: 50651633!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator  
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGEnerator:= anIdGenerator.
	cartsIds := Dictionary new.! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:43:18'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:43:18'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:43:18'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:43:18'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:43:19'!
ERROR!

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'totot 11/6/2023 20:43:30'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem cartIdGenerator catalog cartsIds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:43:30' prior: 50651698!
createCartForUserID: anUserId withPassword: aPassword 
	| cart |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartsIds at: cartIdGenerator nextId put:cart.
	! !
!StoreSystem methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:43:30' prior: 50651709!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator  
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsIds := Dictionary new.! !

!classDefinition: #CartIdGenerator category: 'TusLibros' stamp: 'totot 11/6/2023 20:44:10'!
Object subclass: #CartIdGenerator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'running' stamp: 'totot 11/6/2023 20:44:08' prior: 50651643 overrides: 16961394!
setUp
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing: CartIdGenerator startingIn:0.
! !
!StoreSystemTest methodsFor: 'running' stamp: 'totot 11/6/2023 20:44:17' prior: 50651772 overrides: 16961394!
setUp
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( CartIdGenerator startingIn:0).
! !
!CartIdGenerator class methodsFor: 'instance creation' stamp: 'totot 11/6/2023 20:44:22'!
startingIn: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeStartingIn: aRenameMe1 ! !
!CartIdGenerator class methodsFor: 'instance creation' stamp: 'totot 11/6/2023 20:44:26' prior: 50651787!
startingIn: aRenameMe1 

	^self new initializeStartingIn: aRenameMe1 ! !

!methodRemoval: CartIdGenerator class #startingIn: stamp: 'totot 11/6/2023 20:45:21'!
startingIn: aRenameMe1 

	^self new initializeStartingIn: aRenameMe1 !
!StoreSystemTest methodsFor: 'running' stamp: 'totot 11/6/2023 20:45:32' prior: 50651780 overrides: 16961394!
setUp
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( CartIdGenerator new).
! !

!classDefinition: #CartIdGenerator category: 'TusLibros' stamp: 'totot 11/6/2023 20:45:50'!
Object subclass: #CartIdGenerator
	instanceVariableNames: 'nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartIdGenerator methodsFor: 'no messages' stamp: 'totot 11/6/2023 20:45:48' overrides: 16920235!
initialize
	nextId:= 1.! !
!CartIdGenerator methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:45:57'!
nextId
	^1.! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:46:00'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:46:00'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:46:00'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:46:00'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:46:00'!
ERROR!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:46:04'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:46:04'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:46:04'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:46:04'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:46:04'!
ERROR!
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:46:07'!
lastAssignedCartId
	self shouldBeImplemented.! !

!methodRemoval: StoreSystemTest #lastAssignedCartId stamp: 'totot 11/6/2023 20:46:14'!
lastAssignedCartId
	self shouldBeImplemented.!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:46:16'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:46:16'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:46:16'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:46:16'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:46:16'!
ERROR!

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 'totot 11/6/2023 20:46:51'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem cartIdGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'running' stamp: 'totot 11/6/2023 20:46:50' prior: 50651807 overrides: 16961394!
setUp
	cartIdGenerator:= CartIdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( cartIdGenerator ).
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:47:03' prior: 50651567!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: cartIdGenerator lastAssignedCartId.
	self assert: cartItems isEmpty.! !

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:47:04'!
ERROR!
!CartIdGenerator methodsFor: 'queris' stamp: 'totot 11/6/2023 20:47:13'!
lastAssignedCartId
	self shouldBeImplemented.! !
!CartIdGenerator methodsFor: 'queris' stamp: 'totot 11/6/2023 20:47:23' prior: 50651917!
lastAssignedCartId
	^nextId -1.! !

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:47:26'!
FAILURE!
!CartIdGenerator methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:47:41' prior: 50651825!
nextId
	nextId:= nextId +1.
	^1.! !
!CartIdGenerator methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:47:51' prior: 50651930!
nextId
	nextId:= nextId +1.
	^1.! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:47:51'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:47:51'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:47:51'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:47:51'!
FAILURE!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:47:51'!
FAILURE!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:48:07'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:48:07'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:48:07'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:48:07'!
FAILURE!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:48:07'!
FAILURE!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:49:07' prior: 50651743!
createCartForUserID: anUserId withPassword: aPassword 
	| cart cartId |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	 cartId:=cartIdGenerator nextId
	cartsIds at: cartId put:cart.
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:49:12' prior: 50651971!
createCartForUserID: anUserId withPassword: aPassword 
	| cart cartId |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	 cartId:=cartIdGenerator nextId.
	cartsIds at: cartId put:cart.
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:49:16' prior: 50651982!
createCartForUserID: anUserId withPassword: aPassword 
	| cart cartId |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartId:=cartIdGenerator nextId.
	cartsIds at: cartId put:cart.
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 20:49:17' prior: 50651993!
createCartForUserID: anUserId withPassword: aPassword 
	| cart cartId |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartId:=cartIdGenerator nextId.
	cartsIds at: cartId put:cart.
	
	^cartId.
	! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:49:18'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:49:18'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:49:18'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:49:18'!
FAILURE!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:49:18'!
FAILURE!
!CartIdGenerator methodsFor: 'queris' stamp: 'totot 11/6/2023 20:49:35' prior: 50651922!
lastAssignedCartId
	^nextId -1;yourself.! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:49:36'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:49:36'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:49:36'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:49:36'!
FAILURE!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:49:36'!
FAILURE!
!CartIdGenerator methodsFor: 'queris' stamp: 'totot 11/6/2023 20:49:40' prior: 50652031!
lastAssignedCartId
	^nextId -1.! !
!CartIdGenerator methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:49:50' prior: 50651935!
nextId
	nextId:= nextId +1.
	^nextId.! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:49:51'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:49:51'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:49:51'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:49:51'!
FAILURE!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:49:51'!
FAILURE!
!CartIdGenerator methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 20:49:59' prior: 50652056!
nextId
	nextId:= nextId+1.
	^nextId-1.! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 20:50:00'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 20:50:00'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 20:50:00'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 20:50:00'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:51:20'!
test05CanAddOneBook
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: cartIdGenerator lastAssignedCartId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:51:38'!
test05CanNotAddNotPublishedBooks
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: cartIdGenerator lastAssignedCartId.
	self assert: cartItems isEmpty.! !

!methodRemoval: StoreSystemTest #test05CanAddOneBook stamp: 'totot 11/6/2023 20:51:38'!
test05CanAddOneBook
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: cartIdGenerator lastAssignedCartId.
	self assert: cartItems isEmpty.!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:52:11' prior: 50652106!
test05CanNotAddNotPublishedBooks
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: cartIdGenerator lastAssignedCartId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:55:12' prior: 50652131!
test05CanNotAddNotPublishedBooks
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:56:00' prior: 50652142!
test05CanNotAddNotPublishedBooks
	
	! !
!Cart class methodsFor: 'error messages' stamp: 'totot 11/6/2023 20:56:16'!
invalidItemErrorMessage
	
	^'Item is not in catalog'! !

!methodRemoval: Cart #invalidItemErrorMessage stamp: 'totot 11/6/2023 20:56:16'!
invalidItemErrorMessage
	
	^'Item is not in catalog'!
!Cart methodsFor: 'assertions' stamp: 'totot 11/6/2023 20:56:22' prior: 50650343!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self class invalidItemErrorMessage ]! !
!Cart class methodsFor: 'error messages' stamp: 'totot 11/6/2023 20:56:32'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'! !

!methodRemoval: Cart #invalidQuantityErrorMessage stamp: 'totot 11/6/2023 20:56:32'!
invalidQuantityErrorMessage
	
	^'Invalid number of items'!
!Cart methodsFor: 'assertions' stamp: 'totot 11/6/2023 20:56:35' prior: 50650349!
assertIsValidQuantity: aQuantity

	aQuantity strictlyPositive ifFalse: [ self error: self class invalidQuantityErrorMessage ]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:58:03' prior: 50652146!
test05CanNotAddNotPublishedBooks
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: StoreTestObjectsFactory new toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart  invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:58:22' prior: 50652182!
test05CanNotAddNotPublishedBooks
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: StoreTestObjectsFactory new itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart  invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 'totot 11/6/2023 20:58:58'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem cartIdGenerator storeTestObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'running' stamp: 'totot 11/6/2023 20:58:56' prior: 50651894 overrides: 16961394!
setUp
	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	cartIdGenerator:= CartIdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( cartIdGenerator ).
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 20:59:07' prior: 50652200!
test05CanNotAddNotPublishedBooks
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart  invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !

!testRun: #StoreSystemTest #test05CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 20:59:55'!
ERROR!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:00:00'!
add: aRenameMe1 ofBookISBN: aRenameMe2 toCart: cartId 
	self shouldBeImplemented.! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:00:25' prior: 50652261!
add: aQuantity ofBookISBN: anItem toCart: cartId 
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:01:14' prior: 50652267!
add: aQuantity ofBookISBN: anItem toCart: cartId 
	cartsIds at:cartId ifAbsent:[self error: 'invalid cartId'].
	! !

!testRun: #StoreSystemTest #test05CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:01:16'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:01:36' prior: 50652239!
test05CanNotAddNotPublishedBooks
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'invalid cartId' .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !

!testRun: #StoreSystemTest #test05CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:01:36'!
FAILURE!

cartId!

cartIdGenerator lastAssignedCartId!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:02:13' prior: 50651506!
test03CreateOneCart
	
	| cartId cartItems |
	authenticationProcedure:= [].
	
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.
	^cartId! !

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:02:14'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:02:14'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:02:14'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:02:14'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:02:14'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:02:14'!
FAILURE!

!testRun: #StoreSystemTest #test05CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:02:14'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:02:57'!
test06CanNotAddNotPublishedBooks
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'invalid cartId' .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !

!methodRemoval: StoreSystemTest #test05CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:02:57'!
test05CanNotAddNotPublishedBooks
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'invalid cartId' .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:03:13' prior: 50652337!
test06CanNotAddNotPublishedBooks
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:03:23'!
test05InvalidCartId
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:03:27' prior: 50652393!
test05InvalidCartId
	
	|  cartId cartItems |
	
	cartId:=200.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:03:36' prior: 50652412!
test05InvalidCartId
	
	|  cartId cartItems |
	
	cartId:=200.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='Invalid cartId' .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:03:37'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:04:01' prior: 50652430!
test05InvalidCartId
	
	|  cartId cartItems |
	
	cartId:=200.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId' .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:04:02'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:04:18' prior: 50652450!
test05InvalidCartId
	
	|  cartId |
	
	cartId:=200.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:04:33' prior: 50652470!
test05InvalidCartId
	
	
	
	
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: 200. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	! !

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:04:35'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:04:35'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:04:35'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:04:35'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:04:35'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:04:35'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:04:35'!
FAILURE!

!testRun: #StoreSystemTest #test06CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:04:35'!
FAILURE!

!testRun: #StoreSystemTest #test06CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:04:41'!
FAILURE!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:05:42' prior: 50652272!
add: aQuantity ofBookISBN: anItem toCart: cartId 
	cartsIds at:cartId 
		ifPresent:[:cart|] 
		ifAbsent:[self error: 'invalid cartId'].
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:06:06' prior: 50652523!
add: aQuantity ofBookISBN: anItem toCart: cartId 
	cartsIds at:cartId 
		ifPresent:[:cart| cart add:anItem occurrencesOf: aQuantity]
		ifAbsent:[self error: 'invalid cartId'].
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:06:40' prior: 50652531!
add: aQuantity ofBookISBN: anItem toCart: cartId 
	cartsIds at:cartId 
		ifPresent:[:cart| cart add:aQuantity of: anItem]
		ifAbsent:[self error: 'invalid cartId'].
	
	
	! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:06:45'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:06:45'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:06:45'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:06:45'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:06:45'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:06:45'!
ERROR!

!testRun: #StoreSystemTest #test06CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:06:45'!
ERROR!
!StoreSystem methodsFor: 'initialization' stamp: 'totot 11/6/2023 21:07:38' prior: 50651754!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator  
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsIds := Dictionary new.! !
!StoreSystem methodsFor: 'initialization' stamp: 'totot 11/6/2023 21:08:07'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator aCatalog: aCatalog   
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsIds := Dictionary new.! !
!StoreSystem class methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 21:08:07' prior: 50651609!
authenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator  
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator aCatalog: self halt ! !

!methodRemoval: StoreSystem #initializeAuthenticatingUsersWith:generatingCartIdUsing: stamp: 'totot 11/6/2023 21:08:07'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator  
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsIds := Dictionary new.!
!StoreSystem class methodsFor: 'instance creation' stamp: 'totot 11/6/2023 21:08:51'!
authenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator aCatalog: self halt ! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 21:08:51' prior: 50652229 overrides: 16961394!
setUp
	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	cartIdGenerator:= CartIdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( cartIdGenerator ) withCatalog: self halt.
	! !

!methodRemoval: StoreSystem class #authenticatingUsersWith:generatingCartIdUsing: stamp: 'totot 11/6/2023 21:08:51'!
authenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator  
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator aCatalog: self halt !
!StoreSystem methodsFor: 'initialization' stamp: 'totot 11/6/2023 21:09:09'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsIds := Dictionary new.! !
!StoreSystem class methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 21:09:09' prior: 50652612!
authenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: self halt ! !

!methodRemoval: StoreSystem #initializeAuthenticatingUsersWith:generatingCartIdUsing:aCatalog: stamp: 'totot 11/6/2023 21:09:09'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator aCatalog: aCatalog   
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsIds := Dictionary new.!
!StoreSystemTest methodsFor: 'running' stamp: 'totot 11/6/2023 21:09:38' prior: 50652624 overrides: 16961394!
setUp
	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	cartIdGenerator:= CartIdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( cartIdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !
!StoreSystem class methodsFor: 'instance creation' stamp: 'totot 11/6/2023 21:09:47' prior: 50652656!
authenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog ! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:09:49'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:09:49'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:09:50'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:09:50'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:09:50'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:09:50'!
ERROR!
!StoreSystem methodsFor: 'initialization' stamp: 'totot 11/6/2023 21:10:10' prior: 50652645!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsIds := Dictionary new.
	catalog := aCatalog ! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:10:10'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:10:10'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:10:10'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:10:11'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:10:11'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:10:11'!
PASSED!
!StoreSystem methodsFor: 'initialization' stamp: 'totot 11/6/2023 21:10:12' prior: 50652721!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsIds := Dictionary new.
	catalog := aCatalog.! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:11:04'!
test06
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !

!methodRemoval: StoreSystemTest #test06 stamp: 'totot 11/6/2023 21:11:06'!
test06
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:13:28'!
test08CanListOneAddedItem
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:15:41' prior: 50652797!
test08CanListOneAddedItem
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:1;yourself).
	! !

!testRun: #StoreSystemTest #test08CanListOneAddedItem stamp: 'totot 11/6/2023 21:15:46'!
FAILURE!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:16:06' prior: 50652540!
add: aQuantity ofBookISBN: anItem toCart: cartId 
	cartsIds at:cartId 
		ifPresent:[:cart| cart add:aQuantity of: anItem]
		ifAbsent:[self error: 'invalid cartId'].
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:16:27' prior: 50651320!
listCart: cartId 
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:17:05' prior: 50652842!
listCart: cartId 
	cartsIds at:cartId ifPresent:[:cart| cart ].
		! !
!Cart methodsFor: 'initialization' stamp: 'totot 11/6/2023 21:17:53' prior: 50650356!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'totot 11/6/2023 21:17:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'totot 11/6/2023 21:17:54'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'totot 11/6/2023 21:17:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'totot 11/6/2023 21:17:54'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'totot 11/6/2023 21:17:54'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'totot 11/6/2023 21:17:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'totot 11/6/2023 21:17:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'totot 11/6/2023 21:17:54'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'totot 11/6/2023 21:18:08' prior: 50652851!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'initialization' stamp: 'totot 11/6/2023 21:18:32'!
withItemsDo: aOneArgBlock
	items do: aOneArgBlock.! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:23:54' prior: 50652846!
listCart: cartId 
	| dic |
	dic:= Dictionary new.
	cartsIds at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			dic at: item ifAbsentPut: 1.
			dic at: item ifPresent:[:quantity | dic noCheckAdd: (quantity + 1)]]].
		! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:24:42' prior: 50652894!
listCart: cartId 
	| dic |
	dic:= Dictionary new.
	cartsIds at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			dic at: item ifAbsentPut: 0.
			dic at: item ifPresent:[:quantity | dic noCheckAdd: (quantity + 1)]]].
		! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:24:59' prior: 50652904!
listCart: cartId 
	| dic |
	dic:= Dictionary new.
	cartsIds at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			dic at: item ifAbsentPut: 0.
			dic at: item ifPresent:[:quantity | dic at: item put: (quantity + 1)]]].
		! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:25:00'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:25:00'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:25:00'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:25:00'!
ERROR!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:25:00'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:25:00'!
ERROR!

!testRun: #StoreSystemTest #test08CanListOneAddedItem stamp: 'totot 11/6/2023 21:25:00'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:25:04'!
ERROR!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:25:23' prior: 50652914!
listCart: cartId 
	| dic |
	dic:= Dictionary new.
	cartsIds at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			dic at: item ifAbsentPut: 0.
			dic at: item ifPresent:[:quantity | dic at: item put: (quantity + 1)]]].
	^dic
		! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:25:24'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:25:24'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:25:24'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:25:24'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:25:24'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:25:24'!
PASSED!

!testRun: #StoreSystemTest #test08CanListOneAddedItem stamp: 'totot 11/6/2023 21:25:24'!
PASSED!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:25:36' prior: 50652949!
listCart: cartId 
	| cartItemsList |
	cartItemsList:= Dictionary new.
	cartsIds at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			cartItemsList at: item ifAbsentPut: 0.
			cartItemsList at: item ifPresent:[:quantity | cartItemsList at: item put: (quantity + 1)]]].
	^cartItemsList
		! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:25:49' prior: 50652981!
listCart: cartId 
	| cartItems |
	cartItems:= Dictionary new.
	cartsIds at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent:[:quantity | cartItems at: item put: (quantity + 1)]]].
	^cartItems
		! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:26:08'!
test06CanNotAddInvalidItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !

!methodRemoval: StoreSystemTest #test06CanNotAddNotPublishedBooks stamp: 'totot 11/6/2023 21:26:08'!
test06CanNotAddNotPublishedBooks
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:26:31'!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:1;yourself).
	! !

!methodRemoval: StoreSystemTest #test08CanListOneAddedItem stamp: 'totot 11/6/2023 21:26:33'!
test08CanListOneAddedItem
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:1;yourself).
	!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:26:35'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:26:35'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:26:35'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:26:35'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:26:35'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:26:35'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'totot 11/6/2023 21:26:35'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:26:35'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:26:40' prior: 50653041!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:1;yourself).
	! !

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:26:41'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:26:45' prior: 50653093!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:2;yourself).
	! !

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:26:45'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:26:45'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:26:45'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:26:45'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:26:45'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:26:45'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'totot 11/6/2023 21:26:45'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:26:45'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:26:56' prior: 50653110!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:4;yourself).
	! !

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:26:57'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:26:57'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:26:57'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:26:57'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:26:57'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:26:57'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'totot 11/6/2023 21:26:57'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:26:57'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:27:07' prior: 50653148!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  anotherItemSellByTheStore toCart: cartId.
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:4;yourself).
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:27:48' prior: 50653189!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  anotherItemSellByTheStore toCart: cartId.
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:4; at: storeTestObjectsFactory anotherItemSellbyTheStore put: 2;yourself).
	! !

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:27:50'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'totot 11/6/2023 21:27:59'!
anotherItemSellByTheStore
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'totot 11/6/2023 21:28:09' prior: 50653233!
anotherItemSellByTheStore
	^'another valid item'! !

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:28:10'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'totot 11/6/2023 21:28:36' prior: 50650847!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStore ;
		yourself ! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:28:37'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'totot 11/6/2023 21:28:37'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'totot 11/6/2023 21:28:37'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'totot 11/6/2023 21:28:37'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'totot 11/6/2023 21:28:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'totot 11/6/2023 21:28:37'!
PASSED!
!StoreTestObjectsFactory methodsFor: 'cart' stamp: 'totot 11/6/2023 21:28:52' prior: 50653246!
defaultCatalog
	
	^ Dictionary new
		at: self itemSellByTheStore put: self itemSellByTheStorePrice;
		at: self anotherItemSellByTheStore put: self anotherItemSellByTheStorePrice;
		yourself ! !

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'totot 11/6/2023 21:28:54'!
ERROR!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'totot 11/6/2023 21:28:54'!
ERROR!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'totot 11/6/2023 21:28:54'!
ERROR!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'totot 11/6/2023 21:28:55'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'totot 11/6/2023 21:28:56'!
ERROR!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'totot 11/6/2023 21:28:59'!
anotherItemSellByTheStorePrice
	self shouldBeImplemented.! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 'totot 11/6/2023 21:29:04' prior: 50653381!
anotherItemSellByTheStorePrice
	^200! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'totot 11/6/2023 21:29:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'totot 11/6/2023 21:29:06'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:29:19' prior: 50650429!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [ cart add: testObjectsFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'totot 11/6/2023 21:29:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'totot 11/6/2023 21:29:21'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'totot 11/6/2023 21:29:22'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:29:30' prior: 50650415!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectsFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'totot 11/6/2023 21:29:31'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'totot 11/6/2023 21:29:31'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'totot 11/6/2023 21:29:31'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'totot 11/6/2023 21:29:31'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'totot 11/6/2023 21:29:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'totot 11/6/2023 21:29:31'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'totot 11/6/2023 21:29:31'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'totot 11/6/2023 21:29:31'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'totot 11/6/2023 21:29:31'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'totot 11/6/2023 21:29:31'!
ERROR!
!CartTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:29:37' prior: 50650473!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testObjectsFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectsFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'totot 11/6/2023 21:29:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'totot 11/6/2023 21:29:40'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'totot 11/6/2023 21:29:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'totot 11/6/2023 21:29:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'totot 11/6/2023 21:29:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'totot 11/6/2023 21:29:42'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'totot 11/6/2023 21:29:42'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'totot 11/6/2023 21:29:42'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'totot 11/6/2023 21:29:42'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'totot 11/6/2023 21:29:43'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'totot 11/6/2023 21:29:43'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'totot 11/6/2023 21:29:43'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:29:43'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:29:43'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:29:44'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:29:44'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:29:44'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'totot 11/6/2023 21:29:44'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:29:44'!
ERROR!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:29:54' prior: 50653209!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  anotherItemSellByTheStore toCart: cartId.
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:4; at: storeTestObjectsFactory anotherItemSellByTheStore put: 2;yourself).
	! !

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:29:56'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:30:09' prior: 50653544!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  anotherItemSellByTheStore toCart: cartId.
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:3; at: storeTestObjectsFactory anotherItemSellByTheStore put: 1;yourself).
	! !

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:30:15'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:30:15'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:30:15'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:30:15'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:30:15'!
PASSED!

!testRun: #StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:30:15'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'totot 11/6/2023 21:30:15'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:30:15'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:30:52'!
test09CanNotCheckoutInvalidId
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  anotherItemSellByTheStore toCart: cartId.
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:3; at: storeTestObjectsFactory anotherItemSellByTheStore put: 1;yourself).
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:30:59' prior: 50653615!
test09CanNotCheckoutInvalidId
	
	|  cartId |
	
	cartId:=200
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:31:03' prior: 50653637!
test09CanNotCheckoutInvalidId
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:31:10' prior: 50652483!
test05InvalidCartId
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: 200. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:31:20'!
test05CanNotAddItemToInvalidCartId
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: 200. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	! !

!methodRemoval: StoreSystemTest #test05InvalidCartId stamp: 'totot 11/6/2023 21:31:20'!
test05InvalidCartId
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: 200. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:31:51'!
test09CanNotCheckoutUnregisteredCart
	
	
	

	
	! !

!methodRemoval: StoreSystemTest #test09CanNotCheckoutInvalidId stamp: 'totot 11/6/2023 21:31:51'!
test09CanNotCheckoutInvalidId
	
	
	

	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:32:08' prior: 50653681!
test09CanNotCheckoutUnregisteredCart
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:33:19' prior: 50653690!
test09CanNotCheckoutUnregisteredCart
	
	self 
		should: [storeSystem checkoutCart: 200 payingWith: storeTestObjectsFactory createCart . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:33:33' prior: 50653695!
test09CanNotCheckoutUnregisteredCart
	
	self 
		should: [storeSystem checkoutCart: 200 payingWith: storeTestObjectsFactory notExpiredCreditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	
	

	
	! !

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'totot 11/6/2023 21:33:38'!
ERROR!
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:33:41'!
checkoutCart: aRenameMe1 payingWith: aRenameMe2 
	self shouldBeImplemented.! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:33:43' prior: 50653722!
checkoutCart: aRenameMe1 payingWith: aRenameMe2 
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:33:46' prior: 50653728!
checkoutCart: aCartId payingWith: aRenameMe2 
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:33:53' prior: 50653733!
checkoutCart: aCartId payingWith: aCreditCard 
	! !
!StoreSystem methodsFor: 'methods' stamp: 'totot 11/6/2023 21:34:22' prior: 50653738!
checkoutCart: aCartId payingWith: aCreditCard 
	self error: 'invalid cartId'.! !

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'totot 11/6/2023 21:34:23'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'totot 11/6/2023 21:34:23'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'totot 11/6/2023 21:34:23'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'totot 11/6/2023 21:34:23'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'totot 11/6/2023 21:34:23'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'totot 11/6/2023 21:34:23'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'totot 11/6/2023 21:34:23'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'totot 11/6/2023 21:34:23'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'totot 11/6/2023 21:34:23'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:35:08'!
test10CanCheckout
	
	self 
		should: [storeSystem checkoutCart: 200 payingWith: storeTestObjectsFactory notExpiredCreditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:35:29' prior: 50653777!
test10CanCheckout
	| cartId |
	cartId:= self test03CreateOneCart.
	
	self 
		should: [storeSystem checkoutCart: 200 payingWith: storeTestObjectsFactory notExpiredCreditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:35:39' prior: 50653789!
test10CanCheckout
	| cartId |
	cartId:= self test03CreateOneCart.
	
	self 
		should: [storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:35:51' prior: 50653802!
test10CanCheckout
	| cartId |
	cartId:= self test03CreateOneCart.
	storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard . 
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:36:04' prior: 50653815!
test10CanCheckout
	| cartId sale |
	cartId:= self test03CreateOneCart.
	sale:= storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard . 
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:37:06' prior: 50653824!
test10CanCheckout
	| cartId sale |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore to: cartId.
	sale:= storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard . 
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:37:19' prior: 50653833!
test10CanCheckout
	| cartId sale |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	sale:= storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard . 
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:37:31' prior: 50653845!
test10CanCheckout
	| cartId sale |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	sale:= storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard . 
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:37:55' prior: 50653857!
test10CanCheckout
	| cartId sale |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	sale:= storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard . 
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:38:10' prior: 50653869!
test10CanCheckout
	| cartId sale |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	sale:= storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	 
	
	
	
	
	

	
	! !

!classRenamed: #CartIdGenerator as: #IdGenerator stamp: 'totot 11/6/2023 21:38:44'!
Smalltalk renameClassNamed: #CartIdGenerator as: #IdGenerator!
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'totot 11/6/2023 21:38:44' prior: 50652679 overrides: 16961394!
setUp
	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	cartIdGenerator:= IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( cartIdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:39:14' prior: 50653881!
test10CanCheckout
	| cartId sale |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	sale:= storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:39:47' prior: 50653910!
test10CanCheckout
	| cartId sale |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	sale := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	
	self assert: sale equals: cartIdGenerator lastAssignedCartId.
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:39:51' prior: 50653922!
test10CanCheckout
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	
	self assert: transactionId equals: cartIdGenerator lastAssignedCartId.
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'totot 11/6/2023 21:42:12' prior: 50653936!
test10CanCheckout
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: cartIdGenerator lastAssignedCartId.
	
	
	
	

	
	! !

----QUIT----(6 November 2023 21:42:26) CuisUniversity-5981.image priorSource: 10197292!

----STARTUP---- (9 November 2023 01:32:00) as C:\Users\iboaretto\Desktop\UBA\Inge1\TusLibrosIT33\windows64\CuisUniversity-5981.image!


----End fileIn of C:\Users\iboaretto\Desktop\UBA\Inge1\TusLibrosIT33\windows64\TusLibros.st----!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 01:33:04'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 01:33:04'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 01:33:04'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 01:33:04'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 01:33:04'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 01:33:04'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 01:33:04'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 01:33:05'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 01:33:05'!
ERROR!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 01:33:05'!
ERROR!

----SNAPSHOT----(9 November 2023 01:33:16) CuisUniversity-5981.image priorSource: 10197292!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 01:33:30' prior: 50650586!
test01CreateCartWithUnregisteredUser
	
	
	authenticationProcedure:= [self error: 'Invalid username'].

	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 01:33:34' prior: 50651183!
test01CreateCartWithUnregisteredUser
	
	
	authenticationProcedure := [self error: 'Invalid username'].

	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 01:33:40' prior: 50651196!
test01CreateCartWithUnregisteredUser
	
	authenticationProcedure := [self error: 'Invalid username'].
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 01:33:47' prior: 50650599!
test02CreateCartWithWrongPassword
	
	authenticationProcedure:= [self error: 'Wrong password'].
	
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 01:33:50' prior: 50651222!
test02CreateCartWithWrongPassword
	
	authenticationProcedure:= [self error: 'Wrong password'].
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 01:34:17' prior: 50650633!
test05CanNotAddItemToInvalidCartId
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemNotSellByTheStore toCart: 200. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 01:34:22' prior: 50651248!
test05CanNotAddItemToInvalidCartId
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemNotSellByTheStore toCart: 200]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 01:34:49' prior: 50650696!
test10CanCheckout

	| cartId transactionId |
	
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: cartIdGenerator lastAssignedCartId.
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 01:35:00' prior: 50651272!
test10CanCheckout

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: cartIdGenerator lastAssignedCartId.
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 01:35:11' prior: 50651287!
test10CanCheckout

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: cartIdGenerator lastAssignedCartId
	
	
	
	

	
	! !

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 01:36:22'!
ERROR!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 01:37:11'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 01:37:11'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 01:37:11'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 01:37:11'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 01:37:11'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 01:37:11'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 01:37:11'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 01:37:11'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 01:37:11'!
ERROR!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 01:37:11'!
ERROR!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:37:39' prior: 50651011!
add: aQuantity ofBookISBN: anItem toCart: cartId

	cartsIds at:cartId 
		ifPresent:[:cart| cart add:aQuantity of: anItem]
		ifAbsent:[self error: 'invalid cartId'].
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:37:49' prior: 50651350!
add: aQuantity ofBookISBN: anItem toCart: aCartId

	cartsIds at: aCartId 
		ifPresent:[:cart| cart add:aQuantity of: anItem]
		ifAbsent:[self error: 'invalid cartId'].
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:37:54' prior: 50651359!
add: aQuantity ofBookISBN: anItem toCart: aCartId

	cartsIds at: aCartId 
		ifPresent:[:cart| cart add:aQuantity of: anItem]
		ifAbsent: [self error: 'invalid cartId'].
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:37:56' prior: 50651368!
add: aQuantity ofBookISBN: anItem toCart: aCartId

	cartsIds at: aCartId 
		ifPresent: [:cart| cart add:aQuantity of: anItem]
		ifAbsent: [self error: 'invalid cartId'].
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:38:02' prior: 50651377!
add: aQuantity ofBookISBN: anItem toCart: aCartId

	cartsIds at: aCartId 
		ifPresent: [:cart| cart add: aQuantity of: anItem]
		ifAbsent: [self error: 'invalid cartId'].
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:38:18' prior: 50651386!
add: aQuantity ofBookISBN: anItem toCart: aCartId

	| aOneArgBlock |
	aOneArgBlock := [:cart| cart add: aQuantity of: anItem].
	cartsIds at: aCartId 
		ifPresent: aOneArgBlock
		ifAbsent: [self error: 'invalid cartId'].
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:38:22' prior: 50651395!
add: aQuantity ofBookISBN: anItem toCart: aCartId

	| aOneArgBlock |
	aOneArgBlock := [:cart| cart add: aQuantity of: anItem].
	cartsIds at: aCartId 
		ifPresent: aOneArgBlock
		ifAbsent: [self error: 'invalid cartId']
		
	
	
	! !

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'IB 11/9/2023 01:38:42'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem cartIdGenerator catalog cartsByID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:38:42' prior: 50651035!
listCart: cartId 
	| cartItems |
	cartItems:= Dictionary new.
	cartsByID at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent:[:quantity | cartItems at: item put: (quantity + 1)]]].
	^cartItems
		! !
!StoreSystem methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:38:42' prior: 50651046!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsByID := Dictionary new.
	catalog := aCatalog.! !
!StoreSystem methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:38:42' prior: 50651024!
createCartForUserID: anUserId withPassword: aPassword 
	| cart cartId |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartId:=cartIdGenerator nextId.
	cartsByID at: cartId put:cart.
	
	^cartId.
	! !
!StoreSystem methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:38:42' prior: 50651405!
add: aQuantity ofBookISBN: anItem toCart: aCartId

	| aOneArgBlock |
	aOneArgBlock := [:cart| cart add: aQuantity of: anItem].
	cartsByID at: aCartId 
		ifPresent: aOneArgBlock
		ifAbsent: [self error: 'invalid cartId']
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:39:06'!
withCartIdentifiedBy: aCartId do: aOneArgBlock

	^ cartsByID at: aCartId 
		ifPresent: aOneArgBlock
		ifAbsent: [self error: 'invalid cartId']! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:39:06' prior: 50651460!
add: aQuantity ofBookISBN: anItem toCart: aCartId

	| aOneArgBlock |
	aOneArgBlock := [:cart| cart add: aQuantity of: anItem].
	self withCartIdentifiedBy: aCartId do: aOneArgBlock
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:39:13' prior: 50651478!
add: aQuantity ofBookISBN: anItem toCart: aCartId

	self withCartIdentifiedBy: aCartId do: [:cart| cart add: aQuantity of: anItem]
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:39:33'!
add: aQuantity of: anItem toCart: aCartId

	self withCartIdentifiedBy: aCartId do: [:cart| cart add: aQuantity of: anItem]
		
	
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:39:33' prior: 50651260!
test05CanNotAddItemToInvalidCartId
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory itemNotSellByTheStore toCart: 200]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:39:33' prior: 50651302!
test10CanCheckout

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: cartIdGenerator lastAssignedCartId
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:39:33' prior: 50650663!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 1 of: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 1 of: storeTestObjectsFactory  anotherItemSellByTheStore toCart: cartId.
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:3; at: storeTestObjectsFactory anotherItemSellByTheStore put: 1;yourself).
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:39:33' prior: 50650645!
test06CanNotAddInvalidItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !

!methodRemoval: StoreSystem #add:ofBookISBN:toCart: stamp: 'IB 11/9/2023 01:39:33'!
add: aQuantity ofBookISBN: anItem toCart: aCartId

	self withCartIdentifiedBy: aCartId do: [:cart| cart add: aQuantity of: anItem]
		
	
	
	!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:40:56' prior: 50651019!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: self halt
			on: self halt
			registeringOn:  OrderedCollection new  ].
	 
	self error: 'invalid cartId'.! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:41:07' prior: 50651576!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | 
		Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: self halt
			on: self halt
			registeringOn:  OrderedCollection new ].
	 
	self error: 'invalid cartId'.! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:41:12' prior: 50651588!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | 
		Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: self halt
			on: self halt
			registeringOn:  OrderedCollection new ]! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:41:59' prior: 50651600!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | 
		Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: self halt
			on: Date today
			registeringOn:  OrderedCollection new ]! !
!StoreSystem class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 01:43:48'!
authenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog ! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:43:48' prior: 50650716 overrides: 16961394!
setUp
	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	cartIdGenerator:= IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( cartIdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog chargingCardsThrought: self halt .
	! !

!methodRemoval: StoreSystem class #authenticatingUsersWith:generatingCartIdUsing:withCatalog: stamp: 'IB 11/9/2023 01:43:48'!
authenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog !
!StoreSystem class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 01:44:02' prior: 50651622!
authenticatingUsersWith: anAuthenticationSystem 
generatingCartIdUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor    
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog ! !
!StoreSystem methodsFor: 'initialization' stamp: 'IB 11/9/2023 01:44:42'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsByID := Dictionary new.
	catalog := aCatalog.! !
!StoreSystem class methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:44:42' prior: 50651659!
authenticatingUsersWith: anAuthenticationSystem 
generatingCartIdUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor    
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor ! !

!methodRemoval: StoreSystem #initializeAuthenticatingUsersWith:generatingCartIdUsing:withCatalog: stamp: 'IB 11/9/2023 01:44:42'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsByID := Dictionary new.
	catalog := aCatalog.!

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'IB 11/9/2023 01:45:04'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem cartIdGenerator catalog cartsByID merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'initialization' stamp: 'IB 11/9/2023 01:45:01' prior: 50651671!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsByID := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:45:17' prior: 50651611!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | 
		Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn:  OrderedCollection new ]! !
!StoreSystemTest methodsFor: 'running' stamp: 'IB 11/9/2023 01:46:09' prior: 50651635 overrides: 16961394!
setUp
	storeTestObjectsFactory := StoreTestObjectsFactory new.
	cartIdGenerator := IdGenerator new.
	storeSystem := 
		StoreSystem 
			authenticatingUsersWith: self 
			generatingCartIdUsing: cartIdGenerator  
			withCatalog: storeTestObjectsFactory defaultCatalog 
			chargingCardsThrought: self halt .
	! !
!StoreSystemTest methodsFor: 'running' stamp: 'IB 11/9/2023 01:46:13' prior: 50651745 overrides: 16961394!
setUp
	storeTestObjectsFactory := StoreTestObjectsFactory new.
	cartIdGenerator := IdGenerator new.
	storeSystem := 
		StoreSystem 
			authenticatingUsersWith: self 
			generatingCartIdUsing: cartIdGenerator  
			withCatalog: storeTestObjectsFactory defaultCatalog 
			chargingCardsThrought: self
	! !
!StoreSystemTest methodsFor: 'support' stamp: 'IB 11/9/2023 01:46:35' prior: 50650710!
authenticateUser: anUserId withPassword: aPassword

	authenticationProcedure value
	! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 01:46:44'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 01:46:44'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 01:46:44'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 01:46:44'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 01:46:44'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 01:46:45'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 01:46:45'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 01:46:45'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 01:46:45'!
FAILURE!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 01:46:45'!
FAILURE!

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 'IB 11/9/2023 01:47:13'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem cartIdGenerator storeTestObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'support - stub' stamp: 'IB 11/9/2023 01:47:11'!
debit: anAmount from: aCreditCard 

	^debitBehavior value: anAmount value: aCreditCard ! !
!StoreSystemTest methodsFor: 'running' stamp: 'IB 11/9/2023 01:48:03' prior: 50651758 overrides: 16961394!
setUp

	storeTestObjectsFactory := StoreTestObjectsFactory new.
	cartIdGenerator := IdGenerator new.
	storeSystem := 
		StoreSystem 
			authenticatingUsersWith: self 
			generatingCartIdUsing: cartIdGenerator  
			withCatalog: storeTestObjectsFactory defaultCatalog 
			chargingCardsThrought: self
	! !
!StoreSystemTest methodsFor: 'running' stamp: 'IB 11/9/2023 01:48:32' prior: 50651824 overrides: 16961394!
setUp

	storeTestObjectsFactory := StoreTestObjectsFactory new.
	cartIdGenerator := IdGenerator new.
	debitBehavior := [:amount :card |].
	storeSystem := 
		StoreSystem 
			authenticatingUsersWith: self 
			generatingCartIdUsing: cartIdGenerator  
			withCatalog: storeTestObjectsFactory defaultCatalog 
			chargingCardsThrought: self
	! !

----SNAPSHOT----(9 November 2023 01:48:41) CuisUniversity-5981.image priorSource: 10224920!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 01:48:49'!
FAILURE!
!IdGenerator methodsFor: 'queries' stamp: 'IB 11/9/2023 01:49:20'!
lastAssignedId
	^nextId -1.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:49:20' prior: 50651550!
test06CanNotAddInvalidItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:49:20' prior: 50651514!
test10CanCheckout

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: cartIdGenerator lastAssignedId
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:49:20' prior: 50650621!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: cartIdGenerator lastAssignedId.
	self assert: cartItems isEmpty.! !

!methodRemoval: IdGenerator #lastAssignedCartId stamp: 'IB 11/9/2023 01:49:20'!
lastAssignedCartId
	^nextId -1.!

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 'IB 11/9/2023 01:49:32'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem idGenerator storeTestObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:49:32' prior: 50651895!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: idGenerator lastAssignedId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:49:32' prior: 50651837 overrides: 16961394!
setUp

	storeTestObjectsFactory := StoreTestObjectsFactory new.
	idGenerator := IdGenerator new.
	debitBehavior := [:amount :card |].
	storeSystem := 
		StoreSystem 
			authenticatingUsersWith: self 
			generatingCartIdUsing: idGenerator  
			withCatalog: storeTestObjectsFactory defaultCatalog 
			chargingCardsThrought: self
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:49:32' prior: 50651861!
test06CanNotAddInvalidItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: idGenerator lastAssignedId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:49:32' prior: 50651880!
test10CanCheckout

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId
	
	
	
	

	
	! !
!StoreSystem class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 01:50:11'!
authenticatingUsersWith: anAuthenticationSystem 
generatingIdsUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor    
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor ! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:50:11' prior: 50651934 overrides: 16961394!
setUp

	storeTestObjectsFactory := StoreTestObjectsFactory new.
	idGenerator := IdGenerator new.
	debitBehavior := [:amount :card |].
	storeSystem := 
		StoreSystem 
			authenticatingUsersWith: self 
			generatingIdsUsing: idGenerator  
			withCatalog: storeTestObjectsFactory defaultCatalog 
			chargingCardsThrought: self
	! !

!methodRemoval: StoreSystem class #authenticatingUsersWith:generatingCartIdUsing:withCatalog:chargingCardsThrought: stamp: 'IB 11/9/2023 01:50:11'!
authenticatingUsersWith: anAuthenticationSystem 
generatingCartIdUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor    
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor !
!StoreSystem methodsFor: 'initialization' stamp: 'IB 11/9/2023 01:50:27'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsByID := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor! !
!StoreSystem class methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:50:27' prior: 50651981!
authenticatingUsersWith: anAuthenticationSystem 
generatingIdsUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor    
	
	^self new initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor ! !

!methodRemoval: StoreSystem #initializeAuthenticatingUsersWith:generatingCartIdUsing:withCatalog:chargingCardsThrought: stamp: 'IB 11/9/2023 01:50:27'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsByID := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor!
!StoreSystem class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 01:50:45' prior: 50652037!
authenticatingUsersWith: anAuthenticationSystem 
generatingIdsUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor    
	
	^self new 
		initializeAuthenticatingUsersWith: anAuthenticationSystem 
		generatingIdsUsing: anIdGenerator 
		withCatalog: aCatalog 
		chargingCardsThrought: aMerchantProcessor ! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:51:34' prior: 50651733!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | 
		Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: OrderedCollection new ]! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:51:55' prior: 50651448!
createCartForUserID: anUserId withPassword: aPassword

	| cart cartId |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartId:=cartIdGenerator nextId.
	cartsByID at: cartId put:cart.
	
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:52:00' prior: 50652091!
createCartForUserID: anUserId withPassword: aPassword

	| cart cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartId:=cartIdGenerator nextId.
	cartsByID at: cartId put:cart.
	
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:52:18' prior: 50652102!
createCartForUserID: anUserId withPassword: aPassword

	| cart cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword: aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartId:=cartIdGenerator nextId.
	cartsByID at: cartId put:cart.
	
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:52:35' prior: 50652114!
createCartForUserID: anUserId withPassword: aPassword

	| cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword: aPassword.
	cartId:=cartIdGenerator nextId.
	cartsByID at: cartId put:Cart acceptingItemsOf: catalog.
	
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:52:44' prior: 50652126!
createCartForUserID: anUserId withPassword: aPassword

	| cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword: aPassword.
	cartId:=cartIdGenerator nextId.
	cartsByID at: cartId put: (Cart acceptingItemsOf: catalog).
	
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:52:49' prior: 50652137!
createCartForUserID: anUserId withPassword: aPassword

	| cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword: aPassword.
	cartId := cartIdGenerator nextId.
	cartsByID at: cartId put: (Cart acceptingItemsOf: catalog).
	
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:53:01' prior: 50652148!
createCartForUserID: anUserId withPassword: aPassword

	| cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword: aPassword.
	
	cartId := cartIdGenerator nextId.
	cartsByID at: cartId put: (Cart acceptingItemsOf: catalog).
	
	^cartId.
	! !

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'IB 11/9/2023 01:53:21'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem idGenerator catalog cartsByID merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:53:21' prior: 50652159!
createCartForUserID: anUserId withPassword: aPassword

	| cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword: aPassword.
	
	cartId := idGenerator nextId.
	cartsByID at: cartId put: (Cart acceptingItemsOf: catalog).
	
	^cartId.
	! !
!StoreSystem methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 01:53:21' prior: 50652023!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	authenticationSystem := anAuthenticationSystem.
	idGenerator:= anIdGenerator.
	cartsByID := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:58:09' prior: 50652080!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart |
		Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: OrderedCollection new]! !

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'IB 11/9/2023 01:58:41'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem idGenerator catalog cartsByID merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 01:58:36' prior: 50652204!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart |
		Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: salesBook]! !

!classDefinition: #SalesBook category: 'TusLibros' stamp: 'IB 11/9/2023 01:59:25'!
Object subclass: #SalesBook
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'initialization' stamp: 'IB 11/9/2023 01:59:22' prior: 50652190!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	authenticationSystem := anAuthenticationSystem.
	idGenerator:= anIdGenerator.
	cartsByID := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	salesBook := SalesBook generatingTransactionIdsUsing: idGenerator! !
!SalesBook class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 01:59:42'!
generatingTransactionIdsUsing: anIdGenerator 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeGeneratingTransactionIdsUsing: anIdGenerator ! !
!SalesBook class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 01:59:46' prior: 50652257!
generatingTransactionIdsUsing: anIdGenerator 

	^self new initializeGeneratingTransactionIdsUsing: anIdGenerator ! !

!classDefinition: #SalesBook category: 'TusLibros' stamp: 'IB 11/9/2023 01:59:57'!
Object subclass: #SalesBook
	instanceVariableNames: 'idGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SalesBook methodsFor: 'initialization' stamp: 'IB 11/9/2023 01:59:57'!
initializeGeneratingTransactionIdsUsing: anIdGenerator 
	self shouldBeImplemented.
	idGenerator := anIdGenerator.! !
!SalesBook methodsFor: 'initialization' stamp: 'IB 11/9/2023 02:00:04' prior: 50652280!
initializeGeneratingTransactionIdsUsing: anIdGenerator

	idGenerator := anIdGenerator! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 02:00:06'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 02:00:08'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:00:09'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 02:00:16'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 02:00:16'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:00:16'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 02:00:16'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 02:00:16'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 02:00:16'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 02:00:16'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:00:16'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:00:16'!
FAILURE!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:00:16'!
FAILURE!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:01:26' prior: 50652224!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | |cashier|
		cashier := Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: salesBook.
		cashier checkOut]! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 02:01:32'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 02:01:32'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:01:32'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 02:01:32'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 02:01:32'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 02:01:32'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 02:01:32'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:01:32'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:01:32'!
ERROR!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:01:32'!
ERROR!
!SalesBook methodsFor: 'registering' stamp: 'IB 11/9/2023 02:01:49'!
add: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #SalesBook category: 'TusLibros' stamp: 'IB 11/9/2023 02:02:25'!
Object subclass: #SalesBook
	instanceVariableNames: 'idGenerator sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!SalesBook methodsFor: 'registering' stamp: 'IB 11/9/2023 02:02:23' prior: 50652373!
add: aSale 
	
	sales at: idGenerator nextId put: aSale! !

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:02:27'!
ERROR!
!SalesBook methodsFor: 'initialization' stamp: 'IB 11/9/2023 02:02:40' prior: 50652287!
initializeGeneratingTransactionIdsUsing: anIdGenerator

	idGenerator := anIdGenerator.
	sales := Dictionary new! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 02:02:52'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 02:02:52'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:02:52'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 02:02:52'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 02:02:52'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 02:02:52'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 02:02:52'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:02:52'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:02:52'!
FAILURE!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:02:52'!
FAILURE!

----SNAPSHOT----(9 November 2023 02:03:04) CuisUniversity-5981.image priorSource: 10246387!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:03:49' prior: 50652332!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | |cashier|
		cashier := Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: salesBook.
		cashier checkOut.
		^idGenerator lastAssignedId]! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 02:03:55'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 02:03:55'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:03:55'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 02:03:55'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 02:03:55'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 02:03:55'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 02:03:55'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:03:55'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:03:55'!
PASSED!

----SNAPSHOT----(9 November 2023 02:04:00) CuisUniversity-5981.image priorSource: 10264921!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:04:10' prior: 50651494!
add: aQuantity of: anItem toCart: aCartId

	self withCartIdentifiedBy: aCartId do: [:cart | cart add: aQuantity of: anItem]
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:04:31'!
add: aQuantity of: anItem toCartIdentifiedBy: aCartId

	self withCartIdentifiedBy: aCartId do: [:cart | cart add: aQuantity of: anItem]
		
	
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:04:31' prior: 50651502!
test05CanNotAddItemToInvalidCartId
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory itemNotSellByTheStore toCartIdentifiedBy: 200]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:04:31' prior: 50651967!
test10CanCheckout

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:04:31' prior: 50651948!
test06CanNotAddInvalidItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory  itemNotSellByTheStore toCartIdentifiedBy: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: idGenerator lastAssignedId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:04:31' prior: 50651529!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 1 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 1 of: storeTestObjectsFactory  anotherItemSellByTheStore toCartIdentifiedBy: cartId.
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:3; at: storeTestObjectsFactory anotherItemSellByTheStore put: 1;yourself).
	! !

!methodRemoval: StoreSystem #add:of:toCart: stamp: 'IB 11/9/2023 02:04:31'!
add: aQuantity of: anItem toCart: aCartId

	self withCartIdentifiedBy: aCartId do: [:cart | cart add: aQuantity of: anItem]
		
	
	
	!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:04:51'!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | |cashier|
		cashier := Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: salesBook.
		cashier checkOut.
		^idGenerator lastAssignedId]! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:04:51' prior: 50652503!
test10CanCheckout

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	
	transactionId := storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:04:51' prior: 50650684!
test09CanNotCheckoutUnregisteredCart
	
	self 
		should: [storeSystem checkoutCartIdentifiedBy: 200 payingWith: storeTestObjectsFactory notExpiredCreditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	
	

	
	! !

!methodRemoval: StoreSystem #checkoutCart:payingWith: stamp: 'IB 11/9/2023 02:04:51'!
checkoutCart: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | |cashier|
		cashier := Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: salesBook.
		cashier checkOut.
		^idGenerator lastAssignedId]!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:05:11'!
createCartForUserIdentifiedBy: anUserId withPassword: aPassword

	| cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword: aPassword.
	
	cartId := idGenerator nextId.
	cartsByID at: cartId put: (Cart acceptingItemsOf: catalog).
	
	^cartId.
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:05:11' prior: 50651235!
test02CreateCartWithWrongPassword
	
	authenticationProcedure:= [self error: 'Wrong password'].
	
	self 
		should: [storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:05:11' prior: 50651921!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: idGenerator lastAssignedId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:05:11' prior: 50650611!
test03CreateOneCart
	
	| cartId cartItems |
	authenticationProcedure:= [].
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.
	^cartId! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:05:11' prior: 50651209!
test01CreateCartWithUnregisteredUser
	
	authenticationProcedure := [self error: 'Invalid username'].
	
	self 
		should: [storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !

!methodRemoval: StoreSystem #createCartForUserID:withPassword: stamp: 'IB 11/9/2023 02:05:11'!
createCartForUserID: anUserId withPassword: aPassword

	| cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword: aPassword.
	
	cartId := idGenerator nextId.
	cartsByID at: cartId put: (Cart acceptingItemsOf: catalog).
	
	^cartId.
	!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:05:20' prior: 50651424!
listCart: cartId

	| cartItems |
	cartItems:= Dictionary new.
	cartsByID at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent:[:quantity | cartItems at: item put: (quantity + 1)]]].
	^cartItems
		! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:05:38'!
listItemsOfCartIdentifiedBy: cartId

	| cartItems |
	cartItems:= Dictionary new.
	cartsByID at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent:[:quantity | cartItems at: item put: (quantity + 1)]]].
	^cartItems
		! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:05:38' prior: 50652518!
test06CanNotAddInvalidItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory  itemNotSellByTheStore toCartIdentifiedBy: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
			self assert: cartId equals: idGenerator lastAssignedId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:05:38' prior: 50652645!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self assert: cartId equals: idGenerator lastAssignedId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:05:38' prior: 50652537!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 1 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 1 of: storeTestObjectsFactory  anotherItemSellByTheStore toCartIdentifiedBy: cartId.
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:3; at: storeTestObjectsFactory anotherItemSellByTheStore put: 1;yourself).
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:05:38' prior: 50652658!
test03CreateOneCart
	
	| cartId cartItems |
	authenticationProcedure:= [].
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	
	self assert: cartItems isEmpty.
	^cartId! !

!methodRemoval: StoreSystem #listCart: stamp: 'IB 11/9/2023 02:05:39'!
listCart: cartId

	| cartItems |
	cartItems:= Dictionary new.
	cartsByID at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent:[:quantity | cartItems at: item put: (quantity + 1)]]].
	^cartItems
		!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:05:53' prior: 50652704!
listItemsOfCartIdentifiedBy: cartId

	| cartItems |
	
	cartItems := Dictionary new.
	cartsByID at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent:[:quantity | cartItems at: item put: (quantity + 1)]]].
	
	^cartItems
		! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:06:05' prior: 50652796!
listItemsOfCartIdentifiedBy: cartId

	| cartItems |
	
	cartItems := Dictionary new.
	cartsByID at: cartId ifPresent: [:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent:[:quantity | cartItems at: item put: (quantity + 1)]]].
	
	^cartItems
		! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 02:06:13'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 02:06:13'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:06:13'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 02:06:13'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 02:06:13'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 02:06:13'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 02:06:13'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:06:13'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:06:13'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:07:48' prior: 50652751!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 2 of: storeTestObjectsFactory  anotherItemSellByTheStore toCartIdentifiedBy: cartId.
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self 
		assert: cartItems 
		equals:
			(Dictionary new 
				at: storeTestObjectsFactory itemSellByTheStore put: 2; 
				at: storeTestObjectsFactory anotherItemSellByTheStore put: 2;
				yourself).
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:08:48'!
test11CantListItemsOfUnregisteredCart
	
	self 
		should: [storeSystem listItemsOfCartIdentifiedBy: 123] 
		raise: Error - MessageNotUnderstood 
		withMessageText: ''! !

!testRun: #StoreSystemTest #test11CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:08:50'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:09:15' prior: 50652868!
test11CantListItemsOfUnregisteredCart
	
	self 
		should: [storeSystem listItemsOfCartIdentifiedBy: 123] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'invalid cartId'! !

!testRun: #StoreSystemTest #test11CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:09:17'!
FAILURE!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:10:02' prior: 50652808!
listItemsOfCartIdentifiedBy: aCartId

	| cartItems |
	
	cartItems := Dictionary new.
	self 
		withCartIdentifiedBy: aCartId 
		do: [:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent: [:quantity | cartItems at: item put: (quantity + 1)]]].
	
	^cartItems
		! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 02:10:07'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 02:10:07'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:10:07'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 02:10:07'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 02:10:07'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 02:10:07'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 02:10:07'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:10:07'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:10:07'!
PASSED!

!testRun: #StoreSystemTest #test11CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:10:07'!
PASSED!

----SNAPSHOT----(9 November 2023 02:10:12) CuisUniversity-5981.image priorSource: 10266303!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:14:36'!
test12CantListPurchasesOfUnregisteredUser

	self 
		should: [storeSystem listPurchasesOfUserIdentifiedBy: 123 withPassword: 'pass']
		raise: Error - MessageNotUnderstood
		withMessageText: ''
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:15:01' prior: 50652938!
test12CantListPurchasesOfUnregisteredUser

	self 
		should: [storeSystem listPurchasesOfUserIdentifiedBy: 123 withPassword: 'pass']
		raise: Error - MessageNotUnderstood
		withMessageText: 'Invalid username'
	
	

	
	! !

!testRun: #StoreSystemTest #test12CantListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:15:03'!
ERROR!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:15:09'!
listPurchasesOfUserIdentifiedBy: aRenameMe1 withPassword: aRenameMe2 
	self shouldBeImplemented.! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:15:30' prior: 50652961!
listPurchasesOfUserIdentifiedBy: aUserID withPassword: aPassword
 
	self error: 'Invalid username'! !

!testRun: #StoreSystemTest #test12CantListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test11CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:15:33'!
PASSED!

!testRun: #StoreSystemTest #test12CantListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:15:33'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:15:48'!
test12CanNotListPurchasesOfUnregisteredUser

	self 
		should: [storeSystem listPurchasesOfUserIdentifiedBy: 123 withPassword: 'pass']
		raise: Error - MessageNotUnderstood
		withMessageText: 'Invalid username'
	
	

	
	! !

!methodRemoval: StoreSystemTest #test12CantListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:15:48'!
test12CantListPurchasesOfUnregisteredUser

	self 
		should: [storeSystem listPurchasesOfUserIdentifiedBy: 123 withPassword: 'pass']
		raise: Error - MessageNotUnderstood
		withMessageText: 'Invalid username'
	
	

	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:16:15'!
test02CreateCartWhenUserProvidesWrongPassword
	
	authenticationProcedure:= [self error: 'Wrong password'].
	
	self 
		should: [storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !

!methodRemoval: StoreSystemTest #test02CreateCartWithWrongPassword stamp: 'IB 11/9/2023 02:16:15'!
test02CreateCartWithWrongPassword
	
	authenticationProcedure:= [self error: 'Wrong password'].
	
	self 
		should: [storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:16:25'!
test01CreateCartForUnregisteredUser
	
	authenticationProcedure := [self error: 'Invalid username'].
	
	self 
		should: [storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !

!methodRemoval: StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 'IB 11/9/2023 02:16:25'!
test01CreateCartWithUnregisteredUser
	
	authenticationProcedure := [self error: 'Invalid username'].
	
	self 
		should: [storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:16:33'!
test04CreateMoreThanOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self assert: cartId equals: idGenerator lastAssignedId.
	self assert: cartItems isEmpty.! !

!methodRemoval: StoreSystemTest #test04CreateMoreOneCart stamp: 'IB 11/9/2023 02:16:34'!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self assert: cartId equals: idGenerator lastAssignedId.
	self assert: cartItems isEmpty.!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:16:46'!
test05CanNotAddItemToUnregisteredCart
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory itemNotSellByTheStore toCartIdentifiedBy: 200]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	! !

!methodRemoval: StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 'IB 11/9/2023 02:16:46'!
test05CanNotAddItemToInvalidCartId
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory itemNotSellByTheStore toCartIdentifiedBy: 200]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:16:56'!
test06CanNotAddInvalidItemsToCart
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory  itemNotSellByTheStore toCartIdentifiedBy: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
			self assert: cartId equals: idGenerator lastAssignedId.
			self assert: cartItems isEmpty.].
	
	! !

!methodRemoval: StoreSystemTest #test06CanNotAddInvalidItems stamp: 'IB 11/9/2023 02:16:57'!
test06CanNotAddInvalidItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory  itemNotSellByTheStore toCartIdentifiedBy: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
			self assert: cartId equals: idGenerator lastAssignedId.
			self assert: cartItems isEmpty.].
	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:17:08'!
test08CanListAddedItemsAddedToCart
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 2 of: storeTestObjectsFactory  anotherItemSellByTheStore toCartIdentifiedBy: cartId.
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self 
		assert: cartItems 
		equals:
			(Dictionary new 
				at: storeTestObjectsFactory itemSellByTheStore put: 2; 
				at: storeTestObjectsFactory anotherItemSellByTheStore put: 2;
				yourself).
	! !

!methodRemoval: StoreSystemTest #test08CanListAddedItems stamp: 'IB 11/9/2023 02:17:08'!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 2 of: storeTestObjectsFactory  anotherItemSellByTheStore toCartIdentifiedBy: cartId.
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self 
		assert: cartItems 
		equals:
			(Dictionary new 
				at: storeTestObjectsFactory itemSellByTheStore put: 2; 
				at: storeTestObjectsFactory anotherItemSellByTheStore put: 2;
				yourself).
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:17:18'!
test10CanCheckoutCart

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	
	transactionId := storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId
	
	
	
	

	
	! !

!methodRemoval: StoreSystemTest #test10CanCheckout stamp: 'IB 11/9/2023 02:17:18'!
test10CanCheckout

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	
	transactionId := storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId
	
	
	
	

	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:17:28'!
test10CheckoutCart

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	
	transactionId := storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId
	
	
	
	

	
	! !

!methodRemoval: StoreSystemTest #test10CanCheckoutCart stamp: 'IB 11/9/2023 02:17:28'!
test10CanCheckoutCart

	| cartId transactionId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	
	transactionId := storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId
	
	
	
	

	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:17:56'!
test08CanListItemsAddedToCart
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 2 of: storeTestObjectsFactory  anotherItemSellByTheStore toCartIdentifiedBy: cartId.
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self 
		assert: cartItems 
		equals:
			(Dictionary new 
				at: storeTestObjectsFactory itemSellByTheStore put: 2; 
				at: storeTestObjectsFactory anotherItemSellByTheStore put: 2;
				yourself).
	! !

!methodRemoval: StoreSystemTest #test08CanListAddedItemsAddedToCart stamp: 'IB 11/9/2023 02:17:56'!
test08CanListAddedItemsAddedToCart
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 2 of: storeTestObjectsFactory  anotherItemSellByTheStore toCartIdentifiedBy: cartId.
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self 
		assert: cartItems 
		equals:
			(Dictionary new 
				at: storeTestObjectsFactory itemSellByTheStore put: 2; 
				at: storeTestObjectsFactory anotherItemSellByTheStore put: 2;
				yourself).
	!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:18:13'!
test08CantListItemsOfUnregisteredCart
	
	self 
		should: [storeSystem listItemsOfCartIdentifiedBy: 123] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'invalid cartId'! !

!methodRemoval: StoreSystemTest #test11CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:18:13'!
test11CantListItemsOfUnregisteredCart
	
	self 
		should: [storeSystem listItemsOfCartIdentifiedBy: 123] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'invalid cartId'!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:18:46'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 02:18:57'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:18:57'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:18:57'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 02:18:57'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 02:18:57'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 02:18:57'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 02:18:57'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:18:57'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:18:57'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 02:18:57'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:18:57'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:19:26'!
test13CanNotListPurchasesWhenUserProvidesWrongPassword

	self 
		should: [storeSystem listPurchasesOfUserIdentifiedBy: 123 withPassword: 'pass']
		raise: Error - MessageNotUnderstood
		withMessageText: 'Invalid username'
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:19:37' prior: 50653031!
test02CreateCartWhenUserProvidesWrongPassword
	
	authenticationProcedure := [self error: 'Wrong password'].
	
	self 
		should: [storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:19:55' prior: 50653399!
test13CanNotListPurchasesWhenUserProvidesWrongPassword

	authenticationProcedure:= [self error: 'Wrong password'].
	self 
		should: [storeSystem listPurchasesOfUserIdentifiedBy: 123 withPassword: 'pass']
		raise: Error - MessageNotUnderstood
		withMessageText: 'Wrong password'
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:19:59' prior: 50653422!
test13CanNotListPurchasesWhenUserProvidesWrongPassword

	authenticationProcedure := [self error: 'Wrong password'].
	
	self 
		should: [storeSystem listPurchasesOfUserIdentifiedBy: 123 withPassword: 'pass']
		raise: Error - MessageNotUnderstood
		withMessageText: 'Wrong password'
	
	

	
	! !

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:20:03'!
FAILURE!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:20:42'!
authenticateUserIdentifiedBy: aPassword withPassword: anUserId

	^ authenticationSystem authenticateUser: anUserId withPassword: aPassword! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:20:42' prior: 50652619!
createCartForUserIdentifiedBy: anUserId withPassword: aPassword

	| cartId |
	
	self authenticateUserIdentifiedBy: aPassword withPassword: anUserId.
	
	cartId := idGenerator nextId.
	cartsByID at: cartId put: (Cart acceptingItemsOf: catalog).
	
	^cartId.
	! !
!StoreSystem methodsFor: 'support' stamp: 'IB 11/9/2023 02:21:02' prior: 50653450!
authenticateUserIdentifiedBy: anUserId withPassword: aPassword

	^ authenticationSystem authenticateUser: anUserId withPassword: aPassword! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:21:23' prior: 50652967!
listPurchasesOfUserIdentifiedBy: anUserId withPassword: aPassword
 
	self authenticateUserIdentifiedBy: anUserId withPassword:aPassword! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:21:25' prior: 50653477!
listPurchasesOfUserIdentifiedBy: anUserId withPassword: aPassword
 
	self authenticateUserIdentifiedBy: anUserId withPassword: aPassword! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:21:29'!
FAILURE!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:21:29'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:21:29'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:21:53' prior: 50653057!
test01CreateCartForUnregisteredUser
	
	authenticationProcedure := [self error: 'Invalid username'].
	
	self 
		should: [storeSystem createCartForUserIdentifiedBy: 'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:21:56' prior: 50653534!
test01CreateCartForUnregisteredUser
	
	authenticationProcedure := [self error: 'Invalid username'].
	
	self 
		should: [storeSystem createCartForUserIdentifiedBy: 'Pedro' withPassword:'pass']
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:22:07' prior: 50653011!
test12CanNotListPurchasesOfUnregisteredUser
	
	authenticationProcedure := [self error: 'Invalid username'].

	self 
		should: [storeSystem listPurchasesOfUserIdentifiedBy: 123 withPassword: 'pass']
		raise: Error - MessageNotUnderstood
		withMessageText: 'Invalid username'
	
	

	
	! !

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:22:09'!
PASSED!

----SNAPSHOT----(9 November 2023 02:22:15) CuisUniversity-5981.image priorSource: 10281105!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:28:54'!
test14ListPurchasesWhenNoneRegisteredForThatUser

	|purchases|

	purchases := storeSystem listPurchasesOfUserIdentifiedBy: 123 withPassword: 'pass'.
	
	self assert: purchases isEmpty
	

	
	! !

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 02:28:55'!
ERROR!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:29:11' prior: 50653484!
listPurchasesOfUserIdentifiedBy: anUserId withPassword: aPassword
 
	self authenticateUserIdentifiedBy: anUserId withPassword: aPassword.
	^{}! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:29:14'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 02:29:14'!
PASSED!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:29:33'!
purchasesOfUserIdentifiedBy: anUserId withPassword: aPassword
 
	self authenticateUserIdentifiedBy: anUserId withPassword: aPassword.
	^{}! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:29:33' prior: 50653560!
test12CanNotListPurchasesOfUnregisteredUser
	
	authenticationProcedure := [self error: 'Invalid username'].

	self 
		should: [storeSystem purchasesOfUserIdentifiedBy: 123 withPassword: 'pass']
		raise: Error - MessageNotUnderstood
		withMessageText: 'Invalid username'
	
	

	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:29:33' prior: 50653617!
test14ListPurchasesWhenNoneRegisteredForThatUser

	|purchases|

	purchases := storeSystem purchasesOfUserIdentifiedBy: 123 withPassword: 'pass'.
	
	self assert: purchases isEmpty
	

	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:29:33' prior: 50653434!
test13CanNotListPurchasesWhenUserProvidesWrongPassword

	authenticationProcedure := [self error: 'Wrong password'].
	
	self 
		should: [storeSystem purchasesOfUserIdentifiedBy: 123 withPassword: 'pass']
		raise: Error - MessageNotUnderstood
		withMessageText: 'Wrong password'
	
	

	
	! !

!methodRemoval: StoreSystem #listPurchasesOfUserIdentifiedBy:withPassword: stamp: 'IB 11/9/2023 02:29:33'!
listPurchasesOfUserIdentifiedBy: anUserId withPassword: aPassword
 
	self authenticateUserIdentifiedBy: anUserId withPassword: aPassword.
	^{}!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:33:03'!
test10CanNotCheckoutCartAllreadyCheckoutCart

	| cartId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self
		should: [storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard]
		raise: Error - MessageNotUnderstood
		withMessageText: 'Invalid cartId'
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:33:23' prior: 50653729!
test10CanNotCheckoutCartAllreadyCheckoutCart

	| cartId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self
		should: [storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard]
		raise: Error - MessageNotUnderstood
		withMessageText: 'invalid cartId'
	
	
	
	
	

	
	! !

!testRun: #StoreSystemTest #test10CanNotCheckoutCartAllreadyCheckoutCart stamp: 'IB 11/9/2023 02:33:24'!
FAILURE!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:35:02' prior: 50652565!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | |cashier|
		cashier := Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: salesBook.
		cashier checkOut.
		cartsByID removeKey: aCartId.
		^idGenerator lastAssignedId]! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutCartAllreadyCheckoutCart stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 02:35:14'!
PASSED!

----SNAPSHOT----(9 November 2023 02:35:18) CuisUniversity-5981.image priorSource: 10302835!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:35:37'!
test10CanNotCheckoutAllreadyCheckoutCart

	| cartId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self
		should: [storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard]
		raise: Error - MessageNotUnderstood
		withMessageText: 'invalid cartId'
	
	
	
	
	

	
	! !

!methodRemoval: StoreSystemTest #test10CanNotCheckoutCartAllreadyCheckoutCart stamp: 'IB 11/9/2023 02:35:37'!
test10CanNotCheckoutCartAllreadyCheckoutCart

	| cartId |
	
	cartId := self test03CreateOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self
		should: [storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard]
		raise: Error - MessageNotUnderstood
		withMessageText: 'invalid cartId'
	
	
	
	
	

	
	!

----SNAPSHOT----(9 November 2023 02:36:33) CuisUniversity-5981.image priorSource: 10309770!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:37:50'!
test15ListPurchasesWhenOnlyOneRegisteredForThatUser



	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:38:05'!
test03CreateOnlyOneCart
	
	| cartId cartItems |
	authenticationProcedure:= [].
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	
	self assert: cartItems isEmpty.
	^cartId! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:38:05' prior: 50653238!
test10CheckoutCart

	| cartId transactionId |
	
	cartId := self test03CreateOnlyOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	
	transactionId := storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:38:05' prior: 50653834!
test10CanNotCheckoutAllreadyCheckoutCart

	| cartId |
	
	cartId := self test03CreateOnlyOneCart.
	storeSystem add: 1 of: storeTestObjectsFactory itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self
		should: [storeSystem checkoutCartIdentifiedBy: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard]
		raise: Error - MessageNotUnderstood
		withMessageText: 'invalid cartId'
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:38:05' prior: 50653083!
test04CreateMoreThanOneCart
	
	|  cartId cartItems |
	
	self test03CreateOnlyOneCart.
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self assert: cartId equals: idGenerator lastAssignedId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:38:05' prior: 50653131!
test06CanNotAddInvalidItemsToCart
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOnlyOneCart.
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory  itemNotSellByTheStore toCartIdentifiedBy: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
			self assert: cartId equals: idGenerator lastAssignedId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 02:38:05' prior: 50653267!
test08CanListItemsAddedToCart
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOnlyOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 2 of: storeTestObjectsFactory  anotherItemSellByTheStore toCartIdentifiedBy: cartId.
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	self 
		assert: cartItems 
		equals:
			(Dictionary new 
				at: storeTestObjectsFactory itemSellByTheStore put: 2; 
				at: storeTestObjectsFactory anotherItemSellByTheStore put: 2;
				yourself).
	! !

!methodRemoval: StoreSystemTest #test03CreateOneCart stamp: 'IB 11/9/2023 02:38:05'!
test03CreateOneCart
	
	| cartId cartItems |
	authenticationProcedure:= [].
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listItemsOfCartIdentifiedBy: cartId.
	
	self assert: cartItems isEmpty.
	^cartId!

0->1!

0->1!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:43:16' prior: 50653875!
test15ListPurchasesWhenOnlyOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 1;
		assert: purchases associations first key equals: 100;
		assert: purchases associations first value equals: Dictionary new
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:44:42' prior: 50653994!
test15ListPurchasesWhenOnlyOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 1;
		assert: purchases associations first value equals: 100;
		assert: purchases associations first key 
			equals: (Dictionary new at: storeTestObjectsFactory itemSellByTheStore put: 2; yourself)
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:44:52' prior: 50654008!
test15ListPurchasesWhenOnlyOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 1;
		assert: purchases associations first key 
			equals: (Dictionary new at: storeTestObjectsFactory itemSellByTheStore put: 2; yourself);
		assert: purchases associations first value equals: 100
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 02:45:55' prior: 50654024!
test15ListPurchasesWhenOnlyOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 1;
		assert: purchases first total equals: 100;
		assert: purchases first items 
			equals: (Dictionary new at: storeTestObjectsFactory itemSellByTheStore put: 2; yourself)
	! !

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 02:45:59'!
FAILURE!

----SNAPSHOT----(9 November 2023 02:46:05) CuisUniversity-5981.image priorSource: 10311076!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:46:46' prior: 50653680!
purchasesOfUserIdentifiedBy: anUserId withPassword: aPassword
 
	self authenticateUserIdentifiedBy: anUserId withPassword: aPassword.
	^salesBook halt! !

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 02:47:01'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 02:47:01'!
PASSED!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:48:30' prior: 50654062!
purchasesOfUserIdentifiedBy: anUserId withPassword: aPassword
 
	self authenticateUserIdentifiedBy: anUserId withPassword: aPassword.
	^salesBook salesRegisteresForUserIdentifiedBy: anUserId! !

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 02:48:33'!
ERROR!
!SalesBook methodsFor: 'accessing' stamp: 'IB 11/9/2023 02:48:45'!
salesRegisteresForUserIdentifiedBy: anUserId 
	self shouldBeImplemented.! !

sales!
!SalesBook methodsFor: 'accessing' stamp: 'IB 11/9/2023 02:49:15' prior: 50654089!
salesRegisteresForUserIdentifiedBy: anUserId 
	
	^sales! !

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 02:49:17'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 02:49:19'!
ERROR!

!methodRemoval: SalesBook #salesRegisteresForUserIdentifiedBy: stamp: 'IB 11/9/2023 02:51:24'!
salesRegisteresForUserIdentifiedBy: anUserId 
	
	^sales!

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'IB 11/9/2023 02:53:24'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem idGenerator catalog cartsByID merchantProcessor salesBook transactionsByUser'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 02:53:21' prior: 50654077!
purchasesOfUserIdentifiedBy: anUserId withPassword: aPassword
 
	|transactionIds|
	self authenticateUserIdentifiedBy: anUserId withPassword: aPassword.
	transactionIds := transactionsByUser at: anUserId.
	^transactionIds collect: [:transactionId | salesBook saleIdentifiedBy: transactionId ]! !

----SNAPSHOT----(9 November 2023 02:53:30) CuisUniversity-5981.image priorSource: 10317065!
!StoreSystem methodsFor: 'initialization' stamp: 'IB 11/9/2023 02:53:53' prior: 50652241!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	authenticationSystem := anAuthenticationSystem.
	idGenerator:= anIdGenerator.
	cartsByID := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	salesBook := SalesBook generatingTransactionIdsUsing: idGenerator.
	transactionsByUser := Dictionary new! !
!StoreSystem methodsFor: 'initialization' stamp: 'IB 11/9/2023 02:53:59' prior: 50654137!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	authenticationSystem := anAuthenticationSystem.
	idGenerator := anIdGenerator.
	cartsByID := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	salesBook := SalesBook generatingTransactionIdsUsing: idGenerator.
	transactionsByUser := Dictionary new! !
!StoreSystem methodsFor: 'initialization' stamp: 'IB 11/9/2023 02:54:14' prior: 50654154!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	authenticationSystem := anAuthenticationSystem.
	idGenerator := anIdGenerator.
	cartsByID := Dictionary new.
	transactionsByUser := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	salesBook := SalesBook generatingTransactionIdsUsing: idGenerator! !
!Cart class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 03:03:28'!
ownedByUserIdentifiedBy: anUserId acceptingItemsOf: aCatalog

	^self new initializeOwnedByUserIdentifiedBy: anUserId acceptingItemsOf: aCatalog ! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'IB 11/9/2023 03:04:00'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'initialization' stamp: 'IB 11/9/2023 03:03:58'!
initializeOwnedByUserIdentifiedBy: anUserId acceptingItemsOf: aCatalog

	owner := anUserId.
	catalog := aCatalog.
	items := OrderedCollection new.! !

!methodRemoval: Cart #initializeAcceptingItemsOf: stamp: 'IB 11/9/2023 03:04:17'!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := OrderedCollection new.!
!Cart class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 03:04:40' prior: 50650795!
acceptingItemsOf: aCatalog

	^self new ownedByUserIdentifiedBy: 0 acceptingItemsOf: aCatalog
! !
!Cart methodsFor: 'assertions' stamp: 'IB 11/9/2023 03:05:04'!
ownerId

	^owner! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:05:46' prior: 50653458!
createCartForUserIdentifiedBy: anUserId withPassword: aPassword

	| cartId |
	
	self authenticateUserIdentifiedBy: aPassword withPassword: anUserId.
	
	cartId := idGenerator nextId.
	cartsByID at: cartId put: (Cart ownedByUserIdentifiedBy: anUserId acceptingItemsOf: catalog).
	
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:07:42' prior: 50653771!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	| transactionId |
	self withCartIdentifiedBy: aCartId do: [:cart | |cashier|
		cashier := Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: salesBook.
		cashier checkOut.
		cartsByID removeKey: aCartId.
		transactionsByUser at: cart ownerId ifAbsentPut: [Set new].
		(transactionsByUser at: cart ownerId) add: transactionId.
		^idGenerator lastAssignedId]! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:08:01' prior: 50654237!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | |cashier transactionId |
		cashier := Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: salesBook.
		cashier checkOut.
		cartsByID removeKey: aCartId.
		transactionsByUser at: cart ownerId ifAbsentPut: [Set new].
		(transactionsByUser at: cart ownerId) add: transactionId.
		^idGenerator lastAssignedId]! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:08:25' prior: 50654255!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | |cashier transactionId |
		cashier := Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: salesBook.
		cashier checkOut.
		transactionId := idGenerator lastAssignedId.
		cartsByID removeKey: aCartId.
		transactionsByUser at: cart ownerId ifAbsentPut: [Set new].
		(transactionsByUser at: cart ownerId) add: transactionId.
		^transactionId]! !

----SNAPSHOT----(9 November 2023 03:08:59) CuisUniversity-5981.image priorSource: 10319462!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:09:01'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:09:01'!
ERROR!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:09:01'!
ERROR!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:09:03'!
ERROR!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:09:37' prior: 50654122!
purchasesOfUserIdentifiedBy: anUserId withPassword: aPassword
 
	|transactionIds|
	self authenticateUserIdentifiedBy: anUserId withPassword: aPassword.
	transactionIds := transactionsByUser at: anUserId ifAbsent: [{}].
	^transactionIds collect: [:transactionId | salesBook saleIdentifiedBy: transactionId ]! !

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:09:41'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:09:44'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:09:44'!
ERROR!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:09:44'!
ERROR!
!SalesBook methodsFor: 'accessing' stamp: 'IB 11/9/2023 03:10:00'!
saleIdentifiedBy: transactionId 
	self shouldBeImplemented.! !

sales at: transactionId!
!SalesBook methodsFor: 'accessing' stamp: 'IB 11/9/2023 03:10:31' prior: 50654419!
saleIdentifiedBy: aTransactionId 
	
	^sales at: aTransactionId! !

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:10:33'!
ERROR!

purchases any!

purchases asOrderedCollection !

purchases array!

purchases array first !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:12:37' prior: 50654040!
test15ListPurchasesWhenOnlyOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 1;
		assert: purchases asOrderedCollection first total equals: 100;
		assert: purchases asOrderedCollection first items 
			equals: (Dictionary new at: storeTestObjectsFactory itemSellByTheStore put: 2; yourself)
	! !

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:12:48'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:12:52'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:12:53'!
FAILURE!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:12:53'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:13:00' prior: 50654437!
test15ListPurchasesWhenOnlyOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 1;
		assert: purchases asOrderedCollection first total equals: 10;
		assert: purchases asOrderedCollection first items 
			equals: (Dictionary new at: storeTestObjectsFactory itemSellByTheStore put: 2; yourself)
	! !

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:13:02'!
FAILURE!

purchases!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:13:22'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:13:22'!
ERROR!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:13:22'!
ERROR!

----SNAPSHOT----(9 November 2023 03:13:33) CuisUniversity-5981.image priorSource: 10324520!
!Cart methodsFor: 'accessing' stamp: 'IB 11/9/2023 03:16:53' prior: 50650737!
withItemsDo: aOneArgBlock

	items do: aOneArgBlock! !

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:20:07'!
ERROR!
!Cashier methodsFor: 'checkout - private' stamp: 'IB 11/9/2023 03:21:48' prior: 50650827!
createSale

	^ Sale of: cart items for: total
! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:21:57'!
ERROR!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:21:57'!
ERROR!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:21:57'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:21:57'!
ERROR!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:21:59'!
ERROR!
!Cart methodsFor: 'accessing' stamp: 'IB 11/9/2023 03:22:05'!
items
	self shouldBeImplemented.
	^items! !
!Cart methodsFor: 'accessing' stamp: 'IB 11/9/2023 03:22:10' prior: 50654655!
items
	
	^items copy! !

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:22:11'!
ERROR!
!Sale class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 03:22:18'!
of: aRenameMe1 for: aTotal 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aRenameMe1 for: aTotal ! !
!Sale class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 03:22:46' prior: 50654666!
of: itemsRelatedToTheSale for: aTotal

	^self new initializeOf: itemsRelatedToTheSale for: aTotal ! !

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:22:48'!
ERROR!

!classDefinition: #Sale category: 'TusLibros' stamp: 'IB 11/9/2023 03:22:52'!
Object subclass: #Sale
	instanceVariableNames: 'total itemsRelatedToTheSale_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'initialization' stamp: 'IB 11/9/2023 03:22:52'!
initializeOf: itemsRelatedToTheSale for: aTotal 
	self shouldBeImplemented.
	itemsRelatedToTheSale_CHANGE_ME := itemsRelatedToTheSale.
	total := aTotal.! !

!classDefinition: #Sale category: 'TusLibros' stamp: 'IB 11/9/2023 03:23:09'!
Object subclass: #Sale
	instanceVariableNames: 'total relatedItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Sale methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 03:23:09' prior: 50654692!
initializeOf: itemsRelatedToTheSale for: aTotal 
	self shouldBeImplemented.
	relatedItems := itemsRelatedToTheSale.
	total := aTotal.! !
!Sale methodsFor: 'initialization' stamp: 'IB 11/9/2023 03:23:17' prior: 50654707!
initializeOf: itemsRelatedToTheSale for: aTotal 

	relatedItems := itemsRelatedToTheSale.
	total := aTotal! !

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:23:19'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:23:20'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:23:21'!
ERROR!
!Sale methodsFor: 'accessing' stamp: 'IB 11/9/2023 03:23:32'!
items
	self shouldBeImplemented.! !
!Sale methodsFor: 'accessing' stamp: 'IB 11/9/2023 03:23:44' prior: 50654730!
items
	
	^relatedItems copy! !

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:23:45'!
FAILURE!

purchases asOrderedCollection first items!

----SNAPSHOT----(9 November 2023 03:24:14) CuisUniversity-5981.image priorSource: 10333913!
!Cashier methodsFor: 'checkout - private' stamp: 'IB 11/9/2023 03:24:36' prior: 50654598!
createSale

	self halt.
	^ Sale of: cart items for: total
! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:24:44'!
PASSED!

cart items!

cart!
!Cashier methodsFor: 'checkout - private' stamp: 'IB 11/9/2023 03:25:18' prior: 50654746!
createSale

	^ Sale of: cart items for: total
! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:26:04' prior: 50654511!
test15ListPurchasesWhenOnlyOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 1;
		assert: purchases asOrderedCollection first total equals: 10;
		assert: purchases asOrderedCollection first items 
			equals: {storeTestObjectsFactory itemSellByTheStore. storeTestObjectsFactory itemSellByTheStore }
	! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:26:12'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:26:12'!
FAILURE!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:26:12'!
FAILURE!

purchases asOrderedCollection first items !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:26:45' prior: 50654797!
test15ListPurchasesWhenOnlyOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 1;
		assert: purchases asOrderedCollection first total equals: 10;
		assert: purchases asOrderedCollection first items 
			equals: {storeTestObjectsFactory itemSellByTheStore}
	! !

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:26:47'!
FAILURE!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:26:51'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:26:51'!
FAILURE!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:26:51'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:27:57' prior: 50654870!
test15ListPurchasesWhenOnlyOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 1;
		assert: purchases asOrderedCollection first total equals: 10;
		assert: purchases asOrderedCollection first items size equals: 1;
		assert: purchases asOrderedCollection first items includes: storeTestObjectsFactory itemSellByTheStore! !

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:27:58'!
FAILURE!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:28:02'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:28:02'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:28:02'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:28:02'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:28:02'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:28:02'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:28:02'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:28:02'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:28:03'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:28:03'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:28:03'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:28:03'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:28:03'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:28:03'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:28:03'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:28:03'!
PASSED!

----SNAPSHOT----(9 November 2023 03:28:07) CuisUniversity-5981.image priorSource: 10338948!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:28:44'!
itemsOfCartIdentifiedBy: aCartId

	| cartItems |
	
	cartItems := Dictionary new.
	self 
		withCartIdentifiedBy: aCartId 
		do: [:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent: [:quantity | cartItems at: item put: (quantity + 1)]]].
	
	^cartItems
		! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 03:28:44' prior: 50653880!
test03CreateOnlyOneCart
	
	| cartId cartItems |
	authenticationProcedure:= [].
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem itemsOfCartIdentifiedBy: cartId.
	
	self assert: cartItems isEmpty.
	^cartId! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 03:28:44' prior: 50653942!
test06CanNotAddInvalidItemsToCart
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOnlyOneCart.
	
	self 
		should: [storeSystem add: 1 of: storeTestObjectsFactory  itemNotSellByTheStore toCartIdentifiedBy: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem itemsOfCartIdentifiedBy: cartId.
			self assert: cartId equals: idGenerator lastAssignedId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 03:28:44' prior: 50653962!
test08CanListItemsAddedToCart
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOnlyOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 2 of: storeTestObjectsFactory  anotherItemSellByTheStore toCartIdentifiedBy: cartId.
	
	cartItems:= storeSystem itemsOfCartIdentifiedBy: cartId.
	self 
		assert: cartItems 
		equals:
			(Dictionary new 
				at: storeTestObjectsFactory itemSellByTheStore put: 2; 
				at: storeTestObjectsFactory anotherItemSellByTheStore put: 2;
				yourself).
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 03:28:44' prior: 50653928!
test04CreateMoreThanOneCart
	
	|  cartId cartItems |
	
	self test03CreateOnlyOneCart.
	
	cartId:= storeSystem createCartForUserIdentifiedBy:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem itemsOfCartIdentifiedBy: cartId.
	self assert: cartId equals: idGenerator lastAssignedId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 03:28:44' prior: 50653308!
test08CantListItemsOfUnregisteredCart
	
	self 
		should: [storeSystem itemsOfCartIdentifiedBy: 123] 
		raise: Error - MessageNotUnderstood 
		withMessageText: 'invalid cartId'! !

!methodRemoval: StoreSystem #listItemsOfCartIdentifiedBy: stamp: 'IB 11/9/2023 03:28:44'!
listItemsOfCartIdentifiedBy: aCartId

	| cartItems |
	
	cartItems := Dictionary new.
	self 
		withCartIdentifiedBy: aCartId 
		do: [:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent: [:quantity | cartItems at: item put: (quantity + 1)]]].
	
	^cartItems
		!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:31:05'!
addItemWithOcurrences: cartItems to: item

	cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent: [:quantity | cartItems at: item put: (quantity + 1)]! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:31:05' prior: 50655022!
itemsOfCartIdentifiedBy: aCartId

	| cartItems |
	
	cartItems := Dictionary new.
	self 
		withCartIdentifiedBy: aCartId 
		do: [:cart| cart withItemsDo: [:item| 
			self addItemWithOcurrences: cartItems to: item]].
	
	^cartItems
		! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:31:31' prior: 50655123!
addItemWithOcurrences: item to: cartItems

	cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent: [:quantity | cartItems at: item put: (quantity + 1)]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IB 11/9/2023 03:32:01'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IB 11/9/2023 03:32:01'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IB 11/9/2023 03:32:01'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IB 11/9/2023 03:32:01'!
ERROR!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IB 11/9/2023 03:32:01'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IB 11/9/2023 03:32:01'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IB 11/9/2023 03:32:01'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IB 11/9/2023 03:32:01'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IB 11/9/2023 03:32:03'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IB 11/9/2023 03:32:13'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IB 11/9/2023 03:32:17'!
ERROR!
!Cart class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 03:32:23' prior: 50654216!
acceptingItemsOf: aCatalog

	^self ownedByUserIdentifiedBy: 0 acceptingItemsOf: aCatalog
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IB 11/9/2023 03:32:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IB 11/9/2023 03:32:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IB 11/9/2023 03:32:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IB 11/9/2023 03:32:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IB 11/9/2023 03:32:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IB 11/9/2023 03:32:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IB 11/9/2023 03:32:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IB 11/9/2023 03:32:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IB 11/9/2023 03:32:29'!
PASSED!

----SNAPSHOT----(9 November 2023 03:32:33) CuisUniversity-5981.image priorSource: 10347785!
!Cart methodsFor: 'initialization' stamp: 'IB 11/9/2023 03:35:07' prior: 50654202!
initializeOwnedByUserIdentifiedBy: anUserId acceptingItemsOf: aCatalog

	owner := anUserId.
	catalog := aCatalog.
	items := Bag new! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IB 11/9/2023 03:35:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IB 11/9/2023 03:35:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IB 11/9/2023 03:35:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IB 11/9/2023 03:35:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IB 11/9/2023 03:35:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IB 11/9/2023 03:35:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IB 11/9/2023 03:35:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IB 11/9/2023 03:35:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IB 11/9/2023 03:35:21'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IB 11/9/2023 03:35:21'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IB 11/9/2023 03:35:21'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IB 11/9/2023 03:35:21'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IB 11/9/2023 03:35:21'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IB 11/9/2023 03:35:21'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:35:25'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:35:25'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:35:25'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:35:25'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:35:25'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:35:25'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:35:25'!
ERROR!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:35:25'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:35:26'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:35:26'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:35:26'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:35:26'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:35:26'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:35:26'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:35:26'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:35:26'!
ERROR!

cartItems!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:35:51' prior: 50655131!
itemsOfCartIdentifiedBy: aCartId

	| cartItems |
	
	cartItems := Dictionary new.
	self 
		withCartIdentifiedBy: aCartId 
		do: [:cart| cart withItemsDo: [:item| 
			self addItemWithOcurrences: item to: cartItems]].
	
	^cartItems
		! !

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:35:52'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:35:55'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:35:55'!
PASSED!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:36:31' prior: 50655326!
itemsOfCartIdentifiedBy: aCartId

	| cartItems |
	
	cartItems := Dictionary new.
	self 
		withCartIdentifiedBy: aCartId 
		do: [:cart| ^cart items].
	
	^cartItems
		! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:36:36'!
FAILURE!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:36:36'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:36:36'!
FAILURE!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:36:52' prior: 50655390!
itemsOfCartIdentifiedBy: aCartId

	| cartItems |
	
	cartItems := Dictionary new.
	self 
		withCartIdentifiedBy: aCartId 
		do: [:cart| ^cart items contents].
	
	^cartItems
		! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:36:58'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:36:58'!
PASSED!
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:37:08' prior: 50655452!
itemsOfCartIdentifiedBy: aCartId

	| cartItems |
	
	cartItems := Dictionary new.
	self 
		withCartIdentifiedBy: aCartId 
		do: [:cart| ^cart items].
	
	^cartItems
		! !
!StoreSystem methodsFor: 'methods' stamp: 'IB 11/9/2023 03:37:38' prior: 50655511!
itemsOfCartIdentifiedBy: aCartId

	^self 
		withCartIdentifiedBy: aCartId 
		do: [:cart| ^cart items]! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:37:42'!
FAILURE!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:37:42'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:37:42'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:38:00' prior: 50655067!
test08CanListItemsAddedToCart
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOnlyOneCart.
	storeSystem add: 2 of: storeTestObjectsFactory  itemSellByTheStore toCartIdentifiedBy: cartId.
	storeSystem add: 2 of: storeTestObjectsFactory  anotherItemSellByTheStore toCartIdentifiedBy: cartId.
	
	cartItems:= storeSystem itemsOfCartIdentifiedBy: cartId.
	self 
		assert: cartItems contents
		equals:
			(Dictionary new 
				at: storeTestObjectsFactory itemSellByTheStore put: 2; 
				at: storeTestObjectsFactory anotherItemSellByTheStore put: 2;
				yourself).
	! !

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:38:01'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:38:07'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:38:08'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:38:08'!
PASSED!

----SNAPSHOT----(9 November 2023 03:38:12) CuisUniversity-5981.image priorSource: 10354115!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:38:48'!
test15ListPurchasesWhenMoreThanOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 1;
		assert: purchases asOrderedCollection first total equals: 10;
		assert: purchases asOrderedCollection first items size equals: 1;
		assert: purchases asOrderedCollection first items includes: storeTestObjectsFactory itemSellByTheStore! !

!testRun: #StoreSystemTest #test15ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:38:53'!
FAILURE!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:39:22' prior: 50655656!
test15ListPurchasesWhenMoreThanOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 2;
		assert: purchases asOrderedCollection first total equals: 10;
		assert: purchases asOrderedCollection first items size equals: 1;
		assert: purchases asOrderedCollection first items includes: storeTestObjectsFactory itemSellByTheStore;
		assert: purchases asOrderedCollection second total equals: 10;
		assert: purchases asOrderedCollection second items size equals: 1;
		assert: purchases asOrderedCollection second items includes: storeTestObjectsFactory itemSellByTheStore! !

!testRun: #StoreSystemTest #test15ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:39:25'!
PASSED!

----SNAPSHOT----(9 November 2023 03:39:29) CuisUniversity-5981.image priorSource: 10368063!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:39:44'!
test16ListPurchasesWhenMoreThanOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 2;
		assert: purchases asOrderedCollection first total equals: 10;
		assert: purchases asOrderedCollection first items size equals: 1;
		assert: purchases asOrderedCollection first items includes: storeTestObjectsFactory itemSellByTheStore;
		assert: purchases asOrderedCollection second total equals: 10;
		assert: purchases asOrderedCollection second items size equals: 1;
		assert: purchases asOrderedCollection second items includes: storeTestObjectsFactory itemSellByTheStore! !

!methodRemoval: StoreSystemTest #test15ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:39:44'!
test15ListPurchasesWhenMoreThanOneRegisteredForThatUser

	|purchases|
	
	self test10CheckoutCart.
	self test10CheckoutCart.

	purchases := storeSystem purchasesOfUserIdentifiedBy: 'Pedro' withPassword: 'pass'.
	
	self 
		assert: purchases size equals: 2;
		assert: purchases asOrderedCollection first total equals: 10;
		assert: purchases asOrderedCollection first items size equals: 1;
		assert: purchases asOrderedCollection first items includes: storeTestObjectsFactory itemSellByTheStore;
		assert: purchases asOrderedCollection second total equals: 10;
		assert: purchases asOrderedCollection second items size equals: 1;
		assert: purchases asOrderedCollection second items includes: storeTestObjectsFactory itemSellByTheStore!

----SNAPSHOT----(9 November 2023 03:39:47) CuisUniversity-5981.image priorSource: 10371583!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:42:43'!
test17CartExpiresAfterHalfAnHour
	
	|cartId|
	cartId := self test03CreateOnlyOneCart.
	
	self 
		assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty! !

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHour stamp: 'IB 11/9/2023 03:42:45'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:42:45'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:42:45'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:42:45'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:42:45'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:42:45'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:42:46'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHour stamp: 'IB 11/9/2023 03:42:46'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:42:54' prior: 50655821!
test17CartExpiresAfterHalfAnHour
	
	|cartId|
	
	cartId := self test03CreateOnlyOneCart.
	
	self 
		assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:45:44' prior: 50655890!
test17CartExpiresAfterHalfAnHour
	
	|cartId|
	
	cartId := self test03CreateOnlyOneCart.
	
	self assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty.
		
	self advanceTimeHalfHour.
	
	self 
		should: [storeSystem itemsOfCartIdentifiedBy: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: 'invalid cartId'
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 03:46:26'!
test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt
	
	|cartId|
	
	cartId := self test03CreateOnlyOneCart.
	
	self assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty.
		
	self advanceTimeHalfHour.
	
	self 
		should: [storeSystem itemsOfCartIdentifiedBy: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: 'invalid cartId'
	! !

!methodRemoval: StoreSystemTest #test17CartExpiresAfterHalfAnHour stamp: 'IB 11/9/2023 03:46:26'!
test17CartExpiresAfterHalfAnHour
	
	|cartId|
	
	cartId := self test03CreateOnlyOneCart.
	
	self assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty.
		
	self advanceTimeHalfHour.
	
	self 
		should: [storeSystem itemsOfCartIdentifiedBy: cartId]
		raise: Error - MessageNotUnderstood
		withMessageText: 'invalid cartId'
	!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 03:46:40'!
ERROR!

----SNAPSHOT----(9 November 2023 03:46:48) CuisUniversity-5981.image priorSource: 10373367!
!StoreSystem class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 03:48:10'!
authenticatingUsersWith: anAuthenticationSystem 
generatingIdsUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor using: aTimeSystem     
	
	^self new 
		initializeAuthenticatingUsersWith: anAuthenticationSystem 
		generatingIdsUsing: anIdGenerator 
		withCatalog: aCatalog 
		chargingCardsThrought: aMerchantProcessor ! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 03:48:10' prior: 50651995 overrides: 16961394!
setUp

	storeTestObjectsFactory := StoreTestObjectsFactory new.
	idGenerator := IdGenerator new.
	debitBehavior := [:amount :card |].
	storeSystem := 
		StoreSystem 
			authenticatingUsersWith: self 
			generatingIdsUsing: idGenerator  
			withCatalog: storeTestObjectsFactory defaultCatalog 
			chargingCardsThrought: self using: self
	! !

!methodRemoval: StoreSystem class #authenticatingUsersWith:generatingIdsUsing:withCatalog:chargingCardsThrought: stamp: 'IB 11/9/2023 03:48:10'!
authenticatingUsersWith: anAuthenticationSystem 
generatingIdsUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor    
	
	^self new 
		initializeAuthenticatingUsersWith: anAuthenticationSystem 
		generatingIdsUsing: anIdGenerator 
		withCatalog: aCatalog 
		chargingCardsThrought: aMerchantProcessor !
!StoreSystem class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 03:48:14' prior: 50655945!
authenticatingUsersWith: anAuthenticationSystem 
generatingIdsUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor 
using: aTimeSystem     
	
	^self new 
		initializeAuthenticatingUsersWith: anAuthenticationSystem 
		generatingIdsUsing: anIdGenerator 
		withCatalog: aCatalog 
		chargingCardsThrought: aMerchantProcessor ! !
!StoreSystem methodsFor: 'initialization' stamp: 'IB 11/9/2023 03:48:39'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor using: aTimeSystem     
	
	authenticationSystem := anAuthenticationSystem.
	idGenerator := anIdGenerator.
	cartsByID := Dictionary new.
	transactionsByUser := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	salesBook := SalesBook generatingTransactionIdsUsing: idGenerator! !
!StoreSystem class methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 03:48:39' prior: 50655989!
authenticatingUsersWith: anAuthenticationSystem 
generatingIdsUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor 
using: aTimeSystem     
	
	^self new 
		initializeAuthenticatingUsersWith: anAuthenticationSystem 
		generatingIdsUsing: anIdGenerator 
		withCatalog: aCatalog 
		chargingCardsThrought: aMerchantProcessor using: aTimeSystem ! !

!methodRemoval: StoreSystem #initializeAuthenticatingUsersWith:generatingIdsUsing:withCatalog:chargingCardsThrought: stamp: 'IB 11/9/2023 03:48:39'!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor    
	
	authenticationSystem := anAuthenticationSystem.
	idGenerator := anIdGenerator.
	cartsByID := Dictionary new.
	transactionsByUser := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	salesBook := SalesBook generatingTransactionIdsUsing: idGenerator!
!StoreSystem class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 03:48:44' prior: 50656021!
authenticatingUsersWith: anAuthenticationSystem 
generatingIdsUsing: anIdGenerator 
withCatalog: aCatalog 
chargingCardsThrought: aMerchantProcessor 
using: aTimeSystem     
	
	^self new 
		initializeAuthenticatingUsersWith: anAuthenticationSystem 
		generatingIdsUsing: anIdGenerator 
		withCatalog: aCatalog 
		chargingCardsThrought: aMerchantProcessor 
		using: aTimeSystem ! !

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 'IB 11/9/2023 03:49:02'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem idGenerator catalog cartsByID merchantProcessor salesBook transactionsByUser timeSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'initialization' stamp: 'IB 11/9/2023 03:49:00' prior: 50656003!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor using: aTimeSystem     
	
	authenticationSystem := anAuthenticationSystem.
	timeSystem := aTimeSystem.
	idGenerator := anIdGenerator.
	cartsByID := Dictionary new.
	transactionsByUser := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	salesBook := SalesBook generatingTransactionIdsUsing: idGenerator! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:51:33'!
createCartForUserIdentifiedBy: anUserId

	^ Cart ownedByUserIdentifiedBy: anUserId acceptingItemsOf: catalog! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:51:33' prior: 50654225!
createCartForUserIdentifiedBy: anUserId withPassword: aPassword

	| cartId |
	
	self authenticateUserIdentifiedBy: aPassword withPassword: anUserId.
	
	cartId := idGenerator nextId.
	cartsByID at: cartId put: (self createCartForUserIdentifiedBy: anUserId).
	
	^cartId.
	! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:52:19' prior: 50655519!
itemsOfCartIdentifiedBy: aCartId

	^self 
		withCartIdentifiedBy: aCartId 
		do: [:cart| cart items]! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:52:20'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:52:20'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:52:20'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:52:20'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:52:20'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:52:20'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:52:20'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:52:20'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:52:20'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:52:21'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:52:21'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:52:21'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:52:21'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:52:21'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:52:21'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:52:21'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 03:52:21'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 03:52:21'!
ERROR!
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:54:08' prior: 50654349!
purchasesOfUserIdentifiedBy: anUserId withPassword: aPassword
 
	self authenticateUserIdentifiedBy: anUserId withPassword: aPassword.
	
	^transactionsByUser 
		at: anUserId 
		ifPresent: [:transactionIds | transactionIds collect: [:transactionId | salesBook saleIdentifiedBy: transactionId ]] 
		ifAbsent: [{}]! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 03:54:15'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:54:15'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 03:54:15'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 03:54:15'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 03:54:15'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 03:54:15'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 03:54:15'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 03:54:15'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 03:54:15'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 03:54:16'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 03:54:16'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 03:54:16'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 03:54:16'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 03:54:16'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:54:16'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 03:54:16'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 03:54:16'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 03:54:16'!
ERROR!

----SNAPSHOT----(9 November 2023 03:54:31) CuisUniversity-5981.image priorSource: 10377327!
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:55:19'!
createCashierFor: cart charging: aCreditCard

	^ Cashier 
			toCheckout: cart 
			charging: aCreditCard
			throught: merchantProcessor
			on: Date today
			registeringOn: salesBook! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:55:20' prior: 50654273!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | |cashier transactionId |
		cashier := self createCashierFor: cart charging: aCreditCard.
		cashier checkOut.
		transactionId := idGenerator lastAssignedId.
		cartsByID removeKey: aCartId.
		transactionsByUser at: cart ownerId ifAbsentPut: [Set new].
		(transactionsByUser at: cart ownerId) add: transactionId.
		^transactionId]! !
!StoreSystem methodsFor: 'support' stamp: 'IB 11/9/2023 03:55:32' prior: 50656263!
createCashierFor: cart charging: aCreditCard

	^ Cashier 
		toCheckout: cart 
		charging: aCreditCard
		throught: merchantProcessor
		on: Date today
		registeringOn: salesBook! !
!StoreSystem methodsFor: 'support' stamp: 'IB 11/9/2023 03:55:40' prior: 50656289!
createCashierFor: aCart charging: aCreditCard

	^ Cashier 
		toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor
		on: Date today
		registeringOn: salesBook! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:56:19' prior: 50656272!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | |transactionId |
		(self createCashierFor: cart charging: aCreditCard) checkOut.
		transactionId := idGenerator lastAssignedId.
		cartsByID removeKey: aCartId.
		transactionsByUser at: cart ownerId ifAbsentPut: [Set new].
		(transactionsByUser at: cart ownerId) add: transactionId.
		^transactionId]! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:56:21' prior: 50656307!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | | transactionId |
		(self createCashierFor: cart charging: aCreditCard) checkOut.
		transactionId := idGenerator lastAssignedId.
		cartsByID removeKey: aCartId.
		transactionsByUser at: cart ownerId ifAbsentPut: [Set new].
		(transactionsByUser at: cart ownerId) add: transactionId.
		^transactionId]! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:57:09'!
removeCartIdentifiedBy: aCartId

	^ cartsByID removeKey: aCartId! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:57:09' prior: 50656323!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | | transactionId |
		(self createCashierFor: cart charging: aCreditCard) checkOut.
		transactionId := idGenerator lastAssignedId.
		self removeCartIdentifiedBy: aCartId.
		transactionsByUser at: cart ownerId ifAbsentPut: [Set new].
		(transactionsByUser at: cart ownerId) add: transactionId.
		^transactionId]! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 03:57:40' prior: 50656344!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | | transactionId |
		(self createCashierFor: cart charging: aCreditCard) checkOut.
		transactionId := idGenerator lastAssignedId.
		transactionsByUser at: cart ownerId ifAbsentPut: [Set new].
		(transactionsByUser at: cart ownerId) add: transactionId.
		self removeCartIdentifiedBy: aCartId.
		^transactionId]! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 04:01:48'!
registerTransactionIdentifiedBy: aTransactionId forUserIdentifiedBy: aUserId

	transactionsByUser at: aUserId ifAbsentPut: [Set new].
	(transactionsByUser at: aUserId) add: aTransactionId! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 04:02:27' prior: 50656360!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | | transactionId |
		(self createCashierFor: cart charging: aCreditCard) checkOut.
		transactionId := idGenerator lastAssignedId.
		self registerTransactionIdentifiedBy: transactionId forUserIdentifiedBy: cart ownerId.
		self removeCartIdentifiedBy: aCartId.
		^transactionId]! !
!StoreSystem methodsFor: 'support' stamp: 'IB 11/9/2023 04:03:29'!
registerLastTransactionToUserIdentifiedBy: aUserId

	transactionsByUser at: aUserId ifAbsentPut: [Set new].
	^(transactionsByUser at: aUserId) add: idGenerator lastAssignedId! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 04:03:52' prior: 50656385!
checkoutCartIdentifiedBy: aCartId payingWith: aCreditCard

	self withCartIdentifiedBy: aCartId do: [:cart | | transactionId |
		(self createCashierFor: cart charging: aCreditCard) checkOut.
		transactionId := self registerLastTransactionToUserIdentifiedBy: cart ownerId.
		self removeCartIdentifiedBy: aCartId.
		^transactionId]! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:03:57'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:03:58'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:03:58'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:03:58'!
ERROR!

----SNAPSHOT----(9 November 2023 04:04:04) CuisUniversity-5981.image priorSource: 10387510!

!methodRemoval: StoreSystem #registerTransactionIdentifiedBy:forUserIdentifiedBy: stamp: 'IB 11/9/2023 04:04:11'!
registerTransactionIdentifiedBy: aTransactionId forUserIdentifiedBy: aUserId

	transactionsByUser at: aUserId ifAbsentPut: [Set new].
	(transactionsByUser at: aUserId) add: aTransactionId!

!methodRemoval: Sale class #of: stamp: 'IB 11/9/2023 04:07:18'!
of: aTotal

	"should assert total is not negative or 0!!"
	^self new initializeTotal: aTotal !

!methodRemoval: StoreSystem #addItemWithOcurrences:to: stamp: 'IB 11/9/2023 04:12:42'!
addItemWithOcurrences: item to: cartItems

	cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent: [:quantity | cartItems at: item put: (quantity + 1)]!
!StoreSystem methodsFor: 'support' stamp: 'IB 11/9/2023 04:13:18' prior: 50656298!
createCashierFor: aCart charging: aCreditCard

	^ Cashier 
		toCheckout: aCart 
		charging: aCreditCard
		throught: merchantProcessor
		on: timeSystem currentDate
		registeringOn: salesBook! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:13:40'!
ERROR!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:13:40'!
ERROR!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:13:40'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:13:40'!
ERROR!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:13:40'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:13:40'!
ERROR!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:13:42'!
ERROR!
!StoreSystemTest methodsFor: 'support - stub' stamp: 'IB 11/9/2023 04:13:49'!
currentDate
	self shouldBeImplemented.! !

Date today!

DateAndTime now!

DateAndTime now date!
!StoreSystemTest methodsFor: 'support - stub' stamp: 'IB 11/9/2023 04:15:03' prior: 50656580!
currentDate
	
	^DateAndTime now date! !

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:15:06'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:15:10'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:15:10'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:15:10'!
ERROR!

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 'IB 11/9/2023 04:17:00'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem idGenerator storeTestObjectsFactory debitBehavior currentDateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'running' stamp: 'IB 11/9/2023 04:16:58' prior: 50655960 overrides: 16961394!
setUp

	currentDateAndTime := DateAndTime year: 2023 month: 11 day: 9 hour: 12 minute: 0 second: 0.
	storeTestObjectsFactory := StoreTestObjectsFactory new.
	idGenerator := IdGenerator new.
	debitBehavior := [:amount :card |].
	storeSystem := 
		StoreSystem 
			authenticatingUsersWith: self 
			generatingIdsUsing: idGenerator  
			withCatalog: storeTestObjectsFactory defaultCatalog 
			chargingCardsThrought: self using: self
	! !
!StoreSystemTest methodsFor: 'support - stub' stamp: 'IB 11/9/2023 04:17:20' prior: 50656586!
currentDate
	
	^currentDateAndTime date! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:17:24'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:17:24'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:17:24'!
ERROR!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:17:33'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:17:33'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:17:33'!
ERROR!
!StoreSystemTest methodsFor: 'support - stub' stamp: 'IB 11/9/2023 04:17:40'!
advanceTimeHalfHour
	self shouldBeImplemented.! !

currentDateAndTime!

currentDateAndTime + (Duration minutes: 30)!
!StoreSystemTest methodsFor: 'support - stub' stamp: 'IB 11/9/2023 04:19:36' prior: 50656812!
advanceTimeHalfHour
	
	currentDateAndTime := currentDateAndTime + (Duration minutes: 30)! !

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:19:42'!
FAILURE!

----SNAPSHOT----(9 November 2023 04:19:50) CuisUniversity-5981.image priorSource: 10394664!
!StoreSystemTest methodsFor: 'support - stub' stamp: 'IB 11/9/2023 04:21:10'!
advanceTimeFifteenMinutes
	
	currentDateAndTime := currentDateAndTime + (Duration minutes: 15)! !
!StoreSystemTest methodsFor: 'support - stub' stamp: 'IB 11/9/2023 04:21:32' prior: 50656819!
advanceTimeHalfHour
	
	2 timesRepeat: [self advanceTimeFifteenMinutes]! !

!classDefinition: #TimeSensitiveRepository category: 'TusLibros' stamp: 'IB 11/9/2023 04:30:38'!
Object subclass: #TimeSensitiveRepository
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'initialization' stamp: 'IB 11/9/2023 04:30:33' prior: 50656080!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor using: aTimeSystem     
	
	authenticationSystem := anAuthenticationSystem.
	timeSystem := aTimeSystem.
	idGenerator := anIdGenerator.
	cartsByID := TimeSensitiveRepository workingWith: timeSystem.
	transactionsByUser := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	salesBook := SalesBook generatingTransactionIdsUsing: idGenerator! !
!TimeSensitiveRepository class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 04:30:53'!
workingWith: aTimeSystem 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWorkingWith: aTimeSystem ! !
!TimeSensitiveRepository class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 04:30:56' prior: 50656871!
workingWith: aTimeSystem 
	
	^self new initializeWorkingWith: aTimeSystem ! !

!classDefinition: #TimeSensitiveRepository category: 'TusLibros' stamp: 'IB 11/9/2023 04:31:06'!
Object subclass: #TimeSensitiveRepository
	instanceVariableNames: 'timeSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TimeSensitiveRepository methodsFor: 'initialization' stamp: 'IB 11/9/2023 04:31:06'!
initializeWorkingWith: aTimeSystem 
	self shouldBeImplemented.
	timeSystem := aTimeSystem.! !
!TimeSensitiveRepository methodsFor: 'initialization' stamp: 'IB 11/9/2023 04:31:12' prior: 50656893!
initializeWorkingWith: aTimeSystem

	timeSystem := aTimeSystem! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:31:13'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:31:15'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:31:16'!
ERROR!
!TimeSensitiveRepository class methodsFor: 'instance creation' stamp: 'IB 11/9/2023 04:33:23'!
workingWith: aTimeSystem assigningIDsUsing: anIdGenerator  
	
	^self new initializeWorkingWith: aTimeSystem ! !
!StoreSystem methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 04:33:24' prior: 50656851!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingIdsUsing: anIdGenerator withCatalog: aCatalog chargingCardsThrought: aMerchantProcessor using: aTimeSystem     
	
	authenticationSystem := anAuthenticationSystem.
	timeSystem := aTimeSystem.
	idGenerator := anIdGenerator.
	cartsByID := TimeSensitiveRepository workingWith: timeSystem assigningIDsUsing: idGenerator.
	transactionsByUser := Dictionary new.
	catalog := aCatalog.
	merchantProcessor := aMerchantProcessor.
	salesBook := SalesBook generatingTransactionIdsUsing: idGenerator! !

!methodRemoval: TimeSensitiveRepository class #workingWith: stamp: 'IB 11/9/2023 04:33:24'!
workingWith: aTimeSystem 
	
	^self new initializeWorkingWith: aTimeSystem !
!TimeSensitiveRepository methodsFor: 'initialization' stamp: 'IB 11/9/2023 04:34:17'!
initializeWorkingWith: aTimeSystem assigningIDsUsing: anIdGenerator 

	timeSystem := aTimeSystem! !
!TimeSensitiveRepository class methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 04:34:17' prior: 50656915!
workingWith: aTimeSystem assigningIDsUsing: anIdGenerator  
	
	^self new initializeWorkingWith: aTimeSystem assigningIDsUsing: anIdGenerator ! !

!methodRemoval: TimeSensitiveRepository #initializeWorkingWith: stamp: 'IB 11/9/2023 04:34:17'!
initializeWorkingWith: aTimeSystem

	timeSystem := aTimeSystem!

!classDefinition: #TimeSensitiveRepository category: 'TusLibros' stamp: 'IB 11/9/2023 04:34:33'!
Object subclass: #TimeSensitiveRepository
	instanceVariableNames: 'timeSystem idGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TimeSensitiveRepository methodsFor: 'initialization' stamp: 'IB 11/9/2023 04:34:31' prior: 50656948!
initializeWorkingWith: aTimeSystem assigningIDsUsing: anIdGenerator 

	timeSystem := aTimeSystem.
	idGenerator := anIdGenerator ! !
!TimeSensitiveRepository methodsFor: 'initialization' stamp: 'IB 11/9/2023 04:34:35' prior: 50656976!
initializeWorkingWith: aTimeSystem assigningIDsUsing: anIdGenerator 

	timeSystem := aTimeSystem.
	idGenerator := anIdGenerator! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:34:39'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:34:39'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:34:39'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:34:39'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:34:39'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:34:39'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:34:41'!
ERROR!
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 04:35:42' prior: 50656105!
createCartForUserIdentifiedBy: anUserId withPassword: aPassword

	
	
	self authenticateUserIdentifiedBy: aPassword withPassword: anUserId.
	
	^cartsByID store: (self createCartForUserIdentifiedBy: anUserId)
	! !
!StoreSystem methodsFor: 'methods - public' stamp: 'IB 11/9/2023 04:35:49' prior: 50657052!
createCartForUserIdentifiedBy: anUserId withPassword: aPassword

	self authenticateUserIdentifiedBy: aPassword withPassword: anUserId.
	
	^cartsByID store: (self createCartForUserIdentifiedBy: anUserId)
	! !

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:35:51'!
ERROR!
!TimeSensitiveRepository methodsFor: 'adding' stamp: 'IB 11/9/2023 04:36:03'!
store: aRenameMe1 
	self shouldBeImplemented.! !

!classDefinition: #TimeSensitiveRepository category: 'TusLibros' stamp: 'IB 11/9/2023 04:37:17'!
Object subclass: #TimeSensitiveRepository
	instanceVariableNames: 'timeSystem idGenerator itemsByID'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TimeSensitiveRepository methodsFor: 'adding' stamp: 'IB 11/9/2023 04:37:15' prior: 50657074!
store: anObjectToStore
	
	|id|
	
	id := idGenerator nextId.
	
	itemsByID at: id put: anObjectToStore! !

timeSystem currentDate!

!classDefinition: #TimeSensitiveRepository category: 'TusLibros' stamp: 'IB 11/9/2023 04:38:23'!
Object subclass: #TimeSensitiveRepository
	instanceVariableNames: 'timeSystem idGenerator itemsByID timeStoredById'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TimeSensitiveRepository methodsFor: 'adding' stamp: 'IB 11/9/2023 04:38:22' prior: 50657087!
store: anObjectToStore
	
	|id|
	
	id := idGenerator nextId.
	
	itemsByID at: id put: anObjectToStore.
	timeStoredById at: id put: timeSystem currentDateTime! !

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:38:27'!
ERROR!
!StoreSystemTest methodsFor: 'support - stub' stamp: 'IB 11/9/2023 04:38:47'!
currentDateAndTime
	
	^currentDateAndTime! !
!StoreSystemTest methodsFor: 'support - stub' stamp: 'IB 11/9/2023 04:38:54' prior: 50656684!
currentDate
	
	^self currentDateAndTime date! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:38:58'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:38:58'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:38:58'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 04:38:58'!
ERROR!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:38:58'!
ERROR!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 04:38:58'!
ERROR!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 04:38:58'!
ERROR!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:38:58'!
ERROR!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:38:58'!
ERROR!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:38:58'!
ERROR!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:38:59'!
ERROR!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:38:59'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:38:59'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:38:59'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:38:59'!
ERROR!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:38:59'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:38:59'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:39:00'!
ERROR!
!TimeSensitiveRepository methodsFor: 'initialization' stamp: 'IB 11/9/2023 04:39:32' prior: 50656984!
initializeWorkingWith: aTimeSystem assigningIDsUsing: anIdGenerator 

	timeSystem := aTimeSystem.
	idGenerator := anIdGenerator.
	itemsByID := Dictionary new.
	timeStoredById := Dictionary new! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:39:39'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:39:39'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:39:39'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 04:39:39'!
ERROR!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:39:39'!
ERROR!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 04:39:39'!
ERROR!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 04:39:39'!
ERROR!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:39:39'!
ERROR!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:39:39'!
ERROR!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:39:39'!
ERROR!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:39:39'!
ERROR!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:39:39'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:39:39'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:39:40'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:39:40'!
ERROR!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:39:40'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:39:40'!
ERROR!

----SNAPSHOT----(9 November 2023 04:39:44) CuisUniversity-5981.image priorSource: 10405690!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:39:45'!
ERROR!
!TimeSensitiveRepository methodsFor: 'adding' stamp: 'IB 11/9/2023 04:39:54' prior: 50657103!
store: anObjectToStore
	
	|id|
	
	id := idGenerator nextId.
	
	itemsByID at: id put: anObjectToStore.
	timeStoredById at: id put: timeSystem currentDateAndTime! !

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:39:55'!
ERROR!
!StoreSystem methodsFor: 'support' stamp: 'IB 11/9/2023 04:42:42' prior: 50651470!
withCartIdentifiedBy: aCartId do: aOneArgBlock

	^ cartsByID 
		withObjectIdentifiedBy: aCartId 
		do: aOneArgBlock
		ifAbsent: [self error: 'invalid cartId']! !

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:42:45'!
ERROR!
!TimeSensitiveRepository methodsFor: 'accessing' stamp: 'IB 11/9/2023 04:42:54'!
withObjectIdentifiedBy: aCartId do: aOneArgBlock ifAbsent: aRenameMe1 
	self shouldBeImplemented.! !
!TimeSensitiveRepository methodsFor: 'accessing' stamp: 'IB 11/9/2023 04:43:55' prior: 50657280!
withObjectIdentifiedBy: anIdentifier do: aOneArgBlock ifAbsent: aNoneBlock 
	
	^itemsByID at: anIdentifier ifPresent: aOneArgBlock ifAbsent: aNoneBlock! !

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:43:56'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:44:02'!
ERROR!
!TimeSensitiveRepository methodsFor: 'adding' stamp: 'IB 11/9/2023 04:45:06' prior: 50657258!
store: anObjectToStore
	
	|id|
	
	id := idGenerator nextId.
	
	itemsByID at: id put: anObjectToStore.
	timeStoredById at: id put: timeSystem currentDateAndTime.
	
	^id! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:45:11'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:45:11'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:45:11'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 04:45:11'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:45:11'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 04:45:11'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 04:45:11'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:45:11'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:45:12'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:45:12'!
ERROR!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:45:12'!
ERROR!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:45:12'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:45:12'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:45:12'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:45:12'!
ERROR!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:45:12'!
ERROR!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:45:12'!
FAILURE!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:45:13'!
ERROR!
!StoreSystem methodsFor: 'support' stamp: 'IB 11/9/2023 04:45:34' prior: 50656339!
removeCartIdentifiedBy: aCartId

	^ cartsByID removeObjectIdentifiedBy: aCartId! !

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:45:37'!
ERROR!
!TimeSensitiveRepository methodsFor: 'adding' stamp: 'IB 11/9/2023 04:45:45'!
removeObjectIdentifiedBy: aCartId 
	self shouldBeImplemented.! !
!TimeSensitiveRepository methodsFor: 'adding' stamp: 'IB 11/9/2023 04:46:12' prior: 50657380!
removeObjectIdentifiedBy: anIdentifier 
	
	^itemsByID removeKey: anIdentifier! !

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:46:13'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:46:15'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:46:16'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:46:17'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:46:18'!
FAILURE!

----SNAPSHOT----(9 November 2023 04:46:35) CuisUniversity-5981.image priorSource: 10419224!
!TimeSensitiveRepository methodsFor: 'accessing' stamp: 'IB 11/9/2023 04:48:14' prior: 50657287!
withObjectIdentifiedBy: anIdentifier do: aOneArgBlock ifAbsent: aNoneBlock 
	
	^itemsByID 
		at: anIdentifier 
		ifPresent: [:storedObject | timeStoredById at: anIdentifier put: timeSystem currentDateAndTime. 
			aOneArgBlock value: storedObject] 
		ifAbsent: aNoneBlock! !
!TimeSensitiveRepository methodsFor: 'accessing' stamp: 'IB 11/9/2023 04:48:44'!
refreshTimeStampForObjectIdentifiedBy: anIdentifier

	^ timeStoredById at: anIdentifier put: timeSystem currentDateAndTime! !
!TimeSensitiveRepository methodsFor: 'accessing' stamp: 'IB 11/9/2023 04:48:44' prior: 50657412!
withObjectIdentifiedBy: anIdentifier do: aOneArgBlock ifAbsent: aNoneBlock 
	
	^itemsByID 
		at: anIdentifier 
		ifPresent: [:storedObject | self refreshTimeStampForObjectIdentifiedBy: anIdentifier. 
			aOneArgBlock value: storedObject] 
		ifAbsent: aNoneBlock! !
!TimeSensitiveRepository methodsFor: 'accessing' stamp: 'IB 11/9/2023 04:48:51' prior: 50657431!
withObjectIdentifiedBy: anIdentifier do: aOneArgBlock ifAbsent: aNoneBlock 
	
	^itemsByID 
		at: anIdentifier 
		ifPresent: [:storedObject |
			self refreshTimeStampForObjectIdentifiedBy: anIdentifier. 
			aOneArgBlock value: storedObject] 
		ifAbsent: aNoneBlock! !
!TimeSensitiveRepository methodsFor: 'adding' stamp: 'IB 11/9/2023 04:49:55' prior: 50657385!
removeObjectIdentifiedBy: anIdentifier 
	
	timeStoredById removeKey: anIdentifier.
	^itemsByID removeKey: anIdentifier! !
!TimeSensitiveRepository methodsFor: 'accessing' stamp: 'IB 11/9/2023 04:51:03' prior: 50657443!
withObjectIdentifiedBy: anIdentifier do: aOneArgBlock ifAbsent: aNoneBlock 
	
	^itemsByID 
		at: anIdentifier 
		ifPresent: [:storedObject |
			self refreshTimeStampForObjectIdentifiedBy: anIdentifier. 
			aOneArgBlock value: storedObject] 
		ifAbsent: aNoneBlock! !
!TimeSensitiveRepository methodsFor: 'accessing' stamp: 'IB 11/9/2023 04:54:48' prior: 50657462!
withObjectIdentifiedBy: anIdentifier do: aOneArgBlock ifAbsent: aNoneBlock 
	
	^itemsByID 
		at: anIdentifier 
		ifPresent: [:storedObject |
			self checkAvailabilityForObjectIdentifiedBy: anIdentifier ifExpiredDo: aNoneBlock.
			aOneArgBlock value: storedObject] 
		ifAbsent: aNoneBlock! !
!TimeSensitiveRepository methodsFor: 'accessing' stamp: 'IB 11/9/2023 04:55:11'!
checkAvailabilityForObjectIdentifiedBy: anIdentifier ifExpiredDo: aNoneBlock
		
		
	self refreshTimeStampForObjectIdentifiedBy: anIdentifier. ! !
!TimeSensitiveRepository methodsFor: 'time' stamp: 'IB 11/9/2023 04:57:48' prior: 50657486!
checkAvailabilityForObjectIdentifiedBy: anIdentifier ifExpiredDo: aNoneBlock
		
	((timeSystem currentDateAndTime - (timeStoredById at: anIdentifier)) >= (Duration minutes: 30))
		ifTrue: [timeStoredById removeKey: anIdentifier]
		ifFalse: [self refreshTimeStampForObjectIdentifiedBy: anIdentifier]! !
!TimeSensitiveRepository methodsFor: 'time' stamp: 'IB 11/9/2023 04:58:30'!
isExpiredObjectIdentifiedBy: anIdentifier

	^ (timeSystem currentDateAndTime - (timeStoredById at: anIdentifier)) >= (Duration minutes: 30)! !
!TimeSensitiveRepository methodsFor: 'time' stamp: 'IB 11/9/2023 04:58:30' prior: 50657494!
checkAvailabilityForObjectIdentifiedBy: anIdentifier ifExpiredDo: aNoneBlock
		
	((self isExpiredObjectIdentifiedBy: anIdentifier))
		ifTrue: [timeStoredById removeKey: anIdentifier]
		ifFalse: [self refreshTimeStampForObjectIdentifiedBy: anIdentifier]! !
!TimeSensitiveRepository methodsFor: 'time' stamp: 'IB 11/9/2023 04:58:37' prior: 50657514!
checkAvailabilityForObjectIdentifiedBy: anIdentifier ifExpiredDo: aNoneBlock
		
	(self isExpiredObjectIdentifiedBy: anIdentifier)
		ifTrue: [timeStoredById removeKey: anIdentifier]
		ifFalse: [self refreshTimeStampForObjectIdentifiedBy: anIdentifier]! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 04:58:43'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:58:43'!
FAILURE!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 04:58:43'!
FAILURE!

----SNAPSHOT----(9 November 2023 04:58:53) CuisUniversity-5981.image priorSource: 10424235!
!TimeSensitiveRepository methodsFor: 'time' stamp: 'IB 11/9/2023 04:59:38' prior: 50657525!
checkAvailabilityForObjectIdentifiedBy: anIdentifier ifExpiredDo: aNoneBlock
		
	(self isExpiredObjectIdentifiedBy: anIdentifier)
		ifTrue: [self removeObjectIdentifiedBy: anIdentifier]
		ifFalse: [self refreshTimeStampForObjectIdentifiedBy: anIdentifier]! !
!TimeSensitiveRepository methodsFor: 'time' stamp: 'IB 11/9/2023 04:59:43' prior: 50657601!
checkAvailabilityForObjectIdentifiedBy: anIdentifier ifExpiredDo: aNoneBlock
		
		self halt.
	(self isExpiredObjectIdentifiedBy: anIdentifier)
		ifTrue: [self removeObjectIdentifiedBy: anIdentifier]
		ifFalse: [self refreshTimeStampForObjectIdentifiedBy: anIdentifier]! !

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 04:59:47'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:59:47'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 04:59:47'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 04:59:47'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 04:59:47'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 04:59:47'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 04:59:47'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 04:59:47'!
PASSED!

self isExpiredObjectIdentifiedBy: anIdentifier!

timeSystem currentDateAndTime - (timeStoredById at: anIdentifier)!

timeStoredById at: anIdentifier!

timeSystem currentDateAndTime - (timeStoredById at: anIdentifier)!

timeSystem currentDateAndTime!

----SNAPSHOT----(9 November 2023 05:01:02) CuisUniversity-5981.image priorSource: 10430302!

self isExpiredObjectIdentifiedBy: anIdentifier!

timeSystem currentDateAndTime!

self isExpiredObjectIdentifiedBy: anIdentifier!
!TimeSensitiveRepository methodsFor: 'time' stamp: 'IB 11/9/2023 05:02:08' prior: 50657612!
checkAvailabilityForObjectIdentifiedBy: anIdentifier ifExpiredDo: aNoneBlock
		
	(self isExpiredObjectIdentifiedBy: anIdentifier)
		ifTrue: [self removeObjectIdentifiedBy: anIdentifier]
		ifFalse: [self refreshTimeStampForObjectIdentifiedBy: anIdentifier]! !
!TimeSensitiveRepository methodsFor: 'time' stamp: 'IB 11/9/2023 05:02:27' prior: 50657667!
checkAvailabilityForObjectIdentifiedBy: anIdentifier ifExpiredDo: aNoneBlock
		
	(self isExpiredObjectIdentifiedBy: anIdentifier)
		ifTrue: [
			self removeObjectIdentifiedBy: anIdentifier.
			aNoneBlock value]
		ifFalse: [self refreshTimeStampForObjectIdentifiedBy: anIdentifier]! !

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 05:02:29'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 05:02:33'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 05:02:33'!
PASSED!
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 05:04:24'!
test17CartDoesNotExpiresIfItIsInteractedWith
	
	|cartId|
	
	cartId := self test03CreateOnlyOneCart.
		
	self advanceTimeFifteenMinutes.
	self assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty.
	
	self advanceTimeFifteenMinutes.
	
	self assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty.
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 'IB 11/9/2023 05:04:32'!
test18CartDoesNotExpiresIfItIsInteractedWith
	
	|cartId|
	
	cartId := self test03CreateOnlyOneCart.
		
	self advanceTimeFifteenMinutes.
	self assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty.
	
	self advanceTimeFifteenMinutes.
	
	self assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty.
	! !

!methodRemoval: StoreSystemTest #test17CartDoesNotExpiresIfItIsInteractedWith stamp: 'IB 11/9/2023 05:04:32'!
test17CartDoesNotExpiresIfItIsInteractedWith
	
	|cartId|
	
	cartId := self test03CreateOnlyOneCart.
		
	self advanceTimeFifteenMinutes.
	self assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty.
	
	self advanceTimeFifteenMinutes.
	
	self assert: (storeSystem itemsOfCartIdentifiedBy: cartId) isEmpty.
	!

!testRun: #StoreSystemTest #test18CartDoesNotExpiresIfItIsInteractedWith stamp: 'IB 11/9/2023 05:04:35'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

!testRun: #StoreSystemTest #test18CartDoesNotExpiresIfItIsInteractedWith stamp: 'IB 11/9/2023 05:04:40'!
PASSED!

----SNAPSHOT----(9 November 2023 05:04:45) CuisUniversity-5981.image priorSource: 10432265!
!IdGenerator methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 05:06:42' prior: 50650953 overrides: 16920235!
initialize
	nextId := 1! !
!IdGenerator methodsFor: 'as yet unclassified' stamp: 'IB 11/9/2023 05:06:43' prior: 50657918 overrides: 16920235!
initialize

	nextId := 1! !

!methodRemoval: Sale #initializeTotal: stamp: 'IB 11/9/2023 05:07:27'!
initializeTotal: aTotal

	total := aTotal !

----SNAPSHOT----(9 November 2023 05:09:17) CuisUniversity-5981.image priorSource: 10440425!

----QUIT----(9 November 2023 05:09:29) CuisUniversity-5981.image priorSource: 10440943!

----STARTUP---- (9 November 2023 05:09:36) as C:\Users\iboaretto\Desktop\UBA\Inge1\TusLibrosIT33\windows64\CuisUniversity-5981.image!


!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'IB 11/9/2023 05:09:40'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'IB 11/9/2023 05:09:40'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'IB 11/9/2023 05:09:40'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'IB 11/9/2023 05:09:40'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'IB 11/9/2023 05:09:40'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'IB 11/9/2023 05:09:40'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'IB 11/9/2023 05:09:43'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'IB 11/9/2023 05:09:43'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'IB 11/9/2023 05:09:44'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'IB 11/9/2023 05:09:44'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'IB 11/9/2023 05:09:44'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'IB 11/9/2023 05:09:44'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'IB 11/9/2023 05:09:44'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'IB 11/9/2023 05:09:44'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartForUnregisteredUser stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOnlyOneCart stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreThanOneCart stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToUnregisteredCart stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsToCart stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test08CanListItemsAddedToCart stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test08CantListItemsOfUnregisteredCart stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test10CanNotCheckoutAllreadyCheckoutCart stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test10CheckoutCart stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test12CanNotListPurchasesOfUnregisteredUser stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test13CanNotListPurchasesWhenUserProvidesWrongPassword stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test14ListPurchasesWhenNoneRegisteredForThatUser stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test15ListPurchasesWhenOnlyOneRegisteredForThatUser stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test16ListPurchasesWhenMoreThanOneRegisteredForThatUser stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test17CartExpiresAfterHalfAnHourWithoutInteractingWithIt stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

!testRun: #StoreSystemTest #test18CartDoesNotExpiresIfItIsInteractedWith stamp: 'IB 11/9/2023 05:09:49'!
PASSED!

----QUIT----(9 November 2023 05:10:01) CuisUniversity-5981.image priorSource: 10441036!