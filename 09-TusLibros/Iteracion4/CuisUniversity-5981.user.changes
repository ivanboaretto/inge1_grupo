

----STARTUP---- (13 November 2023 02:53:08) as /home/totorroto/Desktop/Portfolio/linux64/CuisUniversity-5981.image!


!classRemoval: #Cart stamp: 'toto 11/13/2023 02:53:13'!
Object subclass: #Cart
	instanceVariableNames: 'editorial addedBooks'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Libros'!

!classRemoval: #CartTest stamp: 'toto 11/13/2023 02:53:14'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Libros'!

----End fileIn of /home/totorroto/Downloads/TusLibrosREST Ejercicio it4.st----!

----End fileIn of /home/totorroto/Downloads/TusLibros-Tests Ejercicio it4.st----!

----End fileIn of /home/totorroto/Downloads/TusLibros-Model Ejercicio it4.st----!

----End fileIn of /home/totorroto/Desktop/Portfolio/linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/totorroto/Desktop/Portfolio/linux64/Packages/Features/Compression.pck.st----!

----End fileIn of /home/totorroto/Desktop/Portfolio/linux64/Packages/Features/Sound.pck.st----!

----End fileIn of /home/totorroto/Desktop/Portfolio/linux64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /home/totorroto/Desktop/Portfolio/linux64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /home/totorroto/Desktop/Portfolio/linux64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /home/totorroto/Downloads/WebClient.pck.st----!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 02:56:06' prior: 50334362!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	[ ... ] fork.


readySemaphore := Semaphore new.  
readySemaphore signal. 
readySemaphore wait.  
	totalSales := self totalSalesOf: anItem.
	totalMoney := self totalMoneyRaisedBy: anItem.
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 02:56:32' prior: 50371201!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	


	readySemaphore := Semaphore new.  
	[totalSales := self totalSalesOf: anItem.readySemaphore signal. ] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.  
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 02:56:40'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 02:56:52' prior: 50371223!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	


	readySemaphore := Semaphore new.  
	[totalSales := self totalSalesOf: anItem.readySemaphore signal.] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.  
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 02:56:58' prior: 50371249!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	


	readySemaphore := Semaphore new.  
	[totalSales := self totalSalesOf: anItem.readySemaphore signal.] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.  
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 02:57:21' prior: 50371271!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  |

	bookPerformance := Dictionary new.
	
	[|readySemaphore|
	readySemaphore := Semaphore new.  
	[totalSales := self totalSalesOf: anItem.readySemaphore signal.] fork.
	
	totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait. ]value. 
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 02:57:26'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 02:58:37' prior: 50334403!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	[|readySemaphore|
	readySemaphore := Semaphore new.  
	[totalSales := self totalSales.readySemaphore signal.] fork.
	totalMoney := self totalMoneyRaised.
	readySemaphore wait. ]value. 

	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 02:58:43'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 02:59:09' prior: 50371319!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	[|readySemaphore|
	readySemaphore := Semaphore new.  
	[totalSales := self totalSales.
	readySemaphore signal.] fork.
	totalMoney := self totalMoneyRaised.
	readySemaphore wait. ]value. 

	
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - performance' stamp: 'toto 11/13/2023 03:00:58'!
do: aBlock inParallelWith:anotherBlock
	! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - performance' stamp: 'toto 11/13/2023 03:01:31' prior: 50371365!
do: aBlock inParallelWith:anotherBlock
	|readySemaphore |
	readySemaphore := Semaphore new.  
	[aBlock value.readySemaphore signal.] fork.
	
	anotherBlock value.
	readySemaphore wait.! !
!TusLibrosSystemFacadeTest methodsFor: 'tests - performance' stamp: 'toto 11/13/2023 03:01:33' prior: 50371370!
do: aBlock inParallelWith:anotherBlock
	|readySemaphore |
	readySemaphore := Semaphore new.  
	[aBlock value.readySemaphore signal.] fork.
	anotherBlock value.
	readySemaphore wait.! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:02:16' prior: 50371293!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  |

	bookPerformance := Dictionary new.
	self do: [totalSales := self totalSalesOf: anItem] inParallelWith:[totalMoney := self totalMoneyRaisedBy: anItem.].
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:02:23' prior: 50371389!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  |

	bookPerformance := Dictionary new.
	self do: [totalSales := self totalSalesOf: anItem] inParallelWith:[totalMoney := self totalMoneyRaisedBy: anItem].
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:02:25'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:02:25'!
ERROR!

!methodRemoval: TusLibrosSystemFacadeTest #do:inParallelWith: stamp: 'toto 11/13/2023 03:02:59'!
do: aBlock inParallelWith:anotherBlock
	|readySemaphore |
	readySemaphore := Semaphore new.  
	[aBlock value.readySemaphore signal.] fork.
	anotherBlock value.
	readySemaphore wait.!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:03:09'!
ERROR!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:03:09'!
ERROR!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:03:16'!
do: aRenameMe1 inParallelWith: aRenameMe2 
	self shouldBeImplemented.! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:03:30' prior: 50371451!
do: aBlock inParallelWith: anotherBlock
	 
		[ | readySemaphore |aBlock value.readySemaphore signal.] fork.! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:03:40' prior: 50371457!
do: aBlock inParallelWith: anotherBlock
	 | readySemaphore |
	
		[ aBlock value.readySemaphore signal.] fork.! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:04:27' prior: 50371464!
do: aBlock inParallelWith: anotherBlock
	 | readySemaphore |
	

	readySemaphore := Semaphore new.  
	[ aBlock value.readySemaphore signal.] fork.
	readySemaphore wait.  
	anotherBlock value.
	
		! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:04:28' prior: 50371471!
do: aBlock inParallelWith: anotherBlock
	 | readySemaphore |

	readySemaphore := Semaphore new.  
	[ aBlock value.readySemaphore signal.] fork.
	readySemaphore wait.  
	anotherBlock value.
	
		! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'toto 11/13/2023 03:04:32'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:04:34'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:04:35'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:04:37'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:05:38' prior: 50371481!
do: aBlockToExecuteInParallel inParallelWith: anotherBlockToExecuteInParallel
	|readySemaphore |readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait
	
		! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:05:41' prior: 50371647!
do: aBlockToExecuteInParallel inParallelWith: anotherBlockToExecuteInParallel

	|readySemaphore |readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait
	
		! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:05:43' prior: 50371659!
do: aBlockToExecuteInParallel inParallelWith: anotherBlockToExecuteInParallel

	|readySemaphore |
	readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait
	
		! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:05:45' prior: 50371671!
do: aBlockToExecuteInParallel inParallelWith: anotherBlockToExecuteInParallel

	|readySemaphore |
	readySemaphore := Semaphore new.
	
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait
	
		! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:06:26' prior: 50371408!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  |

	bookPerformance := Dictionary new.
	self 
		do:[totalMoney := self totalMoneyRaisedBy: anItem.] 
		inParallelWith: [totalSales := self totalSalesOf: anItem].
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:07:01' prior: 50371695!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  |

	bookPerformance := Dictionary new.
	self
		do:[totalSales := self totalSalesOf: anItem] 
		inParallelWith: [totalMoney := self totalMoneyRaisedBy: anItem.].
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'toto 11/13/2023 03:07:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:07:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:07:08'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 03:08:01' prior: 50371344!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	self do:
		[totalSales := self totalSales.]
		inParallelWith:[totalMoney := self totalMoneyRaised.].
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 'toto 11/13/2023 03:08:05'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:08:06'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 'toto 11/13/2023 03:08:07'!
PASSED!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:12:27' prior: 50332074!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface asyncronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:13:54' prior: 50332087!
createCart


	
	 restInterface asincronicallyCreateCartFor: 'hernan' password: 'smalltalk' withResponseDo:[:newCartId|cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:14:35' prior: 50332096!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		currentSelectedCartContent := restInterface asyncronicallyListCart: cartId withResponseDo:[self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:15:18' prior: 50372014!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface asyncronicallyListCart: cartId withResponseDo:[:response| currentSelectedCartContent := response.self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:15:28' prior: 50371990!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asyncronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:15:35' prior: 50372004!
createCart


	
	 restInterface 
	asincronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
	withResponseDo:[:newCartId|cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:15:37' prior: 50372053!
createCart


	
	 restInterface 
		asincronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:15:46' prior: 50372063!
createCart


	
	 restInterface 
		asincronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:16:02' prior: 50372026!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asyncronicallyListCart: cartId 
			withResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:16:46'!
asyncronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:17:07'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 03:17:07' prior: 50372039!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].! !

!methodRemoval: TusLibrosClientRestInterface #asyncronicallyAdd:of:toCartIdentifiedAs:withResponseDo: stamp: 'toto 11/13/2023 03:17:07'!
asyncronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:17:12' prior: 50372073!
createCart


	
	 restInterface 
		asinchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:17:16' prior: 50372083!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:19:39' prior: 50372112!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| fieldDict resp |

	[fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:21:58' prior: 50372184!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| fieldDict resp |

	[fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:resp]
		ifFalse:[^self error: resp content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:22:53' prior: 50372201!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| resp |

	[resp:= [self add:quantity of: bookIsbn toCartIdentifiedAs:cartId]value.
		
	resp isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:resp]
		ifFalse:[^self error: resp content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:22:59' prior: 50372218!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| response |

	[response:= [self add:quantity of: bookIsbn toCartIdentifiedAs:cartId]value.
		
	response isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:response]
		ifFalse:[^self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:23:03' prior: 50372231!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| response |

	[response:= [self add:quantity of: bookIsbn toCartIdentifiedAs:cartId]value.	
	response isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:response]
		ifFalse:[^self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:23:12'!
asyncronicallyCreateCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:23:43'!
asyncronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock

	| response |

	[response:= [self createCartFor:aUser password:aPassword]value.	
	response isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:response]
		ifFalse:[^self error: response content]] fork.! !

!methodRemoval: TusLibrosClientRestInterface #asyncronicallyCreateCartFor:password: stamp: 'toto 11/13/2023 03:23:44'!
asyncronicallyCreateCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:23:51'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock

	| response |

	[response:= [self createCartFor:aUser password:aPassword]value.	
	response isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:response]
		ifFalse:[^self error: response content]] fork.! !

!methodRemoval: TusLibrosClientRestInterface #asyncronicallyCreateCartFor:password:withResponseDo: stamp: 'toto 11/13/2023 03:23:53'!
asyncronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock

	| response |

	[response:= [self createCartFor:aUser password:aPassword]value.	
	response isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:response]
		ifFalse:[^self error: response content]] fork.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:24:25' prior: 50372300!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock

	| response |

	[response:= [self createCartFor:aUser password:aPassword]value.	
	response isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:response]
		ifFalse:[^self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:24:50'!
asynchronicallyListCart: cartId withResponseDo:aBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:25:11' prior: 50372338!
asynchronicallyListCart: cartId withResponseDo:aBlock

	| response |

	[response:= [self listCart:cartId]value.	
	response isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:response]
		ifFalse:[^self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:25:16' prior: 50372353!
asynchronicallyListCart: cartId withResponseDo:aBlock

	| response |

	[response:= [self listCart:cartId]value.	
	response isSuccess 
		ifTrue:[aBlock value:response]
		ifFalse:[^self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:25:21' prior: 50372326!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock

	| response |

	[response:= [self createCartFor:aUser password:aPassword]value.	
	response isSuccess 
		ifTrue:[aBlock value:response]
		ifFalse:[^self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:25:40' prior: 50372245!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| response |

	[response:= [self add:quantity of: bookIsbn toCartIdentifiedAs:cartId]value.	
	response isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:response]
		ifFalse:[self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:25:49' prior: 50372387!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| response |

	[response:= [self add:quantity of: bookIsbn toCartIdentifiedAs:cartId]value.	
	response isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:response]
		ifFalse:[^self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:25:52' prior: 50372400!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	| response |

	[response:= [self add:quantity of: bookIsbn toCartIdentifiedAs:cartId]value.	
	^response isSuccess 
		ifTrue:[aBlock valueWithPossibleArgument:response]
		ifFalse:[self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:26:03' prior: 50372375!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock

	| response |

	[response:= [self createCartFor:aUser password:aPassword]value.	
	^response isSuccess 
		ifTrue:[aBlock value:response]
		ifFalse:[self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:26:07' prior: 50372364!
asynchronicallyListCart: cartId withResponseDo:aBlock

	| response |

	[response:= [self listCart:cartId]value.	
	^response isSuccess 
		ifTrue:[aBlock value:response]
		ifFalse:[self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:26:29' prior: 50372438!
asynchronicallyListCart: cartId withResponseDo:aBlock

	| response |

	[response:= [self listCart:cartId]value.	
	response isSuccess 
		ifTrue:[aBlock value:response]
		ifFalse:[self error: response content]] fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:27:22' prior: 50372449!
asynchronicallyListCart: cartId withResponseDo:aBlock
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:27:42'!
asynchronicallyDo: aBlock withResponseDo:anotherBlock
	| response |

	[response:= aBlock value.	
	response isSuccess 
		ifTrue:[anotherBlock value:response]
		ifFalse:[self error: response content]] fork.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:27:53' prior: 50372467!
asynchronicallyDo: aBlock withResponseDo:anotherBlock
	| response |

	[response:= aBlock value.	
	response isSuccess 
		ifTrue:[anotherBlock valueWithPossibleArgument: response]
		ifFalse:[self error: response content]] fork.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:28:11' prior: 50372426!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:28:34' prior: 50372413!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	self asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] withResponseDo:aBlock.! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:29:33' prior: 50372161!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:30:34' prior: 50372477!
asynchronicallyDo: aBlock withResponseDo:anotherBlock
	| response |

	[response:= aBlock value.	
	anotherBlock valueWithPossibleArgument: response]fork.
	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:33:44'!
asynchronicallyDo: aBlock withResponseDo:anotherBlock aThirdBlock: withFailureResponseDo 
	| response |

	[response:= aBlock value.	
	anotherBlock valueWithPossibleArgument: response]fork.
	! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 03:33:44' prior: 50372488!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock aThirdBlock: self halt.! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 03:33:44' prior: 50372497!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	self asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] withResponseDo:aBlock aThirdBlock: self halt.! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 03:33:44' prior: 50372460!
asynchronicallyListCart: cartId withResponseDo:aBlock
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock aThirdBlock: self halt.
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyDo:withResponseDo: stamp: 'toto 11/13/2023 03:33:44'!
asynchronicallyDo: aBlock withResponseDo:anotherBlock
	| response |

	[response:= aBlock value.	
	anotherBlock valueWithPossibleArgument: response]fork.
	!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:34:12'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock anotherBlock: withFailureResponseDo 

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock aThirdBlock: self halt.! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 03:34:13' prior: 50372510!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] anotherBlock: self halt.
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyCreateCartFor:password:withResponseDo: stamp: 'toto 11/13/2023 03:34:13'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock aThirdBlock: self halt.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:34:36'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock anotherBlock: withFailureResponseDo 

	self asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] withResponseDo:aBlock aThirdBlock: self halt.! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyAdd:of:toCartIdentifiedAs:withResponseDo: stamp: 'toto 11/13/2023 03:34:36'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock

	self asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] withResponseDo:aBlock aThirdBlock: self halt.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:35:02'!
asynchronicallyListCart: cartId withResponseDo:aBlock anotherBlock: withFailureDo 
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock aThirdBlock: self halt.
	! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 03:35:02' prior: 50372171!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] anotherBlock: self halt].! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyListCart:withResponseDo: stamp: 'toto 11/13/2023 03:35:02'!
asynchronicallyListCart: cartId withResponseDo:aBlock
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock aThirdBlock: self halt.
	!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:36:15' prior: 50331961!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[TusLibrosClientTestWindowModel triggerEvent: #serverError with: 'xd']! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:36:31' prior: 50372590!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] anotherBlock: [].
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:36:49' prior: 50372578!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock anotherBlock: withFailureResponseDo 

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock aThirdBlock: withFailureResponseDo .! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:37:20' prior: 50372611!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock anotherBlock: withFailureResponseDo 

	self asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] withResponseDo:aBlock aThirdBlock: withFailureResponseDo.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:37:34' prior: 50331946!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^TusLibrosClientTestWindowModel triggerEvent: #serverError with: 'xd']! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:37:39' prior: 50372667!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^TusLibrosClientTestWindowModel triggerEvent: #serverError with: 'xd']! !
!TusLibrosClientTestWindowModel methodsFor: 'initialization' stamp: 'toto 11/13/2023 03:38:29' prior: 50332107!
defaultCatalog 

	^Dictionary new
		at: 'GreenBook' put: 10*dollar;
		at: 'BlueBook' put: 15*dollar;
		at: 'MartinFierro' put: 350*peso;
		at: 'Not Pulished Book' put: 100*peso;
		yourself! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:39:14' prior: 50372129!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)] anotherBlock:[]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 03:39:48' prior: 50372644!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] anotherBlock: []].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 03:39:56' prior: 50372634!
asynchronicallyListCart: cartId withResponseDo:aBlock anotherBlock: withFailureDo 
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock aThirdBlock: withFailureDo .
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 13:45:25' prior: 50372738!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 'toto 11/13/2023 13:46:04'!
execute: aBlockToExecuteInParallel inParallelWith: anotherBlockToExecuteInParallel

	|readySemaphore |
	readySemaphore := Semaphore new.
	
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait
	
		! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 13:46:04' prior: 50371714!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales  |

	bookPerformance := Dictionary new.
	self
		execute:[totalSales := self totalSalesOf: anItem] 
		inParallelWith: [totalMoney := self totalMoneyRaisedBy: anItem.].
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 13:46:04' prior: 50371819!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	self execute:
		[totalSales := self totalSales.]
		inParallelWith:[totalMoney := self totalMoneyRaised.].
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!methodRemoval: TusLibrosSystemFacade #do:inParallelWith: stamp: 'toto 11/13/2023 13:46:05'!
do: aBlockToExecuteInParallel inParallelWith: anotherBlockToExecuteInParallel

	|readySemaphore |
	readySemaphore := Semaphore new.
	
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait
	
		!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 13:47:39'!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: withFailureResponseDo 
	| response |

	[response:= aBlock value.	
	anotherBlock valueWithPossibleArgument: response]fork.
	! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 13:47:39' prior: 50372697!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock anotherBlock: withFailureResponseDo 

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock withFailureResponseDo: withFailureResponseDo .! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 13:47:39' prior: 50372709!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock anotherBlock: withFailureResponseDo 

	self asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] withResponseDo:aBlock withFailureResponseDo: withFailureResponseDo.! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 13:47:39' prior: 50372796!
asynchronicallyListCart: cartId withResponseDo:aBlock anotherBlock: withFailureDo 
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock withFailureResponseDo: withFailureDo .
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyDo:withResponseDo:aThirdBlock: stamp: 'toto 11/13/2023 13:47:39'!
asynchronicallyDo: aBlock withResponseDo:anotherBlock aThirdBlock: withFailureResponseDo 
	| response |

	[response:= aBlock value.	
	anotherBlock valueWithPossibleArgument: response]fork.
	!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 13:47:46' prior: 50372884!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[response:= aBlock value.	
	anotherBlock valueWithPossibleArgument: response]fork.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 13:49:14' prior: 50372906!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock anotherBlock: withFailureResponseDo 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withResponseDo:aBlock 
		withFailureResponseDo: withFailureResponseDo.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 13:54:45' prior: 50372939!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: [aThirdBlock value:response]]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 13:56:14'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock withFailureResponseDo: withFailureResponseDo 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withResponseDo:aBlock 
		withFailureResponseDo: withFailureResponseDo.! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 13:56:14' prior: 50372767!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)] withFailureResponseDo:[]].! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyAdd:of:toCartIdentifiedAs:withResponseDo:anotherBlock: stamp: 'toto 11/13/2023 13:56:14'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock anotherBlock: withFailureResponseDo 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withResponseDo:aBlock 
		withFailureResponseDo: withFailureResponseDo.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 13:56:22' prior: 50372973!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock.! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 13:57:12' prior: 50372987!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)] withFailureResponseDo:[self triggerEvent:#bookAddedToCart withArguments:(Array with: 1 with: 2)]].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 13:58:02' prior: 50372721!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error:'x']! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 13:58:28' prior: 50373046!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 13:58:55' prior: 50372962!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: [aThirdBlock ]]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 13:59:01' prior: 50373077!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: aThirdBlock]fork.

	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 13:59:52' prior: 50373088!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: [aThirdBlock]]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:00:10' prior: 50373101!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: aThirdBlock]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:04:00' prior: 50373112!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: [aThirdBlock]]fork.

	! !

TusLibrosClientTestWindow reset!

----QUIT----(13 November 2023 14:04:39) CuisUniversity-5981.image priorSource: 11588161!

----STARTUP---- (13 November 2023 14:04:45) as /home/totorroto/Desktop/Portfolio/linux64/CuisUniversity-5981.image!


WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:07:41' prior: 50373123!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: [aThirdBlock]value]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:07:50' prior: 50373144!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: aThirdBlock]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 14:09:36' prior: 50373061!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 14:09:40' prior: 50372806!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 14:09:43' prior: 50331975!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:11:11' prior: 50373029!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo:[self triggerEvent:#bookAddedToCart withArguments:(Array with: 1 with: 2)]].! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:12:54' prior: 50373155!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: (aThirdBlock valueWithPossibleArgument: response)]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:13:44' prior: 50373228!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: (anotherBlock valueWithPossibleArgument: response)]fork.

	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:15:48' prior: 50373240!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: (aThirdBlock valueWithPossibleArgument: response)]fork.

	! !

WebServer reset!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:17:03' prior: 50373258!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: aThirdBlock value]fork.

	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:18:40' prior: 50373273!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: aThirdBlock]fork.

	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:18:48' prior: 50373211!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo:[]].! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:19:20' prior: 50373297!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:21:44' prior: 50373315!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo:[self triggerEvent: #serverError]].! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'toto 11/13/2023 14:22:16' prior: 50331856!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #serverError send: #informError to: self! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 14:22:28'!
informError

	cartIdsListMorph updateList
	! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 14:22:53' prior: 50373371!
informError

	self inform: 'Book not added to Cart '
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:27:26' prior: 50373333!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:signal | self triggerEvent: #serverError]].
		! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:28:21' prior: 50373286!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: (aThirdBlock valueWithPossibleArgument: response)]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:31:36' prior: 50373398!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
  | response |

  [[response:= aBlock value.
  anotherBlock valueWithPossibleArgument: response]on: Error do: [:signal | aThirdBlock valueWithPossibleArgument: signal]]fork.

	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:32:53'!
asynchronicallyListCart: cartId withResponseDo:aBlock withFailureResponseDo: withFailureDo 
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock withFailureResponseDo: withFailureDo .
	! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 14:32:53' prior: 50372782!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] withFailureResponseDo: []].! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyListCart:withResponseDo:anotherBlock: stamp: 'toto 11/13/2023 14:32:53'!
asynchronicallyListCart: cartId withResponseDo:aBlock anotherBlock: withFailureDo 
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock withFailureResponseDo: withFailureDo .
	!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:32:59' prior: 50373424!
asynchronicallyListCart: cartId withResponseDo:aBlock withFailureResponseDo: anotherBlock 
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock withFailureResponseDo: anotherBlock .
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:13'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock withFailureResponseDo: withFailureResponseDo 

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock withFailureResponseDo: withFailureResponseDo .! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 14:33:13' prior: 50372686!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] withFailureResponseDo: [].
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyCreateCartFor:password:withResponseDo:anotherBlock: stamp: 'toto 11/13/2023 14:33:14'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock anotherBlock: withFailureResponseDo 

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock withFailureResponseDo: withFailureResponseDo .!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:19' prior: 50373468!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock withFailureResponseDo: anotherBlock .! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:28' prior: 50373505!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self 
		asynchronicallyDo:[self createCartFor: aUser password: aPassword] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock .! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:34' prior: 50373459!
asynchronicallyListCart: cartId withResponseDo:aBlock withFailureResponseDo: anotherBlock 
	self 
		asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock withFailureResponseDo: anotherBlock .
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:37' prior: 50373528!
asynchronicallyListCart: cartId withResponseDo:aBlock withFailureResponseDo: anotherBlock 
	self 
		asynchronicallyDo:[self listCart:cartId] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock .
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:55' prior: 50373410!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: [:signal | aThirdBlock valueWithPossibleArgument: signal]]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:34:42' prior: 50373548!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[
		[response:= aBlock value.
		anotherBlock valueWithPossibleArgument: response]
			on: Error 
			do: [:signal | aThirdBlock valueWithPossibleArgument: signal]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:35:12' prior: 50373560!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 14:35:30' prior: 50373166!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:36:22' prior: 50373382!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:signal | self triggerEvent: #serverError withArguments:signal]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:36:33' prior: 50373481!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] 
		withFailureResponseDo: [].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:36:47' prior: 50373620!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] 
		withFailureResponseDo: [:signal | self triggerEvent: #serverError withArguments:signal].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:37:00' prior: 50373435!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]  			withFailureResponseDo: [:signal | self triggerEvent: #serverError withArguments:signal]].! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'toto 11/13/2023 14:38:46' prior: 50373349!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #serverError send: #informError: to: self! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 14:38:58'!
informError:signal

	self inform: 'Book not added to Cart '
	! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 14:39:04' prior: 50373685!
informError:signal

	self inform: signal
	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!

----STARTUP---- (13 November 2023 14:40:29) as /home/totorroto/Desktop/Portfolio/linux64/CuisUniversity-5981.image!

!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:07:41' prior: 50373123!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: [aThirdBlock]value]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:07:50' prior: 50373703!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: aThirdBlock]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 14:09:36' prior: 50373061!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 14:09:40' prior: 50372806!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 14:09:43' prior: 50331975!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:11:11' prior: 50373029!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo:[self triggerEvent:#bookAddedToCart withArguments:(Array with: 1 with: 2)]].! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:12:54' prior: 50373714!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: (aThirdBlock valueWithPossibleArgument: response)]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:13:44' prior: 50373787!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: (anotherBlock valueWithPossibleArgument: response)]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:15:48' prior: 50373799!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: (aThirdBlock valueWithPossibleArgument: response)]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:17:03' prior: 50373811!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: aThirdBlock value]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:18:40' prior: 50373823!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: aThirdBlock]fork.

	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:18:48' prior: 50373770!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo:[]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:19:20' prior: 50373845!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:21:44' prior: 50373860!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo:[self triggerEvent: #serverError]].! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'toto 11/13/2023 14:22:16' prior: 50331856!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #serverError send: #informError to: self! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 14:22:28'!
informError

	cartIdsListMorph updateList
	! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 14:22:53' prior: 50373916!
informError

	self inform: 'Book not added to Cart '
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:27:26' prior: 50373878!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:signal | self triggerEvent: #serverError]].
		! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:28:21' prior: 50373834!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: (aThirdBlock valueWithPossibleArgument: response)]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:31:36' prior: 50373943!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 
  | response |

  [[response:= aBlock value.
  anotherBlock valueWithPossibleArgument: response]on: Error do: [:signal | aThirdBlock valueWithPossibleArgument: signal]]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:32:53'!
asynchronicallyListCart: cartId withResponseDo:aBlock withFailureResponseDo: withFailureDo 
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock withFailureResponseDo: withFailureDo .
	! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 14:32:53' prior: 50372782!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId] withFailureResponseDo: []].! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyListCart:withResponseDo:anotherBlock: stamp: 'toto 11/13/2023 14:40:32'!
asynchronicallyListCart: cartId withResponseDo:aBlock anotherBlock: withFailureDo 
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock withFailureResponseDo: withFailureDo .
	!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:32:59' prior: 50373967!
asynchronicallyListCart: cartId withResponseDo:aBlock withFailureResponseDo: anotherBlock 
	self asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock withFailureResponseDo: anotherBlock .
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:13'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock withFailureResponseDo: withFailureResponseDo 

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock withFailureResponseDo: withFailureResponseDo .! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 14:33:13' prior: 50372686!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] withFailureResponseDo: [].
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyCreateCartFor:password:withResponseDo:anotherBlock: stamp: 'toto 11/13/2023 14:40:32'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock anotherBlock: withFailureResponseDo 

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock withFailureResponseDo: withFailureResponseDo .!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:19' prior: 50374011!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self asynchronicallyDo:[self createCartFor: aUser password: aPassword] withResponseDo:aBlock withFailureResponseDo: anotherBlock .! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:28' prior: 50374048!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self 
		asynchronicallyDo:[self createCartFor: aUser password: aPassword] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock .! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:34' prior: 50374002!
asynchronicallyListCart: cartId withResponseDo:aBlock withFailureResponseDo: anotherBlock 
	self 
		asynchronicallyDo:[self listCart:cartId] withResponseDo:aBlock withFailureResponseDo: anotherBlock .
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:37' prior: 50374071!
asynchronicallyListCart: cartId withResponseDo:aBlock withFailureResponseDo: anotherBlock 
	self 
		asynchronicallyDo:[self listCart:cartId] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock .
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:33:55' prior: 50373955!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	anotherBlock valueWithPossibleArgument: response]on: Error do: [:signal | aThirdBlock valueWithPossibleArgument: signal]]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:34:42' prior: 50374091!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[
		[response:= aBlock value.
		anotherBlock valueWithPossibleArgument: response]
			on: Error 
			do: [:signal | aThirdBlock valueWithPossibleArgument: signal]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:35:12' prior: 50374103!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 14:35:30' prior: 50373725!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:36:22' prior: 50373927!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:signal | self triggerEvent: #serverError withArguments:signal]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:36:33' prior: 50374024!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] 
		withFailureResponseDo: [].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:36:47' prior: 50374160!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] 
		withFailureResponseDo: [:signal | self triggerEvent: #serverError withArguments:signal].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:37:00' prior: 50373978!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]  			withFailureResponseDo: [:signal | self triggerEvent: #serverError withArguments:signal]].! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 'toto 11/13/2023 14:38:46' prior: 50373894!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #serverError send: #informError: to: self! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 14:38:58'!
informError:signal

	self inform: 'Book not added to Cart '
	! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 14:39:04' prior: 50374222!
informError:signal

	self inform: signal
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:41:28' prior: 50374143!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self triggerEvent: #serverError withArguments:errorDescription]].
		! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 14:41:44' prior: 50374228!
informError:errorDescription

	self inform: errorDescription
	! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 14:41:49' prior: 50374251!
informError:anErrorDescription

	self inform: anErrorDescription
	! !

!methodRemoval: TusLibrosClientTestWindow #informError stamp: 'toto 11/13/2023 14:41:51'!
informError

	self inform: 'Book not added to Cart '
	!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:42:20' prior: 50374171!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] 
		withFailureResponseDo: [:errorDescription | self triggerEvent: #serverError withArguments:errorDescription].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 14:42:30' prior: 50374184!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]  			withFailureResponseDo: [:errorDescription | self triggerEvent: #serverError withArguments:errorDescription]].! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:42:48' prior: 50374115!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: response]
	]fork.

	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow reset!

----QUIT----(13 November 2023 14:43:03) CuisUniversity-5981.image priorSource: 1327456!

----STARTUP---- (13 November 2023 14:43:49) as /home/totorroto/Desktop/Portfolio/linux64/CuisUniversity-5981.image!


TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:45:22' prior: 50374299!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock ]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:45:34' prior: 50374323!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock value:response]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:48:53' prior: 50374334!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock value:signal description ]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:49:05' prior: 50374346!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal description ]
	]fork.

	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!

----QUIT----(13 November 2023 14:54:07) CuisUniversity-5981.image priorSource: 1365201!

----STARTUP---- (13 November 2023 14:54:15) as /home/totorroto/Desktop/Portfolio/linux64/CuisUniversity-5981.image!


TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:56:49' prior: 50374358!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock ]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:49:05' prior: 50374383!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal description ]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 14:58:44' prior: 50374394!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal messageText ]
	]fork.

	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:00:50' prior: 50374407!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | self halt.aThirdBlock valueWithPossibleArgument: signal ]
	]fork.

	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!

signal!

signal description!

signal messageText!

signal printString!

signal!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 15:04:04' prior: 50374127!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[self halt.^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 15:04:20' prior: 50374441!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	self halt.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!

resp!

resp!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 15:05:20' prior: 50374457!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	self halt.
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'toto 11/13/2023 15:05:27' prior: 50374476!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:05:34' prior: 50374423!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal ]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:05:37' prior: 50374508!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal messageText ]
	]fork.

	! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:07:18' prior: 50374233!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self triggerEvent: #serverError withArguments: errorDescription]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:07:29' prior: 50374536!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self triggerEvent: #serverError withArguments: errorDescription]].
		! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 15:07:41' prior: 50374257!
informError:anErrorDescription
	self halt.
	self inform: anErrorDescription
	! !

anErrorDescription!

errorDescription!
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 15:08:33' prior: 50374572!
informError:anErrorDescription
	
	self inform: anErrorDescription
	! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 15:08:58' prior: 50374579!
informError:anErrorDescription
	self halt.
	self inform: anErrorDescription
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:11:02' prior: 50374554!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self halt.self triggerEvent: #serverError withArguments: errorDescription]].
		! !

WebServer reset.!

WebServer reset.!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:13:03' prior: 50374592!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self halt.self triggerEvent: #serverError withArguments: 'un string de error']].
		! !

errorDescription!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:14:07' prior: 50374614!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self triggerEvent: #serverError withArguments: 'un string de error']].
		! !

anErrorDescription!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:15:42' prior: 50374633!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self triggerEvent: #serverError withArguments:(Array with: errorDescription )]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:15:44' prior: 50374652!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self triggerEvent: #serverError withArguments:(Array with: errorDescription)]].
		! !

anErrorDescription!
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 'toto 11/13/2023 15:16:03' prior: 50374585!
informError:anErrorDescription
	
	self inform: anErrorDescription
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:17:53'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccesResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock.! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 15:17:53' prior: 50374671!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withSuccesResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self triggerEvent: #serverError withArguments:(Array with: errorDescription)]].
		! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyAdd:of:toCartIdentifiedAs:withResponseDo:withFailureResponseDo: stamp: 'toto 11/13/2023 15:17:53'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock.!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:18:00'!
asynchronicallyCreateCartFor: aUser password: aPassword withSuccessResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self 
		asynchronicallyDo:[self createCartFor: aUser password: aPassword] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock .! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 15:18:00' prior: 50374268!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withSuccessResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] 
		withFailureResponseDo: [:errorDescription | self triggerEvent: #serverError withArguments:errorDescription].
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyCreateCartFor:password:withResponseDo:withFailureResponseDo: stamp: 'toto 11/13/2023 15:18:00'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self 
		asynchronicallyDo:[self createCartFor: aUser password: aPassword] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock .!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:18:07'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccessResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock.! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 15:18:07' prior: 50374708!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self triggerEvent: #serverError withArguments:(Array with: errorDescription)]].
		! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyAdd:of:toCartIdentifiedAs:withSuccesResponseDo:withFailureResponseDo: stamp: 'toto 11/13/2023 15:18:07'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccesResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withResponseDo:aBlock 
		withFailureResponseDo: anotherBlock.!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:18:14'!
asynchronicallyDo: aBlock withSuccessResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal messageText ]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 15:18:14' prior: 50374740!
asynchronicallyCreateCartFor: aUser password: aPassword withSuccessResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self 
		asynchronicallyDo:[self createCartFor: aUser password: aPassword] 
		withSuccessResponseDo:aBlock 
		withFailureResponseDo: anotherBlock .! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 15:18:14' prior: 50374778!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccessResponseDo:aBlock withFailureResponseDo: anotherBlock 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withSuccessResponseDo:aBlock 
		withFailureResponseDo: anotherBlock.! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 15:18:14' prior: 50374081!
asynchronicallyListCart: cartId withResponseDo:aBlock withFailureResponseDo: anotherBlock 
	self 
		asynchronicallyDo:[self listCart:cartId] 
		withSuccessResponseDo:aBlock 
		withFailureResponseDo: anotherBlock .
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyDo:withResponseDo:withFailureResponseDo: stamp: 'toto 11/13/2023 15:18:14'!
asynchronicallyDo: aBlock withResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlock value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal messageText ]
	]fork.

	!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:18:22'!
asynchronicallyListCart: cartId withSuccessResponseDo:aBlock withFailureResponseDo: anotherBlock 
	self 
		asynchronicallyDo:[self listCart:cartId] 
		withSuccessResponseDo:aBlock 
		withFailureResponseDo: anotherBlock .
	! !
!TusLibrosClientTestWindowModel methodsFor: 'as yet unclassified' stamp: 'toto 11/13/2023 15:18:22' prior: 50374282!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withSuccessResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]  			withFailureResponseDo: [:errorDescription | self triggerEvent: #serverError withArguments:errorDescription]].! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyListCart:withResponseDo:withFailureResponseDo: stamp: 'toto 11/13/2023 15:18:22'!
asynchronicallyListCart: cartId withResponseDo:aBlock withFailureResponseDo: anotherBlock 
	self 
		asynchronicallyDo:[self listCart:cartId] 
		withSuccessResponseDo:aBlock 
		withFailureResponseDo: anotherBlock .
	!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:55:46' prior: 50374752!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withSuccessResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] 
		withFailureResponseDo: [:errorDescription | self triggerEvent: #serverError withArguments:(Array with: errorDescription)].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:55:55' prior: 50374896!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withSuccessResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]  			withFailureResponseDo: [:errorDescription | self triggerEvent: #serverError withArguments:(Array with: errorDescription)]].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:56:55' prior: 50374791!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  			withFailureResponseDo: [:errorDescription| self triggerEvent: #serverError with:errorDescription]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:57:07' prior: 50374925!
createCart


	
	 restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withSuccessResponseDo:[:newCartId|				cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] 
		withFailureResponseDo: [:errorDescription | self triggerEvent: #serverError with: errorDescription].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 'toto 11/13/2023 15:57:15' prior: 50374940!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		 restInterface 
			asynchronicallyListCart: cartId 
			withSuccessResponseDo:[:response| 						currentSelectedCartContent := response.
									self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId]  			withFailureResponseDo: [:errorDescription | self triggerEvent: #serverError with: errorDescription]].! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:58:17' prior: 50374823!
asynchronicallyDo: aBlockToExecute withSuccessResponseDo:anotherBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlockToExecute value.
	  anotherBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal messageText ]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:58:27' prior: 50375007!
asynchronicallyDo: aBlockToExecute withSuccessResponseDo:aSuccessBlock withFailureResponseDo: aThirdBlock 

	| response |

	[[response:= aBlockToExecute value.
	  aSuccessBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aThirdBlock valueWithPossibleArgument: signal messageText ]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:58:38' prior: 50375021!
asynchronicallyDo: aBlockToExecute withSuccessResponseDo:aSuccessBlock withFailureResponseDo: aFailureHandlerBlock 

	| response |

	[[response:= aBlockToExecute value.
	  aSuccessBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aFailureHandlerBlock valueWithPossibleArgument: signal messageText ]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:58:46' prior: 50375035!
asynchronicallyDo: aBlockToExecute withSuccessResponseDo:aSuccessHandlerBlock withFailureResponseDo: aFailureHandlerBlock 

	| response |

	[[response:= aBlockToExecute value.
	  aSuccessHandlerBlock valueWithPossibleArgument: response]
	  	on: Error 
		do: [:signal | aFailureHandlerBlock valueWithPossibleArgument: signal messageText ]
	]fork.

	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:59:10' prior: 50374885!
asynchronicallyListCart: cartId withSuccessResponseDo:aSuccesHandlerBlock withFailureResponseDo: anotherBlock 
	self 
		asynchronicallyDo:[self listCart:cartId] 
		withSuccessResponseDo:aSuccesHandlerBlock 
		withFailureResponseDo: anotherBlock .
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:59:18' prior: 50375064!
asynchronicallyListCart: cartId withSuccessResponseDo:aSuccesHandlerBlock withFailureResponseDo: aFailureHandlerBlock 
	self 
		asynchronicallyDo:[self listCart:cartId] 
		withSuccessResponseDo:aSuccesHandlerBlock 
		withFailureResponseDo: aFailureHandlerBlock .
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:59:27' prior: 50374836!
asynchronicallyCreateCartFor: aUser password: aPassword withSuccessResponseDo:aSuccessHandlerBlock withFailureResponseDo: anotherBlock 

	self 
		asynchronicallyDo:[self createCartFor: aUser password: aPassword] 
		withSuccessResponseDo:aSuccessHandlerBlock 
		withFailureResponseDo: anotherBlock .! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:59:35' prior: 50375088!
asynchronicallyCreateCartFor: aUser password: aPassword withSuccessResponseDo:aSuccessHandlerBlock withFailureResponseDo: aFailureHandlerBlock 

	self 
		asynchronicallyDo:[self createCartFor: aUser password: aPassword] 
		withSuccessResponseDo:aSuccessHandlerBlock 
		withFailureResponseDo: aFailureHandlerBlock .! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:59:49' prior: 50374849!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccessResponseDo:aSuccessHandlerBlock withFailureResponseDo: anotherBlock 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withSuccessResponseDo:aSuccessHandlerBlock 
		withFailureResponseDo: anotherBlock.! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 'toto 11/13/2023 15:59:54' prior: 50375115!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccessResponseDo:aSuccessHandlerBlock withFailureResponseDo: aFailureHandlerBlock 

	self
		asynchronicallyDo:[self add: quantity of: bookIsbn toCartIdentifiedAs: cartId] 
		withSuccessResponseDo:aSuccessHandlerBlock 
		withFailureResponseDo: aFailureHandlerBlock.! !

----QUIT----(13 November 2023 16:00:51) CuisUniversity-5981.image priorSource: 1367099!