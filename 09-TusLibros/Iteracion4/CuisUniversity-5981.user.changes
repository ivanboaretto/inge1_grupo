

----STARTUP---- (7 November 2023 02:31:28) as /home/totorroto/Desktop/Libros/linux64/CuisUniversity-5981.image!


!classRemoval: #CreditCard stamp: 's 11/7/2023 02:31:42'!
Object subclass: #CreditCard
	instanceVariableNames: 'monthOfYearOfExpiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 's 11/7/2023 02:31:42'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard pricedCatalog alreadyCheckOutItems merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 's 11/7/2023 02:31:42'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreTest stamp: 's 11/7/2023 02:31:42'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'merchantProcessorProcedure'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/totorroto/Desktop/Libros/TusLibros.st----!

----QUIT----(7 November 2023 02:32:05) CuisUniversity-5981.image priorSource: 164921!

----STARTUP---- (8 November 2023 22:48:49) as /home/totorroto/Desktop/Libros/linux64/CuisUniversity-5981.image!


----End fileIn of /home/totorroto/Desktop/Libros/TusLibros.st----!

!classRemoval: #StoreTestObjectsFactory stamp: 's 11/8/2023 22:51:01'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreSystem stamp: 's 11/8/2023 22:51:02'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem cartIdGenerator catalog cartsIds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 's 11/8/2023 22:51:02'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #IdGenerator stamp: 's 11/8/2023 22:51:03'!
Object subclass: #IdGenerator
	instanceVariableNames: 'nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 's 11/8/2023 22:51:03'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 's 11/8/2023 22:51:03'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 's 11/8/2023 22:51:04'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreSystemTest stamp: 's 11/8/2023 22:51:04'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem cartIdGenerator storeTestObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 's 11/8/2023 22:51:04'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 's 11/8/2023 22:51:05'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/totorroto/Desktop/Libros/TusLibros.st----!

!classRemoval: #StoreTestObjectsFactory stamp: 's 11/8/2023 22:51:21'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreSystem stamp: 's 11/8/2023 22:51:21'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem cartIdGenerator catalog cartsIds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 's 11/8/2023 22:51:22'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #IdGenerator stamp: 's 11/8/2023 22:51:22'!
Object subclass: #IdGenerator
	instanceVariableNames: 'nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 's 11/8/2023 22:51:22'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 's 11/8/2023 22:51:23'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 's 11/8/2023 22:51:23'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreSystemTest stamp: 's 11/8/2023 22:51:23'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem cartIdGenerator storeTestObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 's 11/8/2023 22:51:24'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 's 11/8/2023 22:51:24'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/totorroto/Desktop/Libros/TusLibros.st----!
!StoreTestObjectsFactory methodsFor: 'items' stamp: 's 11/8/2023 22:54:00' prior: 50335178!
anotherItemSellByTheStorePrice
	^200! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 's 11/8/2023 22:54:04' prior: 50335182!
itemNotSellByTheStore
	
	^'invalidBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 's 11/8/2023 22:54:08' prior: 50335187!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestObjectsFactory methodsFor: 'items' stamp: 's 11/8/2023 22:54:11' prior: 50335191!
itemSellByTheStorePrice
	
	^10! !
!StoreSystemTest methodsFor: 'support' stamp: 's 11/8/2023 22:54:25' prior: 50334789!
authenticateUser: anUserId withPassword: aPassword 
	authenticationProcedure value
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 22:54:30' prior: 50334660!
test01CreateCartWithUnregisteredUser
	
	
	authenticationProcedure:=[self error: 'Invalid username'].

	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Invalid username'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 22:54:33' prior: 50334673!
test02CreateCartWithWrongPassword
	
	
	authenticationProcedure:= [self error: 'Wrong password'].
	
	
	self 
		should: [storeSystem createCartForUserID:'Pedro' withPassword:'pass'. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = 'Wrong password'.]! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 22:54:36' prior: 50334686!
test03CreateOneCart
	
	| cartId cartItems |
	authenticationProcedure:= [].
	
	cartId:= storeSystem createCartForUserID:'Pedro' withPassword:'pass'. 
	
	cartItems:= storeSystem listCart: cartId.
	
	self assert: cartItems isEmpty.
	^cartId! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 22:54:41' prior: 50334697!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: cartIdGenerator lastAssignedCartId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 22:54:44' prior: 50334709!
test05CanNotAddItemToInvalidCartId
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: 200. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 22:54:47' prior: 50334721!
test06CanNotAddInvalidItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 22:54:49' prior: 50334740!
test08CanListAddedItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	storeSystem add: 2 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemSellByTheStore toCart: cartId.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  anotherItemSellByTheStore toCart: cartId.
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartItems equals:(Dictionary new at: storeTestObjectsFactory itemSellByTheStore put:3; at: storeTestObjectsFactory anotherItemSellByTheStore put: 1;yourself).
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 22:54:53' prior: 50334762!
test09CanNotCheckoutUnregisteredCart
	
	self 
		should: [storeSystem checkoutCart: 200 payingWith: storeTestObjectsFactory notExpiredCreditCard . ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText ='invalid cartId'].
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 22:54:56' prior: 50334774!
test10CanCheckout
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: cartIdGenerator lastAssignedCartId.
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 22:55:13'!
test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !

!methodRemoval: StoreSystemTest #test06CanNotAddInvalidItems stamp: 's 11/8/2023 22:55:13'!
test06CanNotAddInvalidItems
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: cartIdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	!

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 's 11/8/2023 22:56:17'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem IdGenerator storeTestObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 's 11/8/2023 22:56:17' prior: 50335298!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: IdGenerator lastAssignedCartId.
	self assert: cartItems isEmpty.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 's 11/8/2023 22:56:17' prior: 50335389!
test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: IdGenerator lastAssignedCartId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 's 11/8/2023 22:56:17' prior: 50334795 overrides: 16961394!
setUp
	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	IdGenerator:= IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 's 11/8/2023 22:56:17' prior: 50335375!
test10CanCheckout
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: IdGenerator lastAssignedCartId.
	
	
	
	

	
	! !
!IdGenerator methodsFor: 'queries' stamp: 's 11/8/2023 22:56:24'!
lastAssignedId
	^nextId -1.! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 's 11/8/2023 22:56:25' prior: 50335450!
test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: IdGenerator lastAssignedId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 's 11/8/2023 22:56:25' prior: 50335482!
test10CanCheckout
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: IdGenerator lastAssignedId.
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'as yet unclassified' stamp: 's 11/8/2023 22:56:25' prior: 50335437!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: IdGenerator lastAssignedId.
	self assert: cartItems isEmpty.! !

!methodRemoval: IdGenerator #lastAssignedCartId stamp: 's 11/8/2023 22:56:25'!
lastAssignedCartId
	^nextId -1.!
!IdGenerator methodsFor: 'queries' stamp: 's 11/8/2023 22:56:44' prior: 50335496!
lastAssignedId
	^nextId -1.! !
!IdGenerator methodsFor: 'queries' stamp: 's 11/8/2023 22:56:47' prior: 50335041!
nextId
	nextId:= nextId+1.
	^nextId-1.! !
!IdGenerator methodsFor: 'initialize' stamp: 's 11/8/2023 22:56:53' prior: 50335037 overrides: 16920235!
initialize
	nextId:= 1.! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/8/2023 22:57:07' prior: 50335095!
add: aQuantity ofBookISBN: anItem toCart: cartId 
	cartsIds at:cartId 
		ifPresent:[:cart| cart add:aQuantity of: anItem]
		ifAbsent:[self error: 'invalid cartId'].
		
	
	
	! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/8/2023 22:57:10' prior: 50335103!
checkoutCart: aCartId payingWith: aCreditCard 
	self error: 'invalid cartId'.! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/8/2023 22:57:14' prior: 50335108!
createCartForUserID: anUserId withPassword: aPassword 
	| cart cartId |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartId:=cartIdGenerator nextId.
	cartsIds at: cartId put:cart.
	
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/8/2023 22:57:17' prior: 50335119!
listCart: cartId 
	| cartItems |
	cartItems:= Dictionary new.
	cartsIds at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent:[:quantity | cartItems at: item put: (quantity + 1)]]].
	^cartItems
		! !
!StoreSystem methodsFor: 'initialization' stamp: 's 11/8/2023 22:57:21' prior: 50335131!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	authenticationSystem := anAuthenticationSystem.
	cartIdGenerator:= anIdGenerator.
	cartsIds := Dictionary new.
	catalog := aCatalog.! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 23:01:09'!
test11ListPurchasesOfNewCart
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: IdGenerator lastAssignedId.
	
	
	
	

	
	! !

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 's 11/8/2023 23:02:11'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem IdGenerator storeTestObjectsFactory dic'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 23:02:24' prior: 50335614!
test11ListPurchasesOfNewCart
	| cartId |
	cartId:= self test03CreateOneCart.
	dic := storeSystem listPurchasesOf: cartId withPassword: 'pass'.
	
	
	
	
	
	
	

	
	! !

TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem IdGenerator storeTestObjectsFactory '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 's 11/8/2023 23:02:46'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem IdGenerator storeTestObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 23:02:56' prior: 50335638!
test11ListPurchasesOfNewCart
	| cartId dict |
	cartId:= self test03CreateOneCart.
	dict := storeSystem listPurchasesOf: cartId withPassword: 'pass'.
	
	
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 23:58:22' prior: 50335662!
test11ListPurchasesOfNewCart
	| cartId arr |
	cartId:= self test03CreateOneCart.
	arr := storeSystem listPurchasesOf: cartId withPassword: 'pass'.
	
	self assert: arr equals: {0}.
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 23:58:36' prior: 50335670!
test11ListPurchasesOfNewCart
	| cartId arr lisPurchases listPurchases |
	cartId:= self test03CreateOneCart.
	listPurchases := storeSystem listPurchasesOf: cartId withPassword: 'pass'.
	
	self assert: lisPurchases equals: {0}.
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 23:58:44' prior: 50335679!
test11ListPurchasesOfNewCart
	| cartId listPurchases |
	cartId:= self test03CreateOneCart.
	listPurchases := storeSystem listPurchasesOf: cartId withPassword: 'pass'.
	
	self assert: listPurchases equals: {0}.
	
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/8/2023 23:58:57' prior: 50335690!
test11ListPurchasesOfNewCart
	| cartId listPurchases |
	cartId:= self test03CreateOneCart.
	"listPurchases := storeSystem listPurchasesOf: cartId withPassword: 'pass'."
	
	self assert: listPurchases equals: {0}.
	
	
	
	
	

	
	! !

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 's 11/8/2023 23:59:46'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem idGenerator catalog cartsIds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'as yet unclassified' stamp: 's 11/8/2023 23:59:46' prior: 50335580!
createCartForUserID: anUserId withPassword: aPassword 
	| cart cartId |
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartId:=idGenerator nextId.
	cartsIds at: cartId put:cart.
	
	^cartId.
	! !
!StoreSystem methodsFor: 'as yet unclassified' stamp: 's 11/8/2023 23:59:46' prior: 50335603!
initializeAuthenticatingUsersWith: anAuthenticationSystem generatingCartIdUsing: anIdGenerator withCatalog: aCatalog   
	
	authenticationSystem := anAuthenticationSystem.
	idGenerator:= anIdGenerator.
	cartsIds := Dictionary new.
	catalog := aCatalog.! !

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 's 11/9/2023 00:00:09'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem IdGenerator storeTestObjectsFactory idGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:00:08' prior: 50335471 overrides: 16961394!
setUp
	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	idGenerator:= IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:00:18' prior: 50335752 overrides: 16961394!
setUp
	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	idGenerator:= IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !

TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem  storeTestObjectsFactory idGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreSystemTest category: 'TusLibros' stamp: 's 11/9/2023 00:00:52'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem storeTestObjectsFactory idGenerator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:00:54'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 's 11/9/2023 00:00:54'!
ERROR!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR stamp: 's 11/9/2023 00:00:54'!
ERROR!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 's 11/9/2023 00:00:54'!
ERROR!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 's 11/9/2023 00:00:54'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:00:54'!
ERROR!

!testRun: #StoreSystemTest #test11ListPurchasesOfNewCart stamp: 's 11/9/2023 00:00:54'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:00:55'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 's 11/9/2023 00:01:11'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:01:11'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 's 11/9/2023 00:01:12'!
ERROR!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 's 11/9/2023 00:01:12'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR stamp: 's 11/9/2023 00:01:12'!
ERROR!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 's 11/9/2023 00:01:12'!
ERROR!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 's 11/9/2023 00:01:12'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:01:12'!
ERROR!

!testRun: #StoreSystemTest #test11ListPurchasesOfNewCart stamp: 's 11/9/2023 00:01:12'!
ERROR!

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 's 11/9/2023 00:01:14'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 's 11/9/2023 00:01:14'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:01:14'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 's 11/9/2023 00:01:14'!
ERROR!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 's 11/9/2023 00:01:14'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR stamp: 's 11/9/2023 00:01:14'!
ERROR!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 's 11/9/2023 00:01:14'!
ERROR!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 's 11/9/2023 00:01:14'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:01:14'!
ERROR!

!testRun: #StoreSystemTest #test11ListPurchasesOfNewCart stamp: 's 11/9/2023 00:01:14'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:01:15'!
ERROR!
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:01:47' prior: 50335764 overrides: 16961394!
setUp
	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	idGenerator := IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 's 11/9/2023 00:01:48'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 's 11/9/2023 00:01:48'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:01:48'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 's 11/9/2023 00:01:48'!
ERROR!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 's 11/9/2023 00:01:48'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR stamp: 's 11/9/2023 00:01:48'!
ERROR!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 's 11/9/2023 00:01:48'!
ERROR!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 's 11/9/2023 00:01:48'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:01:48'!
ERROR!

!testRun: #StoreSystemTest #test11ListPurchasesOfNewCart stamp: 's 11/9/2023 00:01:48'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:01:50'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:01:59'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:02:03'!
ERROR!

idGenerator!
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:02:37' prior: 50335978 overrides: 16961394!
setUp
	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	idGenerator := IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:02:39' prior: 50336029 overrides: 16961394!
setUp

	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	idGenerator := IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 's 11/9/2023 00:02:43'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 's 11/9/2023 00:02:43'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:02:43'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 's 11/9/2023 00:02:43'!
ERROR!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 's 11/9/2023 00:02:43'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR stamp: 's 11/9/2023 00:02:43'!
ERROR!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 's 11/9/2023 00:02:43'!
ERROR!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 's 11/9/2023 00:02:43'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:02:43'!
ERROR!

!testRun: #StoreSystemTest #test11ListPurchasesOfNewCart stamp: 's 11/9/2023 00:02:43'!
ERROR!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:02:45'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 's 11/9/2023 00:03:02'!
ERROR!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR stamp: 's 11/9/2023 00:03:02'!
ERROR!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:03:03'!
ERROR!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 's 11/9/2023 00:03:05'!
ERROR!
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/9/2023 00:03:59' prior: 50335536!
test04CreateMoreOneCart
	
	|  cartId cartItems |
	
	self test03CreateOneCart.
	
	cartId:= storeSystem createCartForUserID:'Juan' withPassword:'pass2'. 
	
	cartItems:= storeSystem listCart: cartId.
	self assert: cartId equals: idGenerator lastAssignedId.
	self assert: cartItems isEmpty.! !

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 's 11/9/2023 00:04:00'!
ERROR!

idGenerator!
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/9/2023 00:04:53' prior: 50335521!
test10CanCheckout
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId.
	
	
	
	

	
	! !
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/9/2023 00:05:03' prior: 50335501!
test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR
	
	|  cartId cartItems |
	
	cartId:=self test03CreateOneCart.
	
	self 
		should: [storeSystem add: 1 ofBookISBN: storeTestObjectsFactory  itemNotSellByTheStore toCart: cartId. ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cart invalidItemErrorMessage .
			cartItems:= storeSystem listCart: cartId.
			self assert: cartId equals: idGenerator lastAssignedId.
			self assert: cartItems isEmpty.].
	
	! !
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:05:32' prior: 50336041 overrides: 16961394!
setUp

	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	idGenerator := IdGenerator  new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:05:36' prior: 50336147 overrides: 16961394!
setUp

	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	idGenerator := IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:05:41' prior: 50336159 overrides: 16961394!
setUp

	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	! !
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:05:43' prior: 50336171 overrides: 16961394!
setUp

	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	
	idGenerator := IdGenerator new.
	! !
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:05:46' prior: 50336182 overrides: 16961394!
setUp

	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	idGenerator := IdGenerator new.
	! !
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:05:52' prior: 50336194 overrides: 16961394!
setUp

	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	idGenerator := IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( IdGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	
	! !
!StoreSystemTest methodsFor: 'running' stamp: 's 11/9/2023 00:05:54' prior: 50336206 overrides: 16961394!
setUp

	storeTestObjectsFactory:= StoreTestObjectsFactory new.
	idGenerator := IdGenerator new.
	storeSystem:= StoreSystem authenticatingUsersWith: self generatingCartIdUsing:( idGenerator ) withCatalog: storeTestObjectsFactory defaultCatalog .
	
	! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 's 11/9/2023 00:05:55'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 's 11/9/2023 00:05:55'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:05:55'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 's 11/9/2023 00:05:55'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 's 11/9/2023 00:05:55'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR stamp: 's 11/9/2023 00:05:55'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 's 11/9/2023 00:05:55'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 's 11/9/2023 00:05:55'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:05:55'!
ERROR!

!testRun: #StoreSystemTest #test11ListPurchasesOfNewCart stamp: 's 11/9/2023 00:05:55'!
FAILURE!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:05:57'!
ERROR!
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/9/2023 00:06:17'!
test200ListPurchasesOfNewCart
	| cartId listPurchases |
	cartId:= self test03CreateOneCart.
	"listPurchases := storeSystem listPurchasesOf: cartId withPassword: 'pass'."
	
	self assert: listPurchases equals: {0}.
	
	
	
	
	

	
	! !

!methodRemoval: StoreSystemTest #test11ListPurchasesOfNewCart stamp: 's 11/9/2023 00:06:17'!
test11ListPurchasesOfNewCart
	| cartId listPurchases |
	cartId:= self test03CreateOneCart.
	"listPurchases := storeSystem listPurchasesOf: cartId withPassword: 'pass'."
	
	self assert: listPurchases equals: {0}.
	
	
	
	
	

	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/9/2023 00:06:35'!
test10CanNotCheckoutInvalidCart
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId.
	
	
	
	

	
	! !

!methodRemoval: StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:06:35'!
test10CanCheckout
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId.
	
	
	
	

	
	!
!StoreSystemTest methodsFor: 'tests' stamp: 's 11/9/2023 00:06:54'!
test10CanCheckout
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId.
	
	
	
	

	
	! !

!methodRemoval: StoreSystemTest #test10CanNotCheckoutInvalidCart stamp: 's 11/9/2023 00:06:54'!
test10CanNotCheckoutInvalidCart
	| cartId transactionId |
	cartId:= self test03CreateOneCart.
	storeSystem add: 1 ofBookISBN: storeTestObjectsFactory itemSellByTheStore toCart: cartId.
	
	transactionId := storeSystem checkoutCart: cartId payingWith: storeTestObjectsFactory notExpiredCreditCard.
	
	self assert: transactionId equals: idGenerator lastAssignedId.
	
	
	
	

	
	!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:06:57'!
ERROR!
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:07:39' prior: 50335574!
checkoutCart: aCartId payingWith: aCreditCard
	(cartsIds includes:aCartId) ifFalse:[self error: 'invalid cartId'.].
	! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:08:43' prior: 50336342!
checkoutCart: aCartId payingWith: aCreditCard
	
	cartsIds at:aCartId 
		ifPresent:[:cart| ]
		ifAbsent:[self error: 'invalid cartId'].
	! !

!testRun: #StoreSystemTest #test01CreateCartWithUnregisteredUser stamp: 's 11/9/2023 00:08:46'!
PASSED!

!testRun: #StoreSystemTest #test02CreateCartWithWrongPassword stamp: 's 11/9/2023 00:08:46'!
PASSED!

!testRun: #StoreSystemTest #test03CreateOneCart stamp: 's 11/9/2023 00:08:46'!
PASSED!

!testRun: #StoreSystemTest #test04CreateMoreOneCart stamp: 's 11/9/2023 00:08:46'!
PASSED!

!testRun: #StoreSystemTest #test05CanNotAddItemToInvalidCartId stamp: 's 11/9/2023 00:08:46'!
PASSED!

!testRun: #StoreSystemTest #test06CanNotAddInvalidItemsESTECREOQUENOHAYQUETESTEAR stamp: 's 11/9/2023 00:08:46'!
PASSED!

!testRun: #StoreSystemTest #test08CanListAddedItems stamp: 's 11/9/2023 00:08:46'!
PASSED!

!testRun: #StoreSystemTest #test09CanNotCheckoutUnregisteredCart stamp: 's 11/9/2023 00:08:46'!
PASSED!

!testRun: #StoreSystemTest #test10CanCheckout stamp: 's 11/9/2023 00:08:46'!
FAILURE!

!testRun: #StoreSystemTest #test200ListPurchasesOfNewCart stamp: 's 11/9/2023 00:08:46'!
FAILURE!
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:09:01' prior: 50335591!
listCart: cartId 
"Esto esta feo"	
	| cartItems |
	cartItems:= Dictionary new.
	cartsIds at:cartId ifPresent:[:cart| cart withItemsDo: [:item| 
			cartItems at: item ifAbsentPut: 0.
			cartItems at: item ifPresent:[:quantity | cartItems at: item put: (quantity + 1)]]].
	^cartItems
		! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:09:05' prior: 50335719!
createCartForUserID: anUserId withPassword: aPassword 
	| cart cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartId:=idGenerator nextId.
	cartsIds at: cartId put:cart.
	
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:09:11' prior: 50336400!
createCartForUserID: anUserId withPassword: aPassword 
	| cart cartId |
	
	authenticationSystem authenticateUser: anUserId withPassword:aPassword.
	cart := Cart acceptingItemsOf: catalog.
	cartId:=idGenerator nextId.
	cartsIds at: cartId put:cart.
	^cartId.
	! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:11:11' prior: 50336349!
checkoutCart: aCartId payingWith: aCreditCard
	
	cartsIds at:aCartId 
		ifPresent:[:cart|  ]
		ifAbsent:[self error: 'invalid cartId'].
	! !
!CashierTest methodsFor: 'tests' stamp: 's 11/9/2023 00:11:26' prior: 50334578!
test05CashierChargesCreditCardUsingMerchantProcessor

	| cart cashier salesBook total creditCard debitedAmout debitedCreditCard  |

	cart := testObjectsFactory createCart.
	cart add: testObjectsFactory itemSellByTheStore.
	creditCard := testObjectsFactory notExpiredCreditCard.
	salesBook := OrderedCollection new.
 
	cashier:= Cashier 
		toCheckout: cart 
		charging: creditCard
		throught: self
		on: testObjectsFactory today
		registeringOn: salesBook.
		
	debitBehavior := [ :anAmount :aCreditCard | 
		debitedAmout := anAmount.
		debitedCreditCard := aCreditCard ].
	total := cashier checkOut.
					
	self assert: debitedCreditCard = creditCard.
	self assert: debitedAmout = total.! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:12:30' prior: 50336422!
checkoutCart: aCartId payingWith: aCreditCard
	| salesBook |
	salesBook:= OrderedCollection new.
	cartsIds at:aCartId 
		ifPresent:[:cart| | testObjectsFactory | Cashier new
						toCheckout: cart 
						charging: aCreditCard
						throught: self
						on: testObjectsFactory today
						registeringOn: salesBook. ]
		ifAbsent:[self error: 'invalid cartId'].
	! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:12:46' prior: 50336454!
checkoutCart: aCartId payingWith: aCreditCard
	| salesBook  testObjectsFactory |
	salesBook:= OrderedCollection new.
	cartsIds at:aCartId 
		ifPresent:[:cart|  Cashier new
						toCheckout: cart 
						charging: aCreditCard
						throught: self
						on: testObjectsFactory today
						registeringOn: salesBook. ]
		ifAbsent:[self error: 'invalid cartId'].
	! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:12:57' prior: 50336468!
checkoutCart: aCartId payingWith: aCreditCard
	| salesBook  testObjectsFactory |
	salesBook:= OrderedCollection new.
	testObjectsFactory := StoreTestObjectsFactory new.
	cartsIds at:aCartId 
		ifPresent:[:cart|  Cashier new
						toCheckout: cart 
						charging: aCreditCard
						throught: self
						on: testObjectsFactory today
						registeringOn: salesBook. ]
		ifAbsent:[self error: 'invalid cartId'].
	! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:12:59' prior: 50336482!
checkoutCart: aCartId payingWith: aCreditCard
	| salesBook  testObjectsFactory |
	salesBook:= OrderedCollection new.
	testObjectsFactory := StoreTestObjectsFactory new.
	
	cartsIds at:aCartId 
		ifPresent:[:cart|  Cashier new
						toCheckout: cart 
						charging: aCreditCard
						throught: self
						on: testObjectsFactory today
						registeringOn: salesBook. ]
		ifAbsent:[self error: 'invalid cartId'].
	! !
!StoreSystem methodsFor: 'methods' stamp: 's 11/9/2023 00:13:38' prior: 50336498!
checkoutCart: aCartId payingWith: aCreditCard
	| salesBook  testObjectsFactory |
	salesBook:= OrderedCollection new.
	testObjectsFactory := StoreTestObjectsFactory new.
	
	cartsIds at:aCartId 
		ifPresent:[:cart|  Cashier new
						toCheckout: cart 
						charging: aCreditCard
						throught: self "aca que carajo pongo"
						on: testObjectsFactory today
						registeringOn: salesBook. ]
		ifAbsent:[self error: 'invalid cartId'].
	
	! !

----STARTUP---- (9 November 2023 11:47:46) as /home/totorroto/Desktop/Libros/linux64/CuisUniversity-5981.image!


!classRemoval: #StoreTestObjectsFactory stamp: 's 11/9/2023 11:48:03'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreSystem stamp: 's 11/9/2023 11:48:04'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem cartIdGenerator catalog cartsIds'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 's 11/9/2023 11:48:04'!
Object subclass: #Sale
	instanceVariableNames: 'total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #IdGenerator stamp: 's 11/9/2023 11:48:05'!
Object subclass: #IdGenerator
	instanceVariableNames: 'nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 's 11/9/2023 11:48:05'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 's 11/9/2023 11:48:06'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 's 11/9/2023 11:48:06'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreSystemTest stamp: 's 11/9/2023 11:48:07'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem cartIdGenerator storeTestObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 's 11/9/2023 11:48:07'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 's 11/9/2023 11:48:08'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/totorroto/Desktop/Libros/linux64/TusLibros.st----!

----QUIT----(9 November 2023 12:00:23) CuisUniversity-5981.image priorSource: 27993!

----STARTUP---- (10 November 2023 04:04:12) as /home/totorroto/Desktop/Libros/linux64/CuisUniversity-5981.image!


!classRemoval: #TimeSensitiveRepository stamp: 's 11/10/2023 04:04:22'!
Object subclass: #TimeSensitiveRepository
	instanceVariableNames: 'timeSystem idGenerator itemsByID timeStoredById'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreTestObjectsFactory stamp: 's 11/10/2023 04:04:23'!
Object subclass: #StoreTestObjectsFactory
	instanceVariableNames: 'today'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreSystem stamp: 's 11/10/2023 04:04:23'!
Object subclass: #StoreSystem
	instanceVariableNames: 'authenticationSystem idGenerator catalog cartsByID merchantProcessor salesBook transactionsByUser timeSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #SalesBook stamp: 's 11/10/2023 04:04:23'!
Object subclass: #SalesBook
	instanceVariableNames: 'idGenerator sales'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Sale stamp: 's 11/10/2023 04:04:24'!
Object subclass: #Sale
	instanceVariableNames: 'total relatedItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #IdGenerator stamp: 's 11/10/2023 04:04:24'!
Object subclass: #IdGenerator
	instanceVariableNames: 'nextId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 's 11/10/2023 04:04:24'!
Object subclass: #CreditCard
	instanceVariableNames: 'expiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cashier stamp: 's 11/10/2023 04:04:25'!
Object subclass: #Cashier
	instanceVariableNames: 'cart salesBook merchantProcessor creditCard total'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 's 11/10/2023 04:04:25'!
Object subclass: #Cart
	instanceVariableNames: 'catalog items owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreSystemTest stamp: 's 11/10/2023 04:04:25'!
TestCase subclass: #StoreSystemTest
	instanceVariableNames: 'authenticationProcedure storeSystem idGenerator storeTestObjectsFactory debitBehavior currentDateAndTime'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CashierTest stamp: 's 11/10/2023 04:04:26'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectsFactory debitBehavior'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 's 11/10/2023 04:04:26'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectsFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /home/totorroto/Downloads/TusLibros-Tests Ejercicio it4.st----!

----End fileIn of /home/totorroto/Downloads/TusLibros-Model Ejercicio it4.st----!

----End fileIn of /home/totorroto/Downloads/TusLibrosREST Ejercicio it4.st----!

----End fileIn of /home/totorroto/Desktop/Libros/linux64/Packages/System/Collections-CompactArrays.pck.st----!

----End fileIn of /home/totorroto/Desktop/Libros/linux64/Packages/Features/Compression.pck.st----!

----End fileIn of /home/totorroto/Desktop/Libros/linux64/Packages/Features/Sound.pck.st----!

----End fileIn of /home/totorroto/Desktop/Libros/linux64/Packages/Features/Cryptography-DigitalSignatures.pck.st----!

----End fileIn of /home/totorroto/Desktop/Libros/linux64/Packages/Features/Identities-UUID.pck.st----!

----End fileIn of /home/totorroto/Desktop/Libros/linux64/Packages/System/Network-Kernel.pck.st----!

----End fileIn of /home/totorroto/Downloads/WebClient.pck.st----!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/10/2023 04:10:15'!
FAILURE!

----QUIT----(10 November 2023 16:54:47) CuisUniversity-5981.image priorSource: 197276!

----STARTUP---- (12 November 2023 18:27:07) as /home/totorroto/Desktop/Libros/linux64/CuisUniversity-5981.image!


!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 's 11/12/2023 18:45:14'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:45:16'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:45:18'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:51:18' prior: 50339967!
totalSales
	
	"(Delay forSeconds: 1) wait."

	^salesBook sum: [:aSale | | totalQuantity |
		totalQuantity := 0.
		aSale lineItemsDo: [:aLineItem | totalQuantity := totalQuantity + aLineItem quantity].
		totalQuantity].
	
! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 's 11/12/2023 18:51:23'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:51:25'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:51:26'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:51:28'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 's 11/12/2023 18:51:33'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:51:35'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:51:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:51:38'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:52:05' prior: 50339950!
totalMoneyRaised
	
	"(Delay forSeconds: 1) wait".
	
	^salesBook sum: [:aSale | aSale total].
	
! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 's 11/12/2023 18:52:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:52:10'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:52:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:52:12'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:52:18'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 's 11/12/2023 18:52:34'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:52:36'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:52:36'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:52:38'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:52:47'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:53:04' prior: 50377597!
totalSales
	
	(Delay forSeconds: 1) wait.

	^salesBook sum: [:aSale | | totalQuantity |
		totalQuantity := 0.
		aSale lineItemsDo: [:aLineItem | totalQuantity := totalQuantity + aLineItem quantity].
		totalQuantity].
	
! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:53:09'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:53:20' prior: 50377850!
totalMoneyRaised
	
	(Delay forSeconds: 1) wait.
	
	^salesBook sum: [:aSale | aSale total].
	
! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:55:02' prior: 50339933!
storePerformance

	| totalMoney totalSales performance readySemaphore |
	
	performance := Dictionary new.
	"[ ... ] fork <-- crea un proceso nuevo que ejecuta en paralelo el bloque.
Para esperar por algo que esta corriendo en paralelo tienen que usar un semáforo. Para ello tienen:

readySemaphore := Semaphore new.  <-- crea el semáforo.
readySemaphore signal. <--- indica que el semáforo se prendió.
readySemaphore wait.  <--- espero por que el semaforo se prenda."
	readySemaphore := Semaphore new.
	[totalSales := self totalSales.
	readySemaphore signal.	] fork.
	readySemaphore wait.
	totalMoney := self totalMoneyRaised.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:55:14' prior: 50378058!
storePerformance

	| totalMoney totalSales performance readySemaphore |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSales.
	readySemaphore signal.	] fork.

	readySemaphore wait.
	totalMoney := self totalMoneyRaised.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 's 11/12/2023 18:55:15'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:55:17'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:55:19'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:55:28'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:56:16' prior: 50378052!
totalMoneyRaised
	
	"(Delay forSeconds: 1) wait."
	
	^salesBook sum: [:aSale | aSale total].
	
! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 's 11/12/2023 18:56:18'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:56:20'!
FAILURE!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:56:21'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:56:23'!
FAILURE!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:56:36' prior: 50378194!
totalMoneyRaised
	
	(Delay forSeconds: 1) wait.
	
	^salesBook sum: [:aSale | aSale total].
	
! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:56:45' prior: 50378038!
totalSales
	
	"(Delay forSeconds: 1) wait."

	^salesBook sum: [:aSale | | totalQuantity |
		totalQuantity := 0.
		aSale lineItemsDo: [:aLineItem | totalQuantity := totalQuantity + aLineItem quantity].
		totalQuantity].
	
! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:56:50'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:57:07' prior: 50378290!
totalSales
	
	(Delay forSeconds: 1) wait.

	^salesBook sum: [:aSale | | totalQuantity |
		totalQuantity := 0.
		aSale lineItemsDo: [:aLineItem | totalQuantity := totalQuantity + aLineItem quantity].
		totalQuantity].
	
! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 18:58:44' prior: 50378090!
storePerformance

	| totalMoney totalSales performance readySemaphore |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSales.
	readySemaphore signal.	] fork.

	
	totalMoney := self totalMoneyRaised.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 18:59:17'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:01:04' prior: 50339892!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.
	readySemaphore signal.	] fork.

	
	totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 's 11/12/2023 19:01:07'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 19:01:08'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 19:01:09'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:01:18' prior: 50378338!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[totalSales := self totalSalesOf: anItem.
	readySemaphore signal.	] fork.

	totalMoney := self totalMoneyRaisedBy: anItem.
	readySemaphore wait.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:03:19' prior: 50378439!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[[totalSales := self totalSalesOf: anItem.] value.
	readySemaphore signal.	] fork.

	[totalMoney := self totalMoneyRaisedBy: anItem.] value.
	readySemaphore wait.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:03:21' prior: 50378461!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[[totalSales := self totalSalesOf: anItem.] value.
	readySemaphore signal.	] fork.

	[totalMoney := self totalMoneyRaisedBy: anItem.] value.
	readySemaphore wait.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:04:02' prior: 50378483!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore |

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[| aBlockToExecuteInParallel |
	aBlockToExecuteInParallel := [totalSales := self totalSalesOf: anItem.].
	aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	[totalMoney := self totalMoneyRaisedBy: anItem.] value.
	readySemaphore wait.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:04:15' prior: 50378505!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore anotherBlockToExecuteInParallel |

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[| aBlockToExecuteInParallel |
	aBlockToExecuteInParallel := [totalSales := self totalSalesOf: anItem.].
	aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaisedBy: anItem.].
	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:04:41' prior: 50378530!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore anotherBlockToExecuteInParallel aBlockToExecuteInParallel |

	bookPerformance := Dictionary new.
	readySemaphore := Semaphore new.
	
	[aBlockToExecuteInParallel := [totalSales := self totalSalesOf: anItem.].
	aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaisedBy: anItem.].
	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:05:04' prior: 50378314!
storePerformance

	| totalMoney totalSales performance readySemaphore |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	[[totalSales := self totalSales] value.
	readySemaphore signal.	] fork.

	
	[totalMoney := self totalMoneyRaised] value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:05:10' prior: 50378586!
storePerformance

	| totalMoney totalSales performance readySemaphore |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	[| aBlockToExecuteInParallel |
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	
	[totalMoney := self totalMoneyRaised] value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:05:34' prior: 50378607!
storePerformance

	| totalMoney totalSales performance readySemaphore aBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	
	[aBlockToExecuteInParallel := [totalSales := self totalSales].
	aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	
	[totalMoney := self totalMoneyRaised] value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:06:15' prior: 50378558!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore anotherBlockToExecuteInParallel aBlockToExecuteInParallel |

	bookPerformance := Dictionary new.
	aBlockToExecuteInParallel := [totalSales := self totalSalesOf: anItem].
	
	readySemaphore := Semaphore new.
	
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaisedBy: anItem.].
	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:06:22' prior: 50378655!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore anotherBlockToExecuteInParallel aBlockToExecuteInParallel |

	bookPerformance := Dictionary new.
	aBlockToExecuteInParallel := [totalSales := self totalSalesOf: anItem].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaisedBy: anItem.].
	
	readySemaphore := Semaphore new.
	
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	
	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:06:27' prior: 50378683!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales readySemaphore anotherBlockToExecuteInParallel aBlockToExecuteInParallel |

	bookPerformance := Dictionary new.
	aBlockToExecuteInParallel := [totalSales := self totalSalesOf: anItem].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaisedBy: anItem.].
	
	readySemaphore := Semaphore new.
	
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	
	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:06:39' prior: 50378631!
storePerformance

	| totalMoney totalSales performance readySemaphore aBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	
	[totalMoney := self totalMoneyRaised] value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:06:59' prior: 50378739!
storePerformance

	| totalMoney totalSales performance readySemaphore aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:07:08' prior: 50378762!
storePerformance

	| totalMoney totalSales performance readySemaphore aBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	
	[totalMoney := self totalMoneyRaised] value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:07:15' prior: 50378789!
storePerformance

	| totalMoney totalSales performance readySemaphore aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:07:28' prior: 50378812!
storePerformance

	| totalMoney totalSales performance readySemaphore aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	
	
	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:07:37' prior: 50378839!
storePerformance

	| totalMoney totalSales performance readySemaphore aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	readySemaphore := Semaphore new.
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:07:43' prior: 50378866!
storePerformance

	| totalMoney totalSales performance readySemaphore aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	
	readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:08:34' prior: 50378893!
storePerformance

	| totalMoney totalSales performance readySemaphore aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	
	readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:08:55' prior: 50378920!
storePerformance

	| totalMoney totalSales performance readySemaphore aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	
	readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:09:38' prior: 50378947!
storePerformance

	| totalMoney totalSales performance aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	
	[|readySemaphore |readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait.] value.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:10:03' prior: 50378974!
storePerformance

	| totalMoney totalSales performance aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	
	[|readySemaphore |readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait.] value.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:10:35'!
executeThis: anotherBlockToExecuteInParallel whileExecutingThisAlso: aBlockToExecuteInParallel

	|readySemaphore |readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:10:35' prior: 50379001!
storePerformance

	| totalMoney totalSales performance aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	
	[self executeThis: anotherBlockToExecuteInParallel whileExecutingThisAlso: aBlockToExecuteInParallel.] value.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:10:46' prior: 50379040!
storePerformance

	| totalMoney totalSales performance aBlockToExecuteInParallel anotherBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaised].
	
	self executeThis: anotherBlockToExecuteInParallel whileExecutingThisAlso: aBlockToExecuteInParallel.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:11:10' prior: 50378711!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales anotherBlockToExecuteInParallel aBlockToExecuteInParallel |

	bookPerformance := Dictionary new.
	aBlockToExecuteInParallel := [totalSales := self totalSalesOf: anItem].
	anotherBlockToExecuteInParallel := [totalMoney := self totalMoneyRaisedBy: anItem.].
	
	self executeThis: anotherBlockToExecuteInParallel whileExecutingThisAlso: aBlockToExecuteInParallel.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:11:15' prior: 50379089!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales aBlockToExecuteInParallel |

	bookPerformance := Dictionary new.
	aBlockToExecuteInParallel := [totalSales := self totalSalesOf: anItem].
	self executeThis: [totalMoney := self totalMoneyRaisedBy: anItem.] whileExecutingThisAlso: aBlockToExecuteInParallel.
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:11:18' prior: 50379115!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	self executeThis: [totalMoney := self totalMoneyRaisedBy: anItem.] whileExecutingThisAlso: [totalSales := self totalSalesOf: anItem].
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:11:21' prior: 50379065!
storePerformance

	| totalMoney totalSales performance aBlockToExecuteInParallel |
	
	performance := Dictionary new.
	
	
	aBlockToExecuteInParallel := [totalSales := self totalSales].
	self executeThis: [totalMoney := self totalMoneyRaised] whileExecutingThisAlso: aBlockToExecuteInParallel.
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:11:24' prior: 50379157!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	
	self executeThis: [totalMoney := self totalMoneyRaised] whileExecutingThisAlso: [totalSales := self totalSales].
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:11:26' prior: 50379178!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	self executeThis: [totalMoney := self totalMoneyRaised] whileExecutingThisAlso: [totalSales := self totalSales].
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:11:47' prior: 50379137!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	self 
		executeThis:[totalMoney := self totalMoneyRaisedBy: anItem.] 
		whileExecutingThisAlso: [totalSales := self totalSalesOf: anItem].
	
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:11:59' prior: 50379196!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	self 
		executeThis: [totalMoney := self totalMoneyRaised]  		whileExecutingThisAlso: [totalSales := self totalSales].
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 's 11/12/2023 19:12:10'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 19:12:11'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 19:12:12'!
PASSED!
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:12:45' prior: 50379234!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	self 
		executeThis: [totalMoney := self totalMoneyRaised]  
		whileExecutingThisAlso: [totalSales := self totalSales].
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:12:55' prior: 50379214!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	self 
		executeThis:[totalMoney := self totalMoneyRaisedBy: anItem.] 
		whileExecutingThisAlso: [totalSales := self totalSalesOf: anItem].
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'private' stamp: 's 11/12/2023 19:13:31'!
execute: anotherBlockToExecuteInParallel inParallelWith: aBlockToExecuteInParallel

	|readySemaphore |readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 's 11/12/2023 19:13:31' prior: 50379420!
bookPerformance: anItem

	| bookPerformance totalMoney totalSales |

	bookPerformance := Dictionary new.
	self 
		execute:[totalMoney := self totalMoneyRaisedBy: anItem.] 
		inParallelWith: [totalSales := self totalSalesOf: anItem].
	
	
	bookPerformance at: 'quantity' put: totalSales.
	bookPerformance at: 'total' put: totalMoney.
	bookPerformance at: 'summary' put: anItem,' was selled ',totalSales asString, ' times and raised a total amount of money equal to: ', totalMoney asString.
	
	^bookPerformance
	

! !
!TusLibrosSystemFacade methodsFor: 'as yet unclassified' stamp: 's 11/12/2023 19:13:31' prior: 50379401!
storePerformance

	| totalMoney totalSales performance |
	
	performance := Dictionary new.
	
	self 
		execute: [totalMoney := self totalMoneyRaised]  
		inParallelWith: [totalSales := self totalSales].
	
	performance at: 'quantity' put: totalSales.
	performance at: 'total' put: totalMoney.
	performance at: 'summary' put: 'The store selled a total of ',totalSales asString, ' books and raised a total amount of money equal to: ', totalMoney asString.
	
	^performance
	

! !

!methodRemoval: TusLibrosSystemFacade #executeThis:whileExecutingThisAlso: stamp: 's 11/12/2023 19:13:31'!
executeThis: anotherBlockToExecuteInParallel whileExecutingThisAlso: aBlockToExecuteInParallel

	|readySemaphore |readySemaphore := Semaphore new.
	[aBlockToExecuteInParallel value.
	readySemaphore signal.	] fork.

	anotherBlockToExecuteInParallel value.
	readySemaphore wait!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 19:13:52'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 19:13:56'!
PASSED!

TusLibrosServerRestInterface installForDefaultSystem 

WebServer reset

TusLibrosClientTestWindow open !

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:30:20' prior: 50340461!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface 
			asynchronicallyListCart: cartId 
			withResponseDo:[:response|						currentSelectedCartContent :=response.
								    	self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CashierTest #test01CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CashierTest #test02CalculatedTotalIsCorrect stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CashierTest #test03CanNotCheckoutWithAnExpiredCreditCart stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutRegistersASale stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CashierTest #test05CashierChargesCreditCardUsingMerchantProcessor stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CashierTest #test06CashierDoesNotSaleWhenTheCreditCardHasNoCredit stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberWithLessThan16DigitsIsNotValid stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardNumberWithMoreThan16DigitsIsNotValid stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardNumberShouldBeDigitsOnly stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CreditCardTest #test04NameCanNotBeEmpty stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CreditCardTest #test05IsExpiredOnNextExpirationMonth stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CreditCardTest #test06IsNotExpiredOnExpirationMonth stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #CreditCardTest #test07CanGetCreditCardInfoFromIt stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test01CanCreateCartWithValidUserAndPassword stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test02CanNotCreateCartWithInvalidUser stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test03CanNotCreateCartWithInvalidPassword stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test04CanAddItemsToACreatedCart stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test05CanNotAddItemToNotCreatedCart stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test06CanNotAddItemNotSellByTheStore stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test08CanNotListCartOfInvalidCartId stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test09ListCartReturnsTheRightNumberOfItems stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10CheckOutReturnsTransactionIdAndImpactsCustomerPurchases stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test10_1_CanNotCheckoutAnAlreadyCheckedOutCart stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test11CanNotCheckoutANotCreatedCart stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test12CanNotCheckoutAnEmptyCart stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test13CanNotCheckoutWithAnExpiredCreditCard stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test14ListPurchasesIncludesBoughtItems stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test15CanNotListPurchasesOfInvalidCustomer stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test16CanNotListPurchasesOfValidCustomerWithInvalidPassword stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test17CanNotAddToCartWhenSessionIsExpired stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test18CanNotListCartWhenSessionIsExpired stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test19CanNotCheckOutCartWhenSessionIsExpired stamp: 's 11/12/2023 19:30:28'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test20BookPerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 19:30:29'!
PASSED!

!testRun: #TusLibrosSystemFacadeTest #test21StorePerformanceShouldNotTakeTooLong stamp: 's 11/12/2023 19:30:30'!
PASSED!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 19:33:00'!
asynchronicallyListCart: cartId withResponseDo: aBlock
	
	[|response| response:= self listCart: cartId. aBlock value:response]fork! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 19:34:11'!
asynchronicallyCreateCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 19:34:45'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock
	
	[|response| response:= self createCartFor: aUser password:aPassword. aBlock value:response]fork! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyCreateCartFor:password: stamp: 's 11/12/2023 19:34:48'!
asynchronicallyCreateCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 's 11/12/2023 19:37:17' prior: 50340602!
createCart: aRequest

	| clientId password |

	(Delay forSeconds: 1) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ systemFacade asynchronicallyCreateCartFor: clientId password: password withResponseDo:[:cartId| cartId printString].]
		to: aRequest ! !

TusLibrosClientTestWindow open!
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 's 11/12/2023 19:40:25' prior: 50379723!
createCart: aRequest

	| clientId password answer |

	(Delay forSeconds: 1) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	answer:=[ systemFacade asynchronicallyCreateCartFor: clientId password: password withResponseDo:[:cartId| cartId printString].]
	self 
		answer: answer
		to: aRequest ! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 's 11/12/2023 19:40:29' prior: 50379740!
createCart: aRequest

	| clientId password answer |

	(Delay forSeconds: 1) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	answer:=[ systemFacade asynchronicallyCreateCartFor: clientId password: password withResponseDo:[:cartId| cartId printString].].
	self 
		answer: answer
		to: aRequest ! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 's 11/12/2023 19:45:08' prior: 50379757!
createCart: aRequest

	| clientId password answer |

	(Delay forSeconds: 1) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	 systemFacade asynchronicallyCreateCartFor: clientId password: password withResponseDo:[:cartId| cartId printString].
	self 
		answer: answer
		to: aRequest ! !
!TusLibrosServerRestInterface methodsFor: 'rest interface' stamp: 'NR 6/13/2022 07:11:38' prior: 50379774!
createCart: aRequest

	| clientId password |

	(Delay forSeconds: 1) wait.
	
	self withFieldsOf: aRequest do: [ :requestFields |
		clientId := self clientIdFrom: requestFields.
		password := self passwordFrom: requestFields ].
	
	self 
		answer: [ | cartId | 
			cartId := systemFacade createCartFor: clientId authenticatedWith: password.
			cartId printString ]
		to: aRequest ! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:47:23' prior: 50340452!
createCart

	| newCartId |
	
	newCartId := restInterface asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' withResponseDo:[].
	cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:48:09' prior: 50379806!
createCart

	| newCartId |
	
	newCartId := restInterface asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' withResponseDo:[:response| cartIds add: newCartId.
	self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:49:20' prior: 50379816!
createCart

	
	
	restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId| cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived].
	! !

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:51:28' prior: 50379827!
createCart

	restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId| cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:52:27' prior: 50340439!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:52:40' prior: 50379850!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].
		! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 19:53:05'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId
! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 19:53:27'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo: aBlock.
	
	self add: quantity of: bookIsbn  to! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyAdd:of:toCartIdentifiedAs: stamp: 's 11/12/2023 19:53:30'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId
!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 19:54:54' prior: 50379883!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo: aBlock.
	
	[self add:  quantity of: bookIsbn  toCartIdentifiedAs: cartId. aBlock value ]fork.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:00:35'!
asynchronicallyDo: aBlock withResponseDo:anotherBlock
	
	[|response| response:= aBlock value. anotherBlock value:response]fork! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:01:47' prior: 50379676!
asynchronicallyListCart: cartId withResponseDo: aBlock
	self asynchronicallyDo: [self listCart: cartId]withResponseDo: aBlock.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:02:05' prior: 50379698!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock
	self asynchronicallyDo: [self createCartFor: aUser password:aPassword]withResponseDo: aBlock.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:02:52' prior: 50379897!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo: aBlock.
	self asynchronicallyDo: [self add:  quantity of: bookIsbn  toCartIdentifiedAs: cartId]withResponseDo: aBlock.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:05:12' prior: 50379906!
asynchronicallyDo: aBlock withResponseDo:anotherBlock
	
	[|response| response:= aBlock value. anotherBlock valueWithPossibleArgument:response]fork! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyAdd:of:toCartIdentifiedAs:withResponseDo: stamp: 's 11/12/2023 20:06:11'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo: aBlock.
	self asynchronicallyDo: [self add:  quantity of: bookIsbn  toCartIdentifiedAs: cartId]withResponseDo: aBlock.
	!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:06:11' prior: 50379864!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface asynchronicallyDo: [restInterface add:  1 of: bookIsbn  toCartIdentifiedAs: cartId]withResponseDo: [self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)].
restInterface asynchronicallyDo: [restInterface add:  1 of: bookIsbn  toCartIdentifiedAs: cartId]withResponseDo: [self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)].].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:06:53' prior: 50379960!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface asynchronicallyDo: [restInterface add:  1 of: bookIsbn  toCartIdentifiedAs: cartId]withResponseDo: [self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].
		! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyCreateCartFor:password:withResponseDo: stamp: 's 11/12/2023 20:07:30'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo:aBlock
	self asynchronicallyDo: [self createCartFor: aUser password:aPassword]withResponseDo: aBlock.
	!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:07:30' prior: 50379840!
createCart

	restInterface asynchronicallyDo: [restInterface createCartFor: 'hernan' password:'smalltalk']withResponseDo: [:newCartId| cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived].
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyListCart:withResponseDo: stamp: 's 11/12/2023 20:07:57'!
asynchronicallyListCart: cartId withResponseDo: aBlock
	self asynchronicallyDo: [self listCart: cartId]withResponseDo: aBlock.
	!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:07:57' prior: 50379515!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface asynchronicallyDo: [restInterface listCart: cartId]withResponseDo: [:response|						currentSelectedCartContent :=response.
								    	self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].].! !

!classDefinition: #Parallelizer category: 'TusLibrosREST' stamp: 's 11/12/2023 20:10:23'!
Object subclass: #Parallelizer
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibrosREST'!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:10:19' prior: 50379981!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		Parallelizer asynchronicallyDo: [restInterface add:  1 of: bookIsbn  toCartIdentifiedAs: cartId]withResponseDo: [self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].
		
		! !
!Parallelizer class methodsFor: 'no messages' stamp: 's 11/12/2023 20:11:10'!
asynchronicallyDo: aBlock! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:11:30' prior: 50380045!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		Parallelizer asynchronicallyDo: [restInterface add:  1 of: bookIsbn  toCartIdentifiedAs: cartId] withResponseDo: [self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].
		
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:52:40' prior: 50380064!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:51:28' prior: 50380006!
createCart

	restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withResponseDo:[:newCartId| cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:30:20' prior: 50380024!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface 
			asynchronicallyListCart: cartId 
			withResponseDo:[:response|						currentSelectedCartContent :=response.
								    	self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ].].! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:15:51'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo: aBlock
	self asynchronicallyDo: [self createCartFor: aUser password: aPassword ] withResponseDo:aBlock.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:16:45'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo: aBlock

	self asynchronicallyDo: [self add: quantity of: bookIsbn toCartIdentifiedAs: cartId ] withResponseDo:aBlock.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:17:24'!
asynchronicallyListCart: cartId withResponseDo: aBlock
	self asynchronicallyDo: [self listCart:cartId] withResponseDo:aBlock.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:18:22' prior: 50380117!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo: aBlock

	self asynchronicallyDo: [self createCartFor: aUser password: aPassword ] withResponseDo:aBlock.
	! !

TusLibrosServerRestInterface installForDefaultSystem.!

TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:24:25' prior: 50340312!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^ resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:24:31' prior: 50380156!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^resp content]! !
!TusLibrosClientTestWindowModel methodsFor: 'initialization' stamp: 's 11/12/2023 20:25:57' prior: 50340472!
defaultCatalog 

	^Dictionary new
		at: 'GreenBook' put: 10*dollar;
		at: 'BlueBook' put: 15*dollar;
		at: 'MartinFierro' put: 350*peso;
		at: 'Cabeza' put: 10*dollar;
		yourself! !

TusLibrosClientTestWindow open!

TusLibrosServerRestInterface installForDefaultSystem!

TusLibrosServerRestInterface open!

TusLibrosClientTestWindow open!
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 's 11/12/2023 20:31:52' prior: 50340220!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #bookErrorWhenTryingToAddBook send: #informErrorWhenTryingToAddBook:toCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'NR 6/13/2022 07:05:17' prior: 50380171!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:36:41' prior: 50380225!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	^resp
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 19:52:40' prior: 50380079!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].
		! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 20:39:27' prior: 50380241!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
	^resp
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:40:14'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId onSucceswithResponseDo: aBlock

	self asynchronicallyDo: [self add: quantity of: bookIsbn toCartIdentifiedAs: cartId ] withResponseDo:aBlock.! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:41:07'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock

	self asynchronicallyDo: [self add: quantity of: bookIsbn toCartIdentifiedAs: cartId ] withResponseDo:aBlock.! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:41:39' prior: 50380289!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock
	
	self asynchronicallyDo: [self add: quantity of: bookIsbn toCartIdentifiedAs: cartId ] withSuccesResponseDo:aBlock withFailureResponseDo: anotherBlock.! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:42:32'!
asynchronicallyDo: aBlock withSuccesResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value. anotherBlock valueWithPossibleArgument:response]fork! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:43:33' prior: 50380312!
asynchronicallyDo: aBlock withSuccesResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value. response isSuccess 
											ifTrue:[anotherBlock valueWithPossibleArgument:response]
											ifFalse:[aThirdBlock value:response]]fork! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:43:47' prior: 50380322!
asynchronicallyDo: aBlock withSuccesResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value. response isSuccess 
											ifTrue:[anotherBlock valueWithPossibleArgument:response]
											ifFalse:[aThirdBlock value:response]]fork! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:44:56' prior: 50380334!
asynchronicallyDo: aBlock withSuccesResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value. response isSuccess 
											ifTrue:[anotherBlock valueWithPossibleArgument:(WebUtils jsonDecode: ((response content) readStream))]
											ifFalse:[aThirdBlock value:response content]]fork! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyAdd:of:toCartIdentifiedAs:onSucceswithResponseDo: stamp: 's 11/12/2023 20:45:12'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId onSucceswithResponseDo: aBlock

	self asynchronicallyDo: [self add: quantity of: bookIsbn toCartIdentifiedAs: cartId ] withResponseDo:aBlock.!

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyAdd:of:toCartIdentifiedAs:withResponseDo: stamp: 's 11/12/2023 20:45:15'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withResponseDo: aBlock

	self asynchronicallyDo: [self add: quantity of: bookIsbn toCartIdentifiedAs: cartId ] withResponseDo:aBlock.!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:47:00' prior: 50380253!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]  withFailureResponseDo: [self triggerEvent: #bookErrorWhenTr]
			"asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs: cartId 
			withResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]"].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:47:38' prior: 50380382!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]
			withFailureResponseDo: [self triggerEvent: #bookErrorWhenTr]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:47:41' prior: 50380404!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]
			withFailureResponseDo: [self triggerEvent: #bookErrorWhenTr]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:48:12' prior: 50380421!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]
			withFailureResponseDo: [:errorDescription| self triggerEvent: #bookErrorWhenTr withArguments:errorDescription]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:49:07' prior: 50380438!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]
			withFailureResponseDo: [:errorDescription| self triggerEvent: #bookErrorWhenTryingToAddBook withArguments:errorDescription]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 20:49:38' prior: 50380456!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]
			withFailureResponseDo: [:errorDescription| self triggerEvent: #bookErrorWhenTryingToAddBook withArguments:(Array with:errorDescription with: bookIsbn with: cartId )]].
		! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 's 11/12/2023 20:50:13' prior: 50380201!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #bookErrorWhenTryingToAddBook send: #informError:WhenTryingToAddBook:toCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 's 11/12/2023 20:50:55'!
informError:anErrorDescription WhenTryingToAddBook: bookIsbn toCart:cartId

	self inform: bookIsbn,' added to CartId: ', cartId asString
	
! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 's 11/12/2023 20:51:01' prior: 50380518!
informError: anErrorDescription WhenTryingToAddBook: bookIsbn toCart:cartId

	self inform: bookIsbn,' added to CartId: ', cartId asString
	
! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 's 11/12/2023 20:51:35' prior: 50380526!
informError: anErrorDescription WhenTryingToAddBook: bookIsbn toCart:cartId

	self inform: bookIsbn,' was not added to CartId: ', cartId asString , ' because of ', anErrorDescription.
	
! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:55:44'!
withResponse: response onSuccesDo: anotherBlock onErrorDo: aThirdBlock

	^ response isSuccess 
											ifTrue:[anotherBlock valueWithPossibleArgument:(WebUtils jsonDecode: ((response content) readStream))]
											ifFalse:[aThirdBlock value:response content]! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:55:44' prior: 50380346!
asynchronicallyDo: aBlock withSuccesResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value. self withResponse: response onSuccesDo: anotherBlock onErrorDo: aThirdBlock]fork! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:56:56'!
asynchronicallyListCart: cartId withSuccesResponseDo: aBlock withFailureResponseDo: anotherBlock
	self asynchronicallyDo: [self listCart:cartId] withSuccesResponseDo:aBlock withFailureResponseDo: anotherBlock.
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:57:05'!
asynchronicallyDo: aBlock withSuccessResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value. self withResponse: response onSuccesDo: anotherBlock onErrorDo: aThirdBlock]fork! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 's 11/12/2023 20:57:05' prior: 50380568!
asynchronicallyListCart: cartId withSuccesResponseDo: aBlock withFailureResponseDo: anotherBlock
	self asynchronicallyDo: [self listCart:cartId] withSuccessResponseDo:aBlock withFailureResponseDo: anotherBlock.
	! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 's 11/12/2023 20:57:05' prior: 50380300!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock
	
	self asynchronicallyDo: [self add: quantity of: bookIsbn toCartIdentifiedAs: cartId ] withSuccessResponseDo:aBlock withFailureResponseDo: anotherBlock.! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyDo:withSuccesResponseDo:withFailureResponseDo: stamp: 's 11/12/2023 20:57:05'!
asynchronicallyDo: aBlock withSuccesResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value. self withResponse: response onSuccesDo: anotherBlock onErrorDo: aThirdBlock]fork!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 20:58:10'!
asynchronicallyCreateCartFor: aUser password: aPassword withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock

	self asynchronicallyDo: [self createCartFor: aUser password: aPassword ] withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock.
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyCreateCartFor:password:withResponseDo: stamp: 's 11/12/2023 20:58:28'!
asynchronicallyCreateCartFor: aUser password: aPassword withResponseDo: aBlock

	self asynchronicallyDo: [self createCartFor: aUser password: aPassword ] withResponseDo:aBlock.
	!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:04:41' prior: 50380104!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface 
			asynchronicallyListCart: cartId 
			withSuccessResponseDo:[:response|						currentSelectedCartContent :=response.
								    	self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ] withFailureResponseDo:[:responseError|self triggerEvent: #errornewCurrentSelectedCartContentArrived with: (Array with:responseError with:cartId)].].! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:04:47'!
asynchronicallyListCart: cartId withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock
	self asynchronicallyDo: [self listCart:cartId] withSuccessResponseDo:aBlock withFailureResponseDo: anotherBlock.
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyListCart:withSuccesResponseDo:withFailureResponseDo: stamp: 's 11/12/2023 21:04:47'!
asynchronicallyListCart: cartId withSuccesResponseDo: aBlock withFailureResponseDo: anotherBlock
	self asynchronicallyDo: [self listCart:cartId] withSuccessResponseDo:aBlock withFailureResponseDo: anotherBlock.
	!
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 's 11/12/2023 21:06:04' prior: 50380495!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #bookErrorWhenTryingToAddBook send: #informError:WhenTryingToAddBook:toCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errornewCurrentSelectedCartContentArrived send: #informError:whenTryingToListCart: to: self.! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 's 11/12/2023 21:07:44' prior: 50380684!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #errornewCartIdArrived send: #informErrorWhenTryingToCreateCartBecauseOf: to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #bookErrorWhenTryingToAddBook send: #informError:WhenTryingToAddBook:toCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #errornewCurrentSelectedCartContentArrived send: #informError:whenTryingToListCart: to: self.! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 's 11/12/2023 21:09:07' prior: 50380711!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #bookErrorWhenTryingToAddBook send: #informError:WhenTryingToAddBook:toCart: to: self.
	! !
!TusLibrosClientTestWindow methodsFor: 'initialization' stamp: 's 11/12/2023 21:09:25' prior: 50380741!
initializeWith: aTitle

	self setLabel: aTitle.
	self model: (TusLibrosClientTestWindowModel new).
	self morphExtent: (self defaultExtent).
	self buildMorphicWindow.
	self openInWorld.
			
	self model when: #newCartIdArrived send: #refreshListOfCartIds to: self.		
	self model when: #selectedCartChanged send: #refreshCartButtonsLabels: to: self.	
	self model when: #bookAddedToCart send: #informBook:addedToCart: to: self.
	self model when: #newCurrentSelectedCartContentArrived send: #refreshCurrentSelectedCartContent: to: self.
	self model when: #serverError send: #informError: to: self.
	! !
!TusLibrosClientTestWindow methodsFor: 'events' stamp: 's 11/12/2023 21:09:52'!
informError: anErrorDescription 

	self inform: 'Error ocurred because of ', anErrorDescription.
	
! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:10:31' prior: 50380475!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]
			withFailureResponseDo: [:errorDescription| self triggerEvent: #serverError with: errorDescription]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:10:53' prior: 50380645!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		restInterface 
			asynchronicallyListCart: cartId 
			withSuccessResponseDo:[:response|						currentSelectedCartContent :=response.
								    	self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ] withFailureResponseDo:[:responseError|self triggerEvent: #serverError with: responseError].].! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:11:45' prior: 50380094!
createCart

	restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withSuccessResponseDo:[:newCartId| cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] 
							withFailureResponseDo:[self triggerEvent: #serverError].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:12:06' prior: 50380829!
createCart

	restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withSuccessResponseDo:[:newCartId| cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] 
							withFailureResponseDo:[:responseError| self triggerEvent: #serverError with:responseError].
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyDo:withResponseDo: stamp: 's 11/12/2023 21:12:24'!
asynchronicallyDo: aBlock withResponseDo:anotherBlock
	
	[|response| response:= aBlock value. anotherBlock valueWithPossibleArgument:response]fork!

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyListCart:withResponseDo: stamp: 's 11/12/2023 21:12:30'!
asynchronicallyListCart: cartId withResponseDo: aBlock
	self asynchronicallyDo: [self listCart:cartId] withResponseDo:aBlock.
	!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:13:12' prior: 50340341!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	^resp.	
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:13:21' prior: 50340327!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	^resp.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:14:17' prior: 50380870!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	^resp.	
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:14:23' prior: 50380880!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	^resp.
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:15:02' prior: 50380546!
withResponse: response onSuccesDo: anotherBlock onErrorDo: aThirdBlock

	^ response isSuccess 
				ifTrue:[anotherBlock valueWithPossibleArgument:(WebUtils jsonDecode: ((response content) readStream))]
				ifFalse:[aThirdBlock value:response content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:15:44'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccesDo: anotherBlock onErrorDo: aThirdBlock

	| fieldDict response |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
	^ response isSuccess 
				ifTrue:[anotherBlock valueWithPossibleArgument:(WebUtils jsonDecode: ((response content) readStream))]
				ifFalse:[aThirdBlock value:response content]
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:15:54' prior: 50380923!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccesDo: anotherBlock onErrorDo: aThirdBlock

	| fieldDict response |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
	response isSuccess 
				ifTrue:[anotherBlock valueWithPossibleArgument:(WebUtils jsonDecode: ((response content) readStream))]
				ifFalse:[aThirdBlock value:response content]
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:17:03' prior: 50380942!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccesDo: anotherBlock onErrorDo: aThirdBlock

	| fieldDict response |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
	"self withResponse: 
		response 
		onSuccessDo: anotherBlock valueWithPossibleArgument:(WebUtils jsonDecode: ((response content) readStream)) 
		onErrorDo: aThirdBlock value:response content"
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:17:16'!
withResponse: response onSuccessDo: anotherBlock onErrorDo: aThirdBlock

	^ response isSuccess 
				ifTrue:[anotherBlock valueWithPossibleArgument:(WebUtils jsonDecode: ((response content) readStream))]
				ifFalse:[aThirdBlock value:response content]! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 's 11/12/2023 21:17:16' prior: 50380578!
asynchronicallyDo: aBlock withSuccessResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value. self withResponse: response onSuccessDo: anotherBlock onErrorDo: aThirdBlock]fork! !

!methodRemoval: TusLibrosClientRestInterface #withResponse:onSuccesDo:onErrorDo: stamp: 's 11/12/2023 21:17:16'!
withResponse: response onSuccesDo: anotherBlock onErrorDo: aThirdBlock

	^ response isSuccess 
				ifTrue:[anotherBlock valueWithPossibleArgument:(WebUtils jsonDecode: ((response content) readStream))]
				ifFalse:[aThirdBlock value:response content]!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:18:05' prior: 50380961!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccesDo: anotherBlock onErrorDo: aThirdBlock

	| fieldDict response |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
	self withResponse: response onSuccessDo: anotherBlock onErrorDo: aThirdBlock
	
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:18:25'!
createCartFor: aUser password: aPassword onSuccesDo: aBlock onErrrorDo: anotherBlock

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	^resp.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:18:49' prior: 50381030!
createCartFor: aUser password: aPassword onSuccesDo: aBlock onErrrorDo: anotherBlock

	| fieldDict response |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	self withResponse: response onSuccessDo: aBlock onErrorDo: anotherBlock
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:19:28'!
listCart: cartId onSuccessDo: aBlock onErrorDo: anotherBlock

	| fieldDict response |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	response := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	self withResponse: response onSuccessDo: aBlock onErrorDo: anotherBlock
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:24:02' prior: 50380794!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		[restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]] on: Error do: [:errorDescription| self triggerEvent: #serverError with: errorDescription]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:24:49' prior: 50380841!
createCart

	[restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withSuccessResponseDo:[:newCartId| cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived] ]on: Error do: [:responseError| self triggerEvent: #serverError with:responseError].
	! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:25:11' prior: 50380812!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[restInterface 
			asynchronicallyListCart: cartId 
			withSuccessResponseDo:[:response|						currentSelectedCartContent :=response.
								    	self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ]] on Error do: [:responseError|self triggerEvent: #serverError with: responseError].].! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:25:34'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccessResponseDo: aBlock 
	
	self asynchronicallyDo: [self add: quantity of: bookIsbn toCartIdentifiedAs: cartId ] withSuccessResponseDo:aBlock! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyAdd:of:toCartIdentifiedAs:withSuccessResponseDo:withFailureResponseDo: stamp: 's 11/12/2023 21:25:37'!
asynchronicallyAdd: quantity of: bookIsbn toCartIdentifiedAs: cartId withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock
	
	self asynchronicallyDo: [self add: quantity of: bookIsbn toCartIdentifiedAs: cartId ] withSuccessResponseDo:aBlock withFailureResponseDo: anotherBlock.!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'NR 6/9/2022 08:11:20' prior: 50380901!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'NR 6/9/2022 08:11:24' prior: 50380891!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'NR 6/13/2022 07:05:17' prior: 50380267!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:27:32' prior: 50380992!
asynchronicallyDo: aBlock withSuccessResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value]fork! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:27:47' prior: 50381188!
asynchronicallyDo: aBlock withSuccessResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value.anotherBlock value: response]fork! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:28:01'!
asynchronicallyDo: aBlock withSuccessResponseDo:anotherBlock 
	
	[|response| response:= aBlock value.anotherBlock value: response]fork! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 's 11/12/2023 21:28:01' prior: 50380623!
asynchronicallyCreateCartFor: aUser password: aPassword withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock

	self asynchronicallyDo: [self createCartFor: aUser password: aPassword ] withSuccessResponseDo: aBlock .
	! !
!TusLibrosClientRestInterface methodsFor: 'as yet unclassified' stamp: 's 11/12/2023 21:28:01' prior: 50380662!
asynchronicallyListCart: cartId withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock
	self asynchronicallyDo: [self listCart:cartId] withSuccessResponseDo:aBlock .
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyDo:withSuccessResponseDo:withFailureResponseDo: stamp: 's 11/12/2023 21:28:01'!
asynchronicallyDo: aBlock withSuccessResponseDo:anotherBlock withFailureResponseDo: aThirdBlock
	
	[|response| response:= aBlock value.anotherBlock value: response]fork!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:28:26'!
asynchronicallyCreateCartFor: aUser password: aPassword withSuccessResponseDo: aBlock 

	self asynchronicallyDo: [self createCartFor: aUser password: aPassword ] withSuccessResponseDo: aBlock .
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyCreateCartFor:password:withSuccessResponseDo:withFailureResponseDo: stamp: 's 11/12/2023 21:28:26'!
asynchronicallyCreateCartFor: aUser password: aPassword withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock

	self asynchronicallyDo: [self createCartFor: aUser password: aPassword ] withSuccessResponseDo: aBlock .
	!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:28:34'!
asynchronicallyListCart: cartId withSuccessResponseDo: aBlock 
	self asynchronicallyDo: [self listCart:cartId] withSuccessResponseDo:aBlock .
	! !

!methodRemoval: TusLibrosClientRestInterface #asynchronicallyListCart:withSuccessResponseDo:withFailureResponseDo: stamp: 's 11/12/2023 21:28:34'!
asynchronicallyListCart: cartId withSuccessResponseDo: aBlock withFailureResponseDo: anotherBlock
	self asynchronicallyDo: [self listCart:cartId] withSuccessResponseDo:aBlock .
	!

!methodRemoval: TusLibrosClientRestInterface #add:of:toCartIdentifiedAs:onSuccesDo:onErrorDo: stamp: 's 11/12/2023 21:29:09'!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId onSuccesDo: anotherBlock onErrorDo: aThirdBlock

	| fieldDict response |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	
	self withResponse: response onSuccessDo: anotherBlock onErrorDo: aThirdBlock
	
	!

!methodRemoval: TusLibrosClientRestInterface #createCartFor:password:onSuccesDo:onErrrorDo: stamp: 's 11/12/2023 21:29:11'!
createCartFor: aUser password: aPassword onSuccesDo: aBlock onErrrorDo: anotherBlock

	| fieldDict response |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
	
	self withResponse: response onSuccessDo: aBlock onErrorDo: anotherBlock
	!

!methodRemoval: TusLibrosClientRestInterface #listCart:onSuccessDo:onErrorDo: stamp: 's 11/12/2023 21:29:13'!
listCart: cartId onSuccessDo: aBlock onErrorDo: anotherBlock

	| fieldDict response |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	response := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	
	self withResponse: response onSuccessDo: aBlock onErrorDo: anotherBlock
	!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:31:00' prior: 50381172!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict response |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	self processResponse: response.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:31:04' prior: 50381326!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict response |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	response := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
	^self processResponse: response.
	! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:31:32' prior: 50381143!
createCartFor: aUser password: aPassword

	| fieldDict response |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	^self processResponse: response.! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:32:04' prior: 50381158!
listCart: cartId

	| fieldDict response |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	response := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
	^self processResponse: response.
	! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:32:36'!
processResponse: response

	^response isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((response content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: response content]! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:32:43' prior: 50381374!
processResponse: aResponse

	^aResponse isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((aResponse content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: aResponse content]! !
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:32:49' prior: 50381383!
processResponse: aResponse

	^aResponse isSuccess 
		ifTrue:[(WebUtils jsonDecode: ((aResponse content) readStream)) asOrderedCollection] 
		ifFalse:[self error: aResponse content]! !

!methodRemoval: TusLibrosClientRestInterface #withResponse:onSuccessDo:onErrorDo: stamp: 's 11/12/2023 21:32:52'!
withResponse: response onSuccessDo: anotherBlock onErrorDo: aThirdBlock

	^ response isSuccess 
				ifTrue:[anotherBlock valueWithPossibleArgument:(WebUtils jsonDecode: ((response content) readStream))]
				ifFalse:[aThirdBlock value:response content]!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:33:08' prior: 50381102!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		[restInterface 
			asynchronicallyListCart: cartId 
			withSuccessResponseDo:[:response|						currentSelectedCartContent :=response.
								    	self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ]] on: Error do: [:responseError|self triggerEvent: #serverError with: responseError].].! !

!methodRemoval: TusLibrosClientTestWindow #informError:WhenTryingToAddBook:toCart: stamp: 's 11/12/2023 21:33:48'!
informError: anErrorDescription WhenTryingToAddBook: bookIsbn toCart:cartId

	self inform: bookIsbn,' was not added to CartId: ', cartId asString , ' because of ', anErrorDescription.
	
!
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:35:59' prior: 50381071!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		| aBlock |
	cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		aBlock := [restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].
	aBlock on: Error do: [:errorDescription| self triggerEvent: #serverError with: errorDescription]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:36:35' prior: 50381439!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		| aBlock |
	cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		aBlock := [restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].
	aBlock on: Error do: [:errorDescription| self triggerEvent: #serverError with: errorDescription]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:37:14'!
handleServerErrorDuring: aBlock

	^ aBlock on: Error do: [:errorDescription| self triggerEvent: #serverError with: errorDescription]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:37:14' prior: 50381458!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		| aBlock |
	cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		aBlock := [restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]].
	self handleServerErrorDuring: aBlock].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:37:35' prior: 50381484!
addToCart

	| cartId bookIsbn |

	(self areCartIdAndBookSelected) ifTrue:[
		cartId := self selectedCartId.
		bookIsbn := self selectedBook.
		self handleServerErrorDuring: [restInterface 
			asynchronicallyAdd: 1 of: bookIsbn toCartIdentifiedAs:cartId  
			withSuccessResponseDo:[self triggerEvent: #bookAddedToCart withArguments: (Array with: bookIsbn with: cartId)]]].
		! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:38:08' prior: 50381089!
createCart

	self handleServerErrorDuring: [restInterface 
		asynchronicallyCreateCartFor: 'hernan' password: 'smalltalk' 
		withSuccessResponseDo:[:newCartId| cartIds add: newCartId.
								self triggerEvent: #newCartIdArrived]]! !
!TusLibrosClientTestWindowModel methodsFor: 'buttonSelectors' stamp: 's 11/12/2023 21:38:26' prior: 50381413!
listCart

	| cartId |
	
	(self isCartIdSelected) ifTrue:[
		cartId := self selectedCartId.
		self handleServerErrorDuring:[restInterface 
			asynchronicallyListCart: cartId 
			withSuccessResponseDo:[:response|						currentSelectedCartContent :=response.
								    	self triggerEvent: #newCurrentSelectedCartContentArrived with: cartId ]]]! !

aResponse!

aResponse content!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!

aResponse content!

quantity!

bookIsbn!

cartId!
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 's 11/12/2023 21:47:56' prior: 50381352!
createCartFor: aUser password: aPassword

	| fieldDict response |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	response := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	response isSuccess 
		ifTrue:[(WebUtils jsonDecode: ((response content) readStream)) ] 
		ifFalse:[self error: response content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'NR 6/9/2022 08:11:20' prior: 50381553!
createCartFor: aUser password: aPassword

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'clientId'. aUser. 'password'. aPassword}.		
	
	resp := WebClient htmlSubmit: (self url,'/createCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'NR 6/9/2022 08:11:24' prior: 50381364!
listCart: cartId

	| fieldDict resp |
	
	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. }.		
	
	resp := WebClient htmlSubmit: (self url,'/listCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream)) asOrderedCollection] 
		ifFalse:[^self error: resp content]! !
!TusLibrosClientRestInterface methodsFor: 'requests' stamp: 'NR 6/13/2022 07:05:17' prior: 50381339!
add: quantity of: bookIsbn toCartIdentifiedAs: cartId

	| fieldDict resp |

	fieldDict := Dictionary newFromPairs: {'cartId'. cartId. 'bookIsbn'. bookIsbn. 'bookQuantity'. quantity}.		
		
	resp := WebClient htmlSubmit: (self url,'/addToCart') fields: fieldDict.
		
	resp isSuccess 
		ifTrue:[^(WebUtils jsonDecode: ((resp content) readStream))]
		ifFalse:[^self error: resp content]! !

!methodRemoval: TusLibrosClientRestInterface #processResponse: stamp: 's 11/12/2023 21:48:58'!
processResponse: aResponse

	^aResponse isSuccess 
		ifTrue:[(WebUtils jsonDecode: ((aResponse content) readStream)) asOrderedCollection] 
		ifFalse:[self error: aResponse content]!

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!
!TusLibrosClientRestInterface methodsFor: 'async' stamp: 's 11/12/2023 21:50:22' prior: 50381204!
asynchronicallyDo: aBlock withSuccessResponseDo:anotherBlock 
	
	[|response| response:= aBlock value.anotherBlock valueWithPossibleArgument: response]fork! !

TusLibrosServerRestInterface installForDefaultSystem.
TusLibrosClientTestWindow open!

----QUIT----(12 November 2023 21:52:31) CuisUniversity-5981.image priorSource: 1465299!