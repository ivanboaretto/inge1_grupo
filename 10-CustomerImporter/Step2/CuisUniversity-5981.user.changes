

----STARTUP---- (20 November 2023 14:59:19) as /home/totorroto/Desktop/CustomerImport/linux64/CuisUniversity-5981.image!


----End fileIn of /home/totorroto/Downloads/Step2/CustomerImporter-36.st----!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:07:45' prior: 50660494!
test01Import
	
	CustomerImporter valueFrom: self validImportData into: session.
	
	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:08:07' prior: 50660747 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:09:25'!
createNewCustomerBasedOn: customerData

	newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:09:25' prior: 50660904 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			self createNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:09:33' prior: 50660935!
createNewCustomerBasedOn: customerData
	
	newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth! !

!methodRemoval: CustomerImporter #createNewCustomerBasedOn: stamp: 'TAO 11/20/2023 15:10:20'!
createNewCustomerBasedOn: customerData
	
	newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:10:20' prior: 50660948 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:10:45' prior: 50660998 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:11:02'!
changeNewCustomerBasedOn: customerData

	newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
newCustomer identificationNumber: customerData fifth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:11:02' prior: 50661030 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			
			self changeNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:11:06' prior: 50661074 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			self changeNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:11:16' prior: 50661101 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			self changeNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			newCustomer addAddress: newAddress.].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:11:42' prior: 50661128 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			self changeNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData |
			addressData := line findTokens: $,.
			[ |newAddress| newAddress := Address new.
			
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			newCustomer addAddress: newAddress.]
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:11:54'!
createNewAddressBasedOn: addressData

	^ [ |newAddress| newAddress := Address new.
			
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			newCustomer addAddress: newAddress.]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:11:54' prior: 50661155 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		(line beginsWith: 'C') ifTrue: [ | customerData |
			customerData := line findTokens: $,.
			self changeNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData |
			addressData := line findTokens: $,.
			self createNewAddressBasedOn: addressData
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:12:51' prior: 50661197 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ 
		(line beginsWith: 'C') ifTrue: [ | customerData data |
			data := line findTokens: $,.
	customerData := data.
			self changeNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData |
			addressData := line findTokens: $,.
			self createNewAddressBasedOn: addressData
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:13:20' prior: 50661215 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		(line beginsWith: 'C') ifTrue: [ | customerData  |
			data := line findTokens: $,.
	customerData := data.
			self changeNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData |
			addressData := line findTokens: $,.
			self createNewAddressBasedOn: addressData
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:13:28' prior: 50661234 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ | customerData  |
	customerData := data.
			self changeNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData |
			addressData := line findTokens: $,.
			self createNewAddressBasedOn: addressData
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:13:33' prior: 50661253 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ | customerData  |
	customerData := data.
			self changeNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ | addressData |
			addressData := data.
			self createNewAddressBasedOn: addressData
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:13:48' prior: 50661272 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ | customerData  |
	customerData := data.
			self changeNewCustomerBasedOn: customerData.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ self createNewAddressBasedOn: data
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:13:52' prior: 50661290 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ self changeNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ self createNewAddressBasedOn: data
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:13:57' prior: 50661307 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			self changeNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [ self createNewAddressBasedOn: data
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:13:59' prior: 50661322 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			self changeNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [
			 self createNewAddressBasedOn: data
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:14:36' prior: 50661181!
createNewAddressBasedOn: addressData

	 |newAddress| 
	^[newAddress := Address new.
			
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber . 
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber .
	newAddress province: addressData sixth.
		newCustomer addAddress: newAddress].! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:14:38'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 15:14:38'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'TAO 11/20/2023 15:14:38'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'TAO 11/20/2023 15:14:38'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'TAO 11/20/2023 15:14:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'TAO 11/20/2023 15:14:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'TAO 11/20/2023 15:14:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'TAO 11/20/2023 15:14:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'TAO 11/20/2023 15:14:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'TAO 11/20/2023 15:14:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'TAO 11/20/2023 15:14:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'TAO 11/20/2023 15:14:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'TAO 11/20/2023 15:14:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'TAO 11/20/2023 15:14:41'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:14:41'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:14:42'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:14:42'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:14:43'!
PASSED!

!testRun: #SmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:14:44'!
PASSED!

!testRun: #SmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:14:46'!
PASSED!

!testRun: #SmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:14:47'!
PASSED!

!testRun: #SmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 15:14:47'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'TAO 11/20/2023 15:14:47'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 15:14:47'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 15:14:48'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'TAO 11/20/2023 15:14:48'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'TAO 11/20/2023 15:14:48'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'TAO 11/20/2023 15:14:48'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'TAO 11/20/2023 15:14:48'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'TAO 11/20/2023 15:14:48'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'TAO 11/20/2023 15:14:49'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:14:49'!
PASSED!

!testRun: #SmalltalkCompleterTest #testMessages stamp: 'TAO 11/20/2023 15:14:50'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:11:54' prior: 50661352!
createNewAddressBasedOn: addressData

	^ [ |newAddress| newAddress := Address new.
			
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			newCustomer addAddress: newAddress.]! !

!methodRemoval: CustomerImporter #createNewAddressBasedOn: stamp: 'TAO 11/20/2023 15:15:44'!
createNewAddressBasedOn: addressData

	^ [ |newAddress| newAddress := Address new.
			
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber . 
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth.
			newCustomer addAddress: newAddress.]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:15:44' prior: 50661337 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			self changeNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [
			  [ |newAddress| newAddress := Address new.
			
			newAddress streetName: data second.
			newAddress streetNumber: data third asNumber . 
			newAddress town: data fourth.
			newAddress zipCode: data fifth asNumber .
			newAddress province: data sixth.
			newCustomer addAddress: newAddress.]
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:16:04' prior: 50661634 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			self changeNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [
			 |newAddress| 
			newAddress := Address new.
			
			newAddress streetName: data second.
			newAddress streetNumber: data third asNumber . 
			newAddress town: data fourth.
			newAddress zipCode: data fifth asNumber .
			newAddress province: data sixth.
			newCustomer addAddress: newAddress.
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:16:28' prior: 50661657 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			self changeNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [
			 |newAddress| 
			newAddress := Address new;
			
			 streetName: data second;
			 streetNumber: data third asNumber; 
			 town: data fourth;
			 zipCode: data fifth asNumber;
			 province: data sixth.
			newCustomer addAddress: newAddress.
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:16:35' prior: 50661680 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			self changeNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [
			 |newAddress| 
			newAddress := Address new;
			 streetName: data second;
			 streetNumber: data third asNumber; 
			 town: data fourth;
			 zipCode: data fifth asNumber;
			 province: data sixth.
			newCustomer addAddress: newAddress.
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:17:31'!
createNewAddress: data

	^ Address new;
			 streetName: data second;
			 streetNumber: data third asNumber; 
			 town: data fourth;
			 zipCode: data fifth asNumber;
			 province: data sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:17:31' prior: 50661702 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			self changeNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [
			 |newAddress| 
			newAddress := self createNewAddress: data.
			newCustomer addAddress: newAddress.
			].
			
		line := readStream nextLine. ].
			
	! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:17:36'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:17:36'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:17:46' prior: 50661722!
createNewAddress: data

	^ Address new
			 streetName: data second;
			 streetNumber: data third asNumber; 
			 town: data fourth;
			 zipCode: data fifth asNumber;
			 province: data sixth! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:17:48'!
PASSED!
!Address methodsFor: 'street' stamp: 'TAO 11/20/2023 15:20:44'!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	self
		 streetName: anStreetName ;
		 streetNumber: aStreetNumber ; 
		 town: aTown ;
		 zipCode: aZipCode ;
		 province: aProvince ! !
!Address class methodsFor: 'no messages' stamp: 'TAO 11/20/2023 15:21:19'!
withStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	^self initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince! !
!Address class methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:21:23' prior: 50661776!
withStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	^self new initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:21:26'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:22:27' prior: 50661754!
createNewAddress: data
	
	^ Address withStreetName:data second  withStreetNumber: data third asNumber placedAtTown:  data fourthwithZipCode: data fifth asNumber inProvince: data sixth.! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:22:30'!
ERROR!

!testRun: #SmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 15:22:31'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'TAO 11/20/2023 15:22:31'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'TAO 11/20/2023 15:22:31'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'TAO 11/20/2023 15:22:32'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'TAO 11/20/2023 15:22:32'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'TAO 11/20/2023 15:22:32'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'TAO 11/20/2023 15:22:32'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'TAO 11/20/2023 15:22:32'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'TAO 11/20/2023 15:22:32'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'TAO 11/20/2023 15:22:32'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'TAO 11/20/2023 15:22:32'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'TAO 11/20/2023 15:22:32'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:22:33'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:22:33'!
ERROR!

!testRun: #SmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'TAO 11/20/2023 15:22:34'!
PASSED!

!testRun: #SmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:22:36'!
PASSED!

!testRun: #SmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:22:37'!
PASSED!

!testRun: #SmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:22:38'!
PASSED!

!testRun: #SmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:22:39'!
PASSED!

!testRun: #SmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:22:40'!
PASSED!

!testRun: #SmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 15:22:40'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'TAO 11/20/2023 15:22:40'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 15:22:40'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 15:22:41'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'TAO 11/20/2023 15:22:41'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'TAO 11/20/2023 15:22:41'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'TAO 11/20/2023 15:22:41'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'TAO 11/20/2023 15:22:41'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'TAO 11/20/2023 15:22:41'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'TAO 11/20/2023 15:22:42'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 15:22:42'!
PASSED!

!testRun: #SmalltalkCompleterTest #testMessages stamp: 'TAO 11/20/2023 15:22:44'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:23:37' prior: 50661802!
createNewAddress: data
	
	^ Address withStreetName: data second  withStreetNumber: data third asNumber placedAtTown:  data fourth withZipCode: data fifth asNumber inProvince: data sixth.
	
	! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:23:39'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:24:08'!
createNewAddressBasedOn: data
	
	^ Address withStreetName: data second  withStreetNumber: data third asNumber placedAtTown:  data fourth withZipCode: data fifth asNumber inProvince: data sixth.
	
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:24:08' prior: 50661732 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			self changeNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [
			 |newAddress| 
			newAddress := self createNewAddressBasedOn: data.
			newCustomer addAddress: newAddress.
			].
			
		line := readStream nextLine. ].
			
	! !

!methodRemoval: CustomerImporter #createNewAddress: stamp: 'TAO 11/20/2023 15:24:08'!
createNewAddress: data
	
	^ Address withStreetName: data second  withStreetNumber: data third asNumber placedAtTown:  data fourth withZipCode: data fifth asNumber inProvince: data sixth.
	
	!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:25:25' prior: 50661061!
changeNewCustomerBasedOn: customerData

	newCustomer := Customer new
			 firstName: customerData second;
			 lastName: customerData third;
			 identificationType: customerData fourth;
 identificationNumber: customerData fifth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:25:35'!
createNewCustomerBasedOn: data

	^ Customer new
			 firstName: data second;
			 lastName: data third;
			 identificationType: data fourth;
 identificationNumber: data fifth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:25:35' prior: 50662096!
changeNewCustomerBasedOn: customerData

	newCustomer := self createNewCustomerBasedOn: customerData! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:25:44' prior: 50662106!
createNewCustomerBasedOn: customerData

	^ Customer new
			 firstName: customerData second;
			 lastName: customerData third;
			 identificationType: customerData fourth;
 identificationNumber: customerData fifth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:26:20' prior: 50662122!
createNewCustomerBasedOn: customerData

	^ Customer withFirstName: customerData second
			 withLastName: customerData third;
			 withIdentificationType: customerData fourth;
 withIdentificationNumber: customerData fifth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:26:25' prior: 50662132!
createNewCustomerBasedOn: customerData

	^ Customer withFirstName: customerData second
			 withLastName: customerData third
			 withIdentificationType: customerData fourth
 withIdentificationNumber: customerData fifth! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:26:27'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:26:29'!
ERROR!
!Customer class methodsFor: 'instance creation' stamp: 'TAO 11/20/2023 15:26:34'!
withFirstName: aRenameMe1 withLastName: aRenameMe2 withIdentificationType: aRenameMe3 withIdentificationNumber: aRenameMe4 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithFirstName: aRenameMe1 withLastName: aRenameMe2 withIdentificationType: aRenameMe3 withIdentificationNumber: aRenameMe4 ! !
!Customer class methodsFor: 'instance creation' stamp: 'TAO 11/20/2023 15:26:37' prior: 50662157!
withFirstName: aRenameMe1 withLastName: aRenameMe2 withIdentificationType: aRenameMe3 withIdentificationNumber: aRenameMe4 
	
	^self new initializeWithFirstName: aRenameMe1 withLastName: aRenameMe2 withIdentificationType: aRenameMe3 withIdentificationNumber: aRenameMe4 ! !
!Customer class methodsFor: 'instance creation' stamp: 'TAO 11/20/2023 15:26:40' prior: 50662172!
withFirstName: aFirstName withLastName: aRenameMe2 withIdentificationType: aRenameMe3 withIdentificationNumber: aRenameMe4 
	
	^self new initializeWithFirstName: aFirstName withLastName: aRenameMe2 withIdentificationType: aRenameMe3 withIdentificationNumber: aRenameMe4 ! !
!Customer class methodsFor: 'instance creation' stamp: 'TAO 11/20/2023 15:26:45' prior: 50662184!
withFirstName: aFirstName withLastName: aSecondName withIdentificationType: aRenameMe3 withIdentificationNumber: aRenameMe4 
	
	^self new initializeWithFirstName: aFirstName withLastName: aSecondName withIdentificationType: aRenameMe3 withIdentificationNumber: aRenameMe4 ! !
!Customer class methodsFor: 'instance creation' stamp: 'TAO 11/20/2023 15:26:51' prior: 50662196!
withFirstName: aFirstName withLastName: aSecondName withIdentificationType: anIdType withIdentificationNumber: aRenameMe4 
	
	^self new initializeWithFirstName: aFirstName withLastName: aSecondName withIdentificationType: anIdType withIdentificationNumber: aRenameMe4 ! !
!Customer class methodsFor: 'instance creation' stamp: 'TAO 11/20/2023 15:26:56' prior: 50662208!
withFirstName: aFirstName withLastName: aSecondName withIdentificationType: anIdType withIdentificationNumber: anIdNumber 
	
	^self new initializeWithFirstName: aFirstName withLastName: aSecondName withIdentificationType: anIdType withIdentificationNumber: anIdNumber ! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:26:58'!
ERROR!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'TAO 11/20/2023 15:27:06'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses secondName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'TAO 11/20/2023 15:27:06'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses secondName idType'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'TAO 11/20/2023 15:27:07'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses secondName idType idNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!Customer methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:27:07'!
initializeWithFirstName: aFirstName withLastName: aSecondName withIdentificationType: anIdType withIdentificationNumber: anIdNumber 
	self shouldBeImplemented.
	firstName := aFirstName.
	secondName := aSecondName.
	idType := anIdType.
	idNumber := anIdNumber.! !
!Customer methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:27:09' prior: 50662263!
initializeWithFirstName: aFirstName withLastName: aSecondName withIdentificationType: anIdType withIdentificationNumber: anIdNumber 
	
	firstName := aFirstName.
	secondName := aSecondName.
	idType := anIdType.
	idNumber := anIdNumber.! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:27:13'!
ERROR!
!Customer methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:27:22' prior: 50662274!
initializeWithFirstName: aFirstName withLastName: aSecondName withIdentificationType: anIdType withIdentificationNumber: anIdNumber 
	super initialize.
	addresses := OrderedCollection new.
	firstName := aFirstName.
	secondName := aSecondName.
	idType := anIdType.
	idNumber := anIdNumber.! !

!methodRemoval: Customer #initialize stamp: 'TAO 11/20/2023 15:27:24'!
initialize

	super initialize.
	addresses := OrderedCollection new.!
!Customer methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:27:54' prior: 50662287!
initializeWithFirstName: aFirstName withLastName: aSecondName withIdentificationType: anIdType withIdentificationNumber: anIdNumber 
	super initialize.
	addresses := OrderedCollection new.
	
	firstName := aFirstName.
	lastName := aSecondName.
	identificationType := anIdType.
	identificationNumber := anIdNumber.! !

Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!classDefinition: #Customer category: 'CustomerImporter' stamp: 'TAO 11/20/2023 15:28:02'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:28:04'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:29:03' prior: 50662070 overrides: 16902254!
value 

	
	|  line |
	
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [
			 |newAddress| 
			newAddress := self createNewAddressBasedOn: data.
			newCustomer addAddress: newAddress.
			].
			
		line := readStream nextLine. ].
			
	! !

!methodRemoval: CustomerImporter #changeNewCustomerBasedOn: stamp: 'TAO 11/20/2023 15:29:06'!
changeNewCustomerBasedOn: customerData

	newCustomer := self createNewCustomerBasedOn: customerData!
!Customer methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:29:27' prior: 50662304!
initializeWithFirstName: aFirstName withLastName: aSecondName withIdentificationType: anIdType withIdentificationNumber: anIdNumber 
	super initialize.
	addresses := OrderedCollection new.
	firstName := aFirstName.
	lastName := aSecondName.
	identificationType := anIdType.
	identificationNumber := anIdNumber.! !

!methodRemoval: Customer #identificationType: stamp: 'TAO 11/20/2023 15:29:33'!
identificationType: anIdentificationType 

	identificationType := anIdentificationType!

!methodRemoval: Customer #identificationNumber: stamp: 'TAO 11/20/2023 15:29:46'!
identificationNumber: anIdentificationNumber
 
	identificationNumber := anIdentificationNumber!

!methodRemoval: Customer #firstName: stamp: 'TAO 11/20/2023 15:29:50'!
firstName: aName
 
	firstName := aName!

!methodRemoval: Customer #lastName: stamp: 'TAO 11/20/2023 15:29:52'!
lastName: aLastName
 
	lastName := aLastName
!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:29:59'!
PASSED!
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:31:01' prior: 50661765!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	self
		 streetName: anStreetName.
		 self streetNumber: aStreetNumber .
		self  town: aTown.
		 self zipCode: aZipCode.
		self province: aProvince .! !

!methodRemoval: Address #streetName: stamp: 'TAO 11/20/2023 15:31:13'!
streetName: aStreetName
 
	streetName := aStreetName !
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:31:13' prior: 50662393!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	streetName := anStreetName .
		 self streetNumber: aStreetNumber .
		self  town: aTown.
		 self zipCode: aZipCode.
		self province: aProvince .! !

!methodRemoval: Address #streetNumber: stamp: 'TAO 11/20/2023 15:31:22'!
streetNumber: aStreetNumber
 
	streetNumber := aStreetNumber !
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:31:22' prior: 50662409!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	streetName := anStreetName .
		 streetNumber := aStreetNumber  .
		self  town: aTown.
		 self zipCode: aZipCode.
		self province: aProvince .! !
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:31:28' prior: 50662425!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	streetName := anStreetName .
		 streetNumber := aStreetNumber  .
		self town: aTown.
		 self zipCode: aZipCode.
		self province: aProvince .! !
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:31:35' prior: 50662437!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	streetName := anStreetName .
		 streetNumber := aStreetNumber  .
		self town:aTown.
		 self zipCode: aZipCode.
		self province: aProvince .! !
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:31:41' prior: 50662449!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	streetName := anStreetName .
		 streetNumber := aStreetNumber  .
		self town:                  aTown.
		 self zipCode: aZipCode.
		self province: aProvince .! !

!methodRemoval: Address #town: stamp: 'TAO 11/20/2023 15:31:48'!
town: aTown
 
	town := aTown!
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:31:48' prior: 50662461!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	streetName := anStreetName .
		 streetNumber := aStreetNumber  .
		town := aTown.
		 self zipCode: aZipCode.
		self province: aProvince .! !

!methodRemoval: Address #zipCode: stamp: 'TAO 11/20/2023 15:31:55'!
zipCode: aZipCode
 
	zipCode := aZipCode!
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:31:55' prior: 50662476!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	streetName := anStreetName .
		 streetNumber := aStreetNumber  .
		town := aTown.
		 zipCode := aZipCode.
		self province: aProvince .! !

!methodRemoval: Address #province: stamp: 'TAO 11/20/2023 15:32:01'!
province: aProvince
 
	province := aProvince
	!
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:32:01' prior: 50662491!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	streetName := anStreetName .
		 streetNumber := aStreetNumber  .
		town := aTown.
		 zipCode := aZipCode.
		province := aProvince
	 .! !
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:32:11' prior: 50662506!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince
streetName := anStreetName .
streetNumber := aStreetNumber  .
town := aTown.
zipCode := aZipCode.
province := aProvince
	 .! !
!Address methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:32:19' prior: 50662518!
initializeWithStreetName: anStreetName withStreetNumber: aStreetNumber placedAtTown:aTown withZipCode: aZipCode inProvince:aProvince

	streetName := anStreetName .
	streetNumber := aStreetNumber  .
	town := aTown.
	zipCode := aZipCode.
	province := aProvince
	 .! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:32:26'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:32:34' prior: 50662336 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(line beginsWith: 'C') ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [
			 |newAddress| 
			newAddress := self createNewAddressBasedOn: data.
			newCustomer addAddress: newAddress.
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:33:07'!
lineIsForDecodingCustomer: line

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:33:07' prior: 50662544 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer: line) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(line beginsWith: 'A') ifTrue: [
			 |newAddress| 
			newAddress := self createNewAddressBasedOn: data.
			newCustomer addAddress: newAddress.
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:33:21'!
lineIsForDecodingAddresses: line

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:33:21' prior: 50662567 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer: line) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(self lineIsForDecodingAddresses: line) ifTrue: [
			 |newAddress| 
			newAddress := self createNewAddressBasedOn: data.
			newCustomer addAddress: newAddress.
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:33:53' prior: 50662590 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer: line) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(self lineIsForDecodingAddresses: line) ifTrue: [
			 newCustomer addAddress: self createNewAddressBasedOn: data.
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:34:04' prior: 50662609 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer: line) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(self lineIsForDecodingAddresses: line) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:34:08' prior: 50662626 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer: line) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		(self lineIsForDecodingAddresses: line) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:34:11' prior: 50662644 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer: line) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(self lineIsForDecodingAddresses: line) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:34:12' prior: 50662661 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		
		(self lineIsForDecodingCustomer: line) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(self lineIsForDecodingAddresses: line) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			].
			
		line := readStream nextLine. ].
			
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'TAO 11/20/2023 15:35:04'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer decodingProcdedures'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:35:03' prior: 50660741!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new.! !
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:35:20' prior: 50662705!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new at:'C'.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:35:45'!
hacerAlgoSiCustomer: data

	^ [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:35:45' prior: 50662679 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		
		(self lineIsForDecodingCustomer: line) ifTrue: self hacerAlgoSiCustomer: data.
		
		(self lineIsForDecodingAddresses: line) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:35:49' prior: 50662728 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		
		(self lineIsForDecodingCustomer: line) ifTrue: (self hacerAlgoSiCustomer: data).
		
		(self lineIsForDecodingAddresses: line) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			].
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:35:59'!
hacerAlgoSiAddress: data

	^ [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:35:59' prior: 50662744 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		
		(self lineIsForDecodingCustomer: line) ifTrue: (self hacerAlgoSiCustomer: data).
		
		(self lineIsForDecodingAddresses: line) ifTrue: self hacerAlgoSiAddress: data.
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:36:09' prior: 50662766 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		
		(self lineIsForDecodingCustomer: line) ifTrue: (self hacerAlgoSiCustomer: data).
		
		(self lineIsForDecodingAddresses: line) ifTrue:( self hacerAlgoSiAddress: data).
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:36:59' prior: 50662780 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		
		(self lineIsForDecodingCustomer: line) ifTrue: [self hacerAlgoSiCustomer: data].
		
		(self lineIsForDecodingAddresses: line) ifTrue:( self hacerAlgoSiAddress: data).
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:37:20' prior: 50662713!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new at:'C' put: [:data| self hacerAlgoSiCustomer: data].! !
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:37:43' prior: 50662809!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:'C' put: [:data| self hacerAlgoSiCustomer: data];
								at:'A' put:[:data | self hacerAlgoSiAddress: data]! !
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:37:48' prior: 50662818!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:'C' put: [:customerData| self hacerAlgoSiCustomer: customerData];
								at:'A' put:[:data | self hacerAlgoSiAddress: data]! !
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:37:52' prior: 50662829!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:'C' put: [:customerData| self hacerAlgoSiCustomer: customerData];
								at:'A' put:[:addressData | self hacerAlgoSiAddress: addressData]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:38:24' prior: 50662795 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		
		(self lineIsForDecodingCustomer: line) ifTrue: (self hacerAlgoSiCustomer: data).
		
		(self lineIsForDecodingAddresses: line) ifTrue:( self hacerAlgoSiAddress: data).
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:38:55' prior: 50662854 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		
		
		(self lineIsForDecodingCustomer: line) ifTrue: (self hacerAlgoSiCustomer: data).
		
		(self lineIsForDecodingAddresses: line) ifTrue:( self hacerAlgoSiAddress: data).
			
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:39:59' prior: 50662869 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		
		 (decodingProcdedures at: line first) value:data.
			
		line := readStream nextLine. ].
			
	! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:40:00'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:40:01'!
ERROR!
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:40:25' prior: 50662841!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:'C' put: [:customerData| self hacerAlgoSiCustomer: customerData];
								at:'A' put:[:addressData | self hacerAlgoSiAddress: addressData];yourself! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:40:27'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:40:28'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:40:37'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:40:39'!
ERROR!

key!
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:41:07' prior: 50662899!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:$C put: [:customerData| self hacerAlgoSiCustomer: customerData];
								at:$A put:[:addressData | self hacerAlgoSiAddress: addressData];yourself! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:41:08'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:41:10'!
ERROR!

key!

tables!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:41:57'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:41:58'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:42:06'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:42:10'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:42:36' prior: 50662884 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		 (decodingProcdedures at: line first) value:data.
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:42:39' prior: 50662950 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(decodingProcdedures at: line first) value:data.
		line := readStream nextLine. ].
			
	! !

(decodingProcdedures at: line first)!

(decodingProcdedures at: line first)!

(decodingProcdedures at: line first)!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:44:14' prior: 50662720!
hacerAlgoSiCustomer: data

	^ [ :customerData|newCustomer := self createNewCustomerBasedOn: customerData. session persist: newCustomer ] value:data.! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:44:26' prior: 50662975!
hacerAlgoSiCustomer: data

	^ [ :customerData|newCustomer := self createNewCustomerBasedOn: customerData. session persist: newCustomer ] .! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:44:40' prior: 50662759!
hacerAlgoSiAddress: data

	^ [:addressData|
			 newCustomer addAddress: (self createNewAddressBasedOn: addressData).
			]! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:44:44'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:44:46'!
ERROR!
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:45:49' prior: 50662922!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:$C put: [:customerData| (self hacerAlgoSiCustomer: customerData)value:customerData];
								at:$A put: [:addressData | (self hacerAlgoSiAddress: addressData)value:addressData];yourself! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:45:51'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:46:03'!
hacerAlgoSiCustomer

	^ [ :customerData|newCustomer := self createNewCustomerBasedOn: customerData. session persist: newCustomer ] .! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:46:03' prior: 50663003!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:$C put: [:customerData| (self hacerAlgoSiCustomer)value:customerData];
								at:$A put: [:addressData | (self hacerAlgoSiAddress: addressData)value:addressData];yourself! !

!methodRemoval: CustomerImporter #hacerAlgoSiCustomer: stamp: 'TAO 11/20/2023 15:46:03'!
hacerAlgoSiCustomer: data

	^ [ :customerData|newCustomer := self createNewCustomerBasedOn: customerData. session persist: newCustomer ] .!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:46:11'!
hacerAlgoSiAddress

	^ [:addressData|
			 newCustomer addAddress: (self createNewAddressBasedOn: addressData).
			]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:46:11' prior: 50663027!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:$C put: [:customerData| (self hacerAlgoSiCustomer)value:customerData];
								at:$A put: [:addressData | (self hacerAlgoSiAddress)value:addressData];yourself! !

!methodRemoval: CustomerImporter #hacerAlgoSiAddress: stamp: 'TAO 11/20/2023 15:46:11'!
hacerAlgoSiAddress: data

	^ [:addressData|
			 newCustomer addAddress: (self createNewAddressBasedOn: addressData).
			]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:46:19' prior: 50663047!
hacerAlgoSiAddress

	^ [:addressData|newCustomer addAddress: (self createNewAddressBasedOn: addressData).]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:46:21' prior: 50663074!
hacerAlgoSiAddress

	^ [:addressData| newCustomer addAddress: (self createNewAddressBasedOn: addressData).]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:46:23' prior: 50663081!
hacerAlgoSiAddress

	^ [:addressData| newCustomer addAddress: (self createNewAddressBasedOn: addressData)]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:46:38' prior: 50663088!
hacerAlgoSiAddress
	^ [:addressData| newCustomer addAddress: (self createNewAddressBasedOn: addressData)]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:47:16'!
decodeCustomerIn

	^ [ :customerData|newCustomer := self createNewCustomerBasedOn: customerData. session persist: newCustomer ] .! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:47:16' prior: 50663054!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:$C put: [:customerData| (self decodeCustomerIn)value:customerData];
								at:$A put: [:addressData | (self hacerAlgoSiAddress)value:addressData];yourself! !

!methodRemoval: CustomerImporter #hacerAlgoSiCustomer stamp: 'TAO 11/20/2023 15:47:16'!
hacerAlgoSiCustomer

	^ [ :customerData|newCustomer := self createNewCustomerBasedOn: customerData. session persist: newCustomer ] .!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:47:36'!
decodeCustomerIn: aCustomerData

	^ [ :customerData|newCustomer := self createNewCustomerBasedOn: customerData. session persist: newCustomer ] .! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:47:36' prior: 50663109!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:$C put: [:customerData| (self decodeCustomerIn: self halt)value:customerData];
								at:$A put: [:addressData | (self hacerAlgoSiAddress)value:addressData];yourself! !

!methodRemoval: CustomerImporter #decodeCustomerIn stamp: 'TAO 11/20/2023 15:47:36'!
decodeCustomerIn

	^ [ :customerData|newCustomer := self createNewCustomerBasedOn: customerData. session persist: newCustomer ] .!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:47:48'!
decodeAddressIn
	^ [:addressData| newCustomer addAddress: (self createNewAddressBasedOn: addressData)]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:47:48' prior: 50663136!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:$C put: [:customerData| (self decodeCustomerIn: self halt)value:customerData];
								at:$A put: [:addressData | (self decodeAddressIn)value:addressData];yourself! !

!methodRemoval: CustomerImporter #hacerAlgoSiAddress stamp: 'TAO 11/20/2023 15:47:48'!
hacerAlgoSiAddress
	^ [:addressData| newCustomer addAddress: (self createNewAddressBasedOn: addressData)]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:48:07'!
decodeAddressIn: aCustomerData
	^ [:addressData| newCustomer addAddress: (self createNewAddressBasedOn: addressData)]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:48:07' prior: 50663162!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:$C put: [:customerData| (self decodeCustomerIn: self halt)value:customerData];
								at:$A put: [:addressData | (self decodeAddressIn: self halt)value:addressData];yourself! !

!methodRemoval: CustomerImporter #decodeAddressIn stamp: 'TAO 11/20/2023 15:48:07'!
decodeAddressIn
	^ [:addressData| newCustomer addAddress: (self createNewAddressBasedOn: addressData)]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:48:27' prior: 50663128!
decodeCustomerIn: anAddressData

	^ [ :customerData|newCustomer := self createNewCustomerBasedOn: customerData. session persist: newCustomer ] .! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:48:34' prior: 50663207!
decodeCustomerIn: aCustomerData

	^ [ :customerData|newCustomer := self createNewCustomerBasedOn: customerData. session persist: newCustomer ] .! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:48:46' prior: 50663215!
decodeCustomerIn: aCustomerData

	newCustomer := self createNewCustomerBasedOn: aCustomerData. session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:48:51' prior: 50663223!
decodeCustomerIn: aCustomerData

	newCustomer := self createNewCustomerBasedOn: aCustomerData. 
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:49:06' prior: 50663181!
decodeAddressIn: aCustomerData
	newCustomer addAddress: (self createNewAddressBasedOn: aCustomerData).! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:49:11' prior: 50663237!
decodeAddressIn: anAddressData
	newCustomer addAddress: (self createNewAddressBasedOn: anAddressData).! !
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 15:50:19' prior: 50663188!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcdedures :=Dictionary new 
								at:$C put: [:customerData| (self decodeCustomerIn: customerData)];
								at:$A put: [:addressData | (self decodeAddressIn: addressData)];yourself! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:50:21'!
PASSED!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'TAO 11/20/2023 15:50:41'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer decodingProcedures'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:50:41' prior: 50663251!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	decodingProcedures :=Dictionary new 
								at:$C put: [:customerData| (self decodeCustomerIn: customerData)];
								at:$A put: [:addressData | (self decodeAddressIn: addressData)];yourself! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:50:41' prior: 50662961 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(decodingProcedures at: line first) value:data.
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:50:59' prior: 50663288 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		(decodingProcedures at: line first)value:data.
		line := readStream nextLine. ].
			
	! !

!methodRemoval: CustomerImporter #lineIsForDecodingAddresses: stamp: 'TAO 11/20/2023 15:51:29'!
lineIsForDecodingAddresses: line

	^ line beginsWith: 'A'!

!methodRemoval: CustomerImporter #lineIsForDecodingCustomer: stamp: 'TAO 11/20/2023 15:51:32'!
lineIsForDecodingCustomer: line

	^ line beginsWith: 'C'!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:52:54'!
test02Import
	
	CustomerImporter valueFrom: self InvalidImportData into: session.
	
	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 15:53:03' prior: 50663318!
test02Import
	
	CustomerImporter valueFrom: self invalidImportData into: session.
	
	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:53:53' prior: 50663328!
test02Import
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: 'invalid begin of line'
	
	! !

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 15:53:55'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 15:54:04'!
invalidImportData
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 15:54:21' prior: 50663349!
invalidImportData
	^ ReadStream on: 
'C,Pepe,Sanchez,D,22333444
B,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:54:26'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 15:54:26'!
FAILURE!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 15:54:26'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:55:00' prior: 50663338!
test02Import
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidBeginOfLine
	
	! !

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 15:55:02'!
ERROR!
!CustomerImporter class methodsFor: 'error' stamp: 'TAO 11/20/2023 15:55:14'!
invalidBeginOfLine
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error' stamp: 'TAO 11/20/2023 15:55:23' prior: 50663383!
invalidBeginOfLine
	'invalid begin of line'! !
!CustomerImporter class methodsFor: 'error' stamp: 'TAO 11/20/2023 15:55:25' prior: 50663388!
invalidBeginOfLine
	^'invalid begin of line'! !

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 15:55:26'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 15:56:13' prior: 50663299 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		[(decodingProcedures at: line first)value:data] on: Error do:[self error: self class invalidBeginOfLine].
		line := readStream nextLine. ].
			
	! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:56:15'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 15:56:15'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 15:56:43' prior: 50663354!
invalidImportData
	^ ReadStream on: 
'B,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:57:36' prior: 50663371!
test02Import
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidBeginOfLine.
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:57:51' prior: 50663426!
test02Import
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidBeginOfLine.
		
	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly 
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:58:01' prior: 50663435!
test02Import
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidBeginOfLine.
		
	 self assert: 2 equals: (session selectAllOfType: Customer) size.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly 
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:58:09' prior: 50663449!
test02Import
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidBeginOfLine.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly 
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:58:16' prior: 50663463!
test02Import
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidBeginOfLine.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	self assertPepeSanchezWasImportedCorrecty.
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:58:24' prior: 50663477!
test02Import
	
	| importedCustomer |
	elf 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidBeginOfLine.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:58:30' prior: 50663490!
test02Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidBeginOfLine.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:59:14' prior: 50663514!
test02Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidBeginOfLine.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	self assertAddressOf: importedCustomer at: 'San Martin' hasNumber: 3322 town: 'Olivos' zipCode: 1636 province: 'BsAs'.
self assertAddressOf: importedCustomer at: 'Maipu' hasNumber: 888 town: 'Florida' zipCode: 1122 province: 'Buenos Aires'.
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 15:59:16' prior: 50663538!
test02Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidBeginOfLine.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:59:18'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 15:59:19'!
ERROR!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 15:59:40'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 15:59:56' prior: 50663417!
invalidImportData
	^ ReadStream on: 
'C,Pepe,Sanchez,D,22333444
B,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 15:59:59'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 16:00:00'!
PASSED!
!CustomerImporter class methodsFor: 'error' stamp: 'TAO 11/20/2023 16:02:59'!
invalidLineErrorDescription
	^'invalid begin of line'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 16:02:59' prior: 50663401 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ line notNil ] whileTrue: [ |data|
		data := line findTokens: $,.
		[(decodingProcedures at: line first)value:data] on: Error do:[self error: self class invalidLineErrorDescription].
		line := readStream nextLine. ].
			
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 16:02:59' prior: 50663564!
test02Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !

!methodRemoval: CustomerImporter class #invalidBeginOfLine stamp: 'TAO 11/20/2023 16:02:59'!
invalidBeginOfLine
	^'invalid begin of line'!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 16:04:05'!
invalidImportDataBecauseOfInvalidLineType
	^ ReadStream on: 
'C,Pepe,Sanchez,D,22333444
B,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 16:04:05' prior: 50663622!
test02Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfInvalidLineType into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !

!methodRemoval: ImportTest #invalidImportData stamp: 'TAO 11/20/2023 16:04:05'!
invalidImportData
	^ ReadStream on: 
'C,Pepe,Sanchez,D,22333444
B,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 16:04:37'!
test03Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfMissingField into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 16:05:00' prior: 50663681!
test03Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfAddressWithNoCustomer into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 16:05:16' prior: 50663654!
test02Import
	
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfInvalidLineType into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	
	
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 16:05:45'!
test04Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfAddressWithNoCustomer into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 16:04:37' prior: 50663700!
test03Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfMissingField into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 16:04:05' prior: 50663719!
test02Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfInvalidLineType into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 16:06:18'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 16:06:22'!
invalidImportDataBecauseOfMissingField
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 16:06:42' prior: 50663788!
invalidImportDataBecauseOfMissingField
	^ ReadStream on: 
'C,Pepe,Sanchez,D,
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 16:06:47' prior: 50663793!
invalidImportDataBecauseOfMissingField
	^ ReadStream on: 
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 16:06:57' prior: 50663803!
invalidImportDataBecauseOfMissingField
	^ ReadStream on: 
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 16:07:15'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 16:07:15'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 16:07:16'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 16:07:16'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:07:16'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 16:07:25'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 16:07:26'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 16:07:26'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:07:26'!
ERROR!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:07:28'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 16:07:32'!
invalidImportDataBecauseOfAddressWithNoCustomer
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 16:07:59' prior: 50663847!
invalidImportDataBecauseOfAddressWithNoCustomer
	
	^ ReadStream on: 
'
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 16:08:09' prior: 50663729!
test04Import
	
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfAddressWithNoCustomer into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:08:13'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 16:08:19'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 16:08:20'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 16:08:20'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:08:20'!
ERROR!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:08:22'!
ERROR!
!DataBaseSession methodsFor: 'selecting' stamp: 'TAO 11/20/2023 16:09:23' prior: 50660871!
selectAllOfType: aType

	self delay.
	^(tables at: aType ifAbsent:[OrderedCollection new]) copy ! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 16:09:32'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 16:09:32'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 16:09:33'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:09:33'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:09:33'!
PASSED!
!DataBaseSession methodsFor: 'transaction management' stamp: 'TAO 11/20/2023 16:10:16' prior: 50660817!
commit
	
	(tables at: Customer ifAbsent:[^self]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 16:10:20'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 16:10:20'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 16:10:21'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:10:21'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 16:11:26' prior: 50663853!
invalidImportDataBecauseOfAddressWithNoCustomer
	
	^ ReadStream on: 
'
A,San Martin,3322,Olivos,1636,BsAs,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 16:11:31'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 16:11:32'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 16:11:32'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:11:32'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 16:07:59' prior: 50663925!
invalidImportDataBecauseOfAddressWithNoCustomer
	
	^ ReadStream on: 
'
A,San Martin,3322,Olivos,1636,BsAs
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 16:11:47'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 16:11:47'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 16:11:47'!
PASSED!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 16:11:48'!
PASSED!

!classDefinition: #DataBaseSession category: 'CustomerImporter' stamp: 'TAO 11/20/2023 16:19:23'!
Object subclass: #DataBaseSession
	instanceVariableNames: 'configuration tables id inTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!DataBaseSession methodsFor: 'transaction management' stamp: 'TAO 11/20/2023 16:19:21' prior: 50663909!
commit
	inTransaction := false
	"(tables at: Customer ifAbsent:[^self]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]"
	! !
!DataBaseSession methodsFor: 'transaction management' stamp: 'TAO 11/20/2023 16:19:58' prior: 50663974!
commit
	(tables at: Customer ifAbsent:[^self]) do: [ :aCustomer | self persistAddressesOf: aCustomer ]
	! !

----QUIT----(20 November 2023 16:25:27) CuisUniversity-5981.image priorSource: 10522391!

----STARTUP---- (20 November 2023 18:40:07) as /home/totorroto/Desktop/CustomerImport/linux64/CuisUniversity-5981.image!

!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:47:29'!
canKeepImporting: line

	^ line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:47:29' prior: 50663610 overrides: 16902254!
value 

	|  line |
	line := readStream nextLine.
	[ self canKeepImporting: line ] whileTrue: [ |data|
		data := line findTokens: $,.
		[(decodingProcedures at: line first)value:data] on: Error do:[self error: self class invalidLineErrorDescription].
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:47:34' prior: 50664000 overrides: 16902254!
value 

	|  line |
	[ self canKeepImporting: line ] whileTrue: [ |data|
		data := line findTokens: $,.
		[(decodingProcedures at: line first)value:data] on: Error do:[self error: self class invalidLineErrorDescription].
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:47:57' prior: 50663995!
canKeepImporting: line
	
	^ line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:48:03' prior: 50664025!
canKeepImporting: line1
	
	^ line1 notNil! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 18:48:41' prior: 50664013 overrides: 16902254!
value 

	 
	[ self canKeepImporting: line ] whileTrue: [ |data|
		data := line findTokens: $,.
		[(decodingProcedures at: line first)value:data] on: Error do:[self error: self class invalidLineErrorDescription].
		line := readStream nextLine. ].
			
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'TAO 11/20/2023 18:48:41'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer decodingProcedures line'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:48:53' prior: 50664030!
canKeepImporting: line1
	
	^ line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:49:01'!
canKeepImporting
	
	^ line notNil! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 18:49:01' prior: 50664036 overrides: 16902254!
value 

	 
	[ self canKeepImporting] whileTrue: [ |data|
		data := line findTokens: $,.
		[(decodingProcedures at: line first)value:data] on: Error do:[self error: self class invalidLineErrorDescription].
		line := readStream nextLine. ].
			
	! !

!methodRemoval: CustomerImporter #canKeepImporting: stamp: 'TAO 11/20/2023 18:49:01'!
canKeepImporting: line1
	
	^ line notNil!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:49:11' prior: 50664061!
canKeepImporting
	line := readStream nextLine.
	^ line notNil! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:49:16' prior: 50664066 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [ |data|
		data := line findTokens: $,.
		[(decodingProcedures at: line first)value:data] on: Error do:[self error: self class invalidLineErrorDescription].
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:49:21' prior: 50664087 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		 |data|
		data := line findTokens: $,.
		[(decodingProcedures at: line first)value:data] on: Error do:[self error: self class invalidLineErrorDescription].
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:49:38' prior: 50662059!
createNewAddressBasedOn: addressData
	
	^ Address withStreetName: addressData second  withStreetNumber: addressData third asNumber placedAtTown:  addressData fourth withZipCode: addressData fifth asNumber inProvince: addressData sixth.
	
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 18:49:43' prior: 50664099 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		  
		data := line findTokens: $,.
		[(decodingProcedures at: line first)value:data] on: Error do:[self error: self class invalidLineErrorDescription].
		line := readStream nextLine. ].
			
	! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'TAO 11/20/2023 18:49:43'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer decodingProcedures line data'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:49:46' prior: 50664122 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		[(decodingProcedures at: line first)value:data] on: Error do:[self error: self class invalidLineErrorDescription].
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:51:15' prior: 50664143 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		
		(self lineIsForDecodingCustomer: line) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(self lineIsForDecodingAddresses: line) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			].
		
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:51:21' prior: 50664154 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		
		(self lineIsForDecodingCustomer: line) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(self lineIsForDecodingAddresses) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			].
		
		line := readStream nextLine. ].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:51:26' prior: 50664170 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		
		(self lineIsForDecodingCustomer) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(self lineIsForDecodingAddresses) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			].
		
		line := readStream nextLine. ].
			
	! !

!testRun: #SmalltalkCompleterTest #test000_AutocompletesMessagesFor_GlobalVariables_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 18:51:29'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test001_AutocompletesMessagesFor_Self_WithSelectorsFromTheBrowsedClass stamp: 'TAO 11/20/2023 18:51:29'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test002_AutocompletesMessagesFor_Super_WithSelectorsFromTheBrowsedClass stamp: 'TAO 11/20/2023 18:51:29'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test003_AutocompletesMessagesFor_Super_WithSelectorsForUnknownClassesWhenTheBrowsedClassDoesNotHaveASuperclass stamp: 'TAO 11/20/2023 18:51:30'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test004_AutocompletesMessagesFor_True_WithSelectorsFromTrue stamp: 'TAO 11/20/2023 18:51:30'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test005_AutocompletesMessagesFor_False_WithSelectorsFromFalse stamp: 'TAO 11/20/2023 18:51:30'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test006_AutocompletesMessagesFor_Nil_WithSelectorsFromUndefinedObject stamp: 'TAO 11/20/2023 18:51:30'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test007_AutocompletesMessagesFor_Characters_WithSelectorsFromCharacter stamp: 'TAO 11/20/2023 18:51:30'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test008_AutocompletesMessagesFor_Numbers_WithSelectorsFromTheirClass stamp: 'TAO 11/20/2023 18:51:31'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test009_AutocompletesMessagesFor_Strings_WithSelectorsFromString stamp: 'TAO 11/20/2023 18:51:31'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test010_AutocompletesMessagesFor_Symbols_WithSelectorsFromSymbol stamp: 'TAO 11/20/2023 18:51:31'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test011_AutocompletesMessagesFor_StringSymbol_WithSelectorsFromSymbol stamp: 'TAO 11/20/2023 18:51:31'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test012_AutocompletesMessagesFor_InstanceVariables stamp: 'TAO 11/20/2023 18:51:32'!
PASSED!

!testRun: #SmalltalkCompleterTest #test013_AutocompletesMessagesFor_MethodArguments_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 18:51:34'!
PASSED!

!testRun: #SmalltalkCompleterTest #test014_AutocompletesMessagesFor_TemporaryVariables_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 18:51:35'!
PASSED!

!testRun: #SmalltalkCompleterTest #test015_AutocompletesMessagesFor_BlockArguments_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 18:51:36'!
PASSED!

!testRun: #SmalltalkCompleterTest #test016_AutocompletesMessagesFor_BlockTemporaryVariables_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 18:51:37'!
PASSED!

!testRun: #SmalltalkCompleterTest #test017_AutocompletesMessagesFor_NilWorkspaceVariables_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 18:51:39'!
PASSED!

!testRun: #SmalltalkCompleterTest #test017_AutocompletesMessagesFor_NonNilWorkspaceVariables_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 18:51:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test018_AutocompletesMessagesFor_ThisContext_WithSelectorsFromMethodContext stamp: 'TAO 11/20/2023 18:51:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test019_AutocompletesMessagesFor_ClassVariables_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 18:51:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test020_AutocompletesMessagesFor_PoolConstants_WithSelectorsFromTheirClasses stamp: 'TAO 11/20/2023 18:51:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test021_AutocompletesMessagesFor_BlockEndings_WithSelectorsFromBlockClosure stamp: 'TAO 11/20/2023 18:51:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test022_AutocompletesMessagesFor_ArrayEnds_WithSelectorsFromArray stamp: 'TAO 11/20/2023 18:51:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test023_AutocompletesMessagesFor_RightBraces_WithSelectorsFromArray stamp: 'TAO 11/20/2023 18:51:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test023_AutocompletingMessagesFor_UnaryMessages stamp: 'TAO 11/20/2023 18:51:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test024_AutocompletingMessagesFor_RightParenthesis stamp: 'TAO 11/20/2023 18:51:39'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test025_AutocompletesMessagesFor_UnknownIdentifiers_WithSelectorsForUnknownClasses stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test026_AutocompletingMessagesFor_Cascade stamp: 'TAO 11/20/2023 18:51:41'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test027_AutocompletesEntriesFor_GlobalVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test028_AutocompletesEntriesFor_PoolConstants_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
FAILURE!

!testRun: #SmalltalkCompleterTest #test029_AutocompletesEntriesFor_WorkspaceVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test030_AutocompletesEntriesFor_ClassVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test031_AutocompletesEntriesFor_InstanceVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test032_AutocompletesEntriesFor_MethodArguments_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test033_AutocompletesEntriesFor_TemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test034_AutocompletesEntriesFor_BlockArguments_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test035_AutocompletesEntriesFor_BlockTemporaryVariables_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test036_AutocompletesEntriesFor_IncompleteIdentifiers_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test037_AutocompletesEntriesFor_ReservedNames_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test038_DoesNotAutocompleteEntriesFor_UndefinedIdentifiers stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test039_AutocompletesEntriesFor_BinaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test040_AutocompletesEntriesFor_IncompleteBinaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test041_AutocompletesEntriesFor_UnaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test042_AutocompletesEntriesFor_IncompleteUnaryMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test043_AutocompletesEntriesFor_KeywordMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #test044_AutocompletesEntriesFor_IncompleteKeywordMessages_WithIdentifiersBegginingWithThem stamp: 'TAO 11/20/2023 18:51:41'!
PASSED!

!testRun: #SmalltalkCompleterTest #testMessages stamp: 'TAO 11/20/2023 18:51:42'!
PASSED!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 18:51:42'!
ERROR!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 18:51:42'!
ERROR!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 18:51:42'!
ERROR!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 18:51:42'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 18:51:48'!
ERROR!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 18:51:48'!
ERROR!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 18:51:48'!
ERROR!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 18:51:48'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 18:51:50'!
ERROR!
!CustomerImporter methodsFor: 'x' stamp: 'TAO 11/20/2023 18:51:56'!
lineIsForDecodingCustomer
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'x' stamp: 'TAO 11/20/2023 18:52:01' prior: 50664452!
lineIsForDecodingCustomer
	^ line first = 'C'! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 18:52:02'!
ERROR!
!CustomerImporter methodsFor: 'x' stamp: 'TAO 11/20/2023 18:52:06'!
lineIsForDecodingAddresses
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'x' stamp: 'TAO 11/20/2023 18:52:12' prior: 50664464!
lineIsForDecodingAddresses
	^ line first = 'C'! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 18:52:13'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:52:36' prior: 50664186 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(self lineIsForDecodingAddresses) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			]].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:52:38' prior: 50664477 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [ 
			newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer ].
		
		(self lineIsForDecodingAddresses) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			]
		].
			
	! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 18:52:40'!
FAILURE!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 18:52:40'!
FAILURE!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 18:52:40'!
FAILURE!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 18:52:40'!
FAILURE!

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 18:52:42'!
FAILURE!

!methodRemoval: CustomerImporter #decodeCustomerIn: stamp: 'TAO 11/20/2023 18:53:36'!
decodeCustomerIn: aCustomerData

	newCustomer := self createNewCustomerBasedOn: aCustomerData. 
	session persist: newCustomer!

!methodRemoval: CustomerImporter #decodeAddressIn: stamp: 'TAO 11/20/2023 18:53:37'!
decodeAddressIn: anAddressData
	newCustomer addAddress: (self createNewAddressBasedOn: anAddressData).!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:53:47'!
hacerAlgoConCustomer

	newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:53:47' prior: 50664492 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [ 
			self hacerAlgoConCustomer ].
		
		(self lineIsForDecodingAddresses) ifTrue: [
			 newCustomer addAddress: (self createNewAddressBasedOn: data).
			]
		].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:53:55'!
hacerAlgoConLaAddress

	^ newCustomer addAddress: (self createNewAddressBasedOn: data)! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:53:55' prior: 50664538 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [ 
			self hacerAlgoConCustomer ].
		
		(self lineIsForDecodingAddresses) ifTrue: [
			 self hacerAlgoConLaAddress.
			]
		].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:54:10' prior: 50664557 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [self hacerAlgoConCustomer].
		(self lineIsForDecodingAddresses) ifTrue: [self hacerAlgoConLaAddress.]
		].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:54:39'!
importCustomer

	newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 18:54:39' prior: 50664569 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [self importCustomer].
		(self lineIsForDecodingAddresses) ifTrue: [self hacerAlgoConLaAddress.]
		].
			
	! !

!methodRemoval: CustomerImporter #hacerAlgoConCustomer stamp: 'TAO 11/20/2023 18:54:39'!
hacerAlgoConCustomer

	newCustomer := self createNewCustomerBasedOn: data.
			session persist: newCustomer!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:54:57'!
importAddress

	^ newCustomer addAddress: (self createNewAddressBasedOn: data)! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 18:54:57' prior: 50664587 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [self importCustomer].
		(self lineIsForDecodingAddresses) ifTrue: [self importAddress.]
		].
			
	! !

!methodRemoval: CustomerImporter #hacerAlgoConLaAddress stamp: 'TAO 11/20/2023 18:54:57'!
hacerAlgoConLaAddress

	^ newCustomer addAddress: (self createNewAddressBasedOn: data)!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:55:05' prior: 50664603!
importAddress

	newCustomer addAddress: (self createNewAddressBasedOn: data)! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:55:08' prior: 50664579!
importCustomer

	newCustomer := self createNewCustomerBasedOn: data.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'x' stamp: 'TAO 11/20/2023 18:55:49' prior: 50664469!
lineIsForDecodingAddresses
	^ data first = 'C'! !
!CustomerImporter methodsFor: 'x' stamp: 'TAO 11/20/2023 18:55:52' prior: 50664457!
lineIsForDecodingCustomer
	^ data first = 'C'! !
!CustomerImporter methodsFor: 'x' stamp: 'TAO 11/20/2023 18:56:00' prior: 50664638!
lineIsForDecodingAddresses
	^ data first = 'A'! !

!testRun: #ImportTest #test01Import stamp: 'TAO 11/20/2023 18:56:02'!
PASSED!

!testRun: #ImportTest #test02Import stamp: 'TAO 11/20/2023 18:56:03'!
FAILURE!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 18:56:03'!
FAILURE!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 18:56:03'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:56:39' prior: 50664110!
createNewAddressBasedOn: addressData
	
	^ Address 
		withStreetName: addressData second  
		withStreetNumber: addressData third asNumber 
		placedAtTown:  addressData fourth 
		withZipCode: addressData fifth asNumber 
		inProvince: addressData sixth.
	
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:56:49' prior: 50662142!
createNewCustomerBasedOn: customerData

	^ Customer 
		withFirstName: customerData second
		withLastName: customerData third
		withIdentificationType: customerData fourth
 		withIdentificationNumber: customerData fifth! !
!CustomerImporter methodsFor: 'initialization' stamp: 'TAO 11/20/2023 18:57:04' prior: 50663275!
initializeFrom: aReadStream into: aSession
	session := aSession.
	readStream := aReadStream.
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 18:57:23'!
test01ImportValidData
	
	CustomerImporter valueFrom: self validImportData into: session.
	
	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #test01Import stamp: 'TAO 11/20/2023 18:57:23'!
test01Import
	
	CustomerImporter valueFrom: self validImportData into: session.
	
	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 18:58:27'!
test02ImportWorksUntilLineStartsWithOutCOrA
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfInvalidLineType into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !

!methodRemoval: ImportTest #test02Import stamp: 'TAO 11/20/2023 18:58:27'!
test02Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfInvalidLineType into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:58:54' prior: 50664610 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [^self importCustomer].
		(self lineIsForDecodingAddresses) ifTrue: [^self importAddress.]
		
		].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:59:19' prior: 50664749 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [^self importCustomer].
		(self lineIsForDecodingAddresses) ifTrue: [^self importAddress].
		self error: self class invalidLineErrorDescription.
		
		].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 18:59:21' prior: 50664760 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [^self importCustomer].
		(self lineIsForDecodingAddresses) ifTrue: [^self importAddress].
		self error: self class invalidLineErrorDescription.
		].
			
	! !

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 18:59:24'!
FAILURE!

!testRun: #ImportTest #test02ImportWorksUntilLineStartsWithOutCOrA stamp: 'TAO 11/20/2023 18:59:24'!
FAILURE!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 18:59:24'!
FAILURE!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 18:59:24'!
FAILURE!

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 18:59:27'!
FAILURE!

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 19:00:13'!
FAILURE!

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 19:00:13'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:01:02' prior: 50664773 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		(self lineIsForDecodingCustomer) ifTrue: [self importCustomer].
		(self lineIsForDecodingAddresses) ifTrue: [self importAddress].
		self error: self class invalidLineErrorDescription.
		].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:01:09'!
importData

	(self lineIsForDecodingCustomer) ifTrue: [self importCustomer].
		(self lineIsForDecodingAddresses) ifTrue: [self importAddress].
		self error: self class invalidLineErrorDescription! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:01:09' prior: 50664805 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		self importData.
		].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:01:20' prior: 50664817!
importData

	(self lineIsForDecodingCustomer) ifTrue: [^self importCustomer].
	(self lineIsForDecodingAddresses) ifTrue: [^self importAddress].
	self error: self class invalidLineErrorDescription! !

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 19:01:23'!
PASSED!

!testRun: #ImportTest #test02ImportWorksUntilLineStartsWithOutCOrA stamp: 'TAO 11/20/2023 19:01:23'!
PASSED!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 19:01:24'!
FAILURE!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 19:01:24'!
FAILURE!

!testRun: #ImportTest #test03Import stamp: 'TAO 11/20/2023 19:01:25'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:06:32'!
test03ImportWorksUntilMissingField
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfMissingField into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !

!methodRemoval: ImportTest #test03Import stamp: 'TAO 11/20/2023 19:06:32'!
test03Import
	
	| importedCustomer |
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfMissingField into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:07:12' prior: 50664827 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		data size <6 ifTrue:[self error: self class invalidLineErrorDescription].
		self importData.
		].
			
	! !

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 19:07:15'!
ERROR!

!testRun: #ImportTest #test02ImportWorksUntilLineStartsWithOutCOrA stamp: 'TAO 11/20/2023 19:07:15'!
FAILURE!

!testRun: #ImportTest #test03ImportWorksUntilMissingField stamp: 'TAO 11/20/2023 19:07:15'!
FAILURE!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 19:07:15'!
PASSED!

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 19:07:20'!
ERROR!

!testRun: #ImportTest #test02ImportWorksUntilLineStartsWithOutCOrA stamp: 'TAO 11/20/2023 19:07:20'!
FAILURE!

!testRun: #ImportTest #test03ImportWorksUntilMissingField stamp: 'TAO 11/20/2023 19:07:20'!
FAILURE!

!testRun: #ImportTest #test04Import stamp: 'TAO 11/20/2023 19:07:20'!
PASSED!

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 19:07:21'!
ERROR!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:08:09' prior: 50664895 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		
		self importData.
		].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:08:23' prior: 50664931 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		self importData.
		].
			
	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:08:57' prior: 50664643!
lineIsForDecodingCustomer
	^ data first = 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:11:27' prior: 50664632!
importCustomer
	data size ~= 5 ifTrue: [ self error: self class invalidLineErrorDescription ].
	newCustomer := self createNewCustomerBasedOn: data.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:11:54'!
assertValidCustomerData

	^ data size ~= 5 ifTrue: [ self error: self class invalidLineErrorDescription ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:11:54' prior: 50664951!
importCustomer
	self assertValidCustomerData.
	newCustomer := self createNewCustomerBasedOn: data.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:12:40' prior: 50664626!
importAddress
	self assertValidAddressData.
	newCustomer addAddress: (self createNewAddressBasedOn: data)! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:12:52'!
assertValidAddressData

	^ data size ~= 6 ifTrue: [ self error: self class invalidLineErrorDescription ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:13:31' prior: 50664834!
importData
	data isEmpty ifTrue:[self error: self class invalidLineErrorDescription ].
	(self lineIsForDecodingCustomer) ifTrue: [^self importCustomer].
	(self lineIsForDecodingAddresses) ifTrue: [^self importAddress].
	self error: self class invalidLineErrorDescription! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:13:36'!
keyword

	^ data isEmpty ifTrue:[self error: self class invalidLineErrorDescription ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:13:36' prior: 50664988!
importData
	self keyword.
	(self lineIsForDecodingCustomer) ifTrue: [^self importCustomer].
	(self lineIsForDecodingAddresses) ifTrue: [^self importAddress].
	self error: self class invalidLineErrorDescription! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:13:51'!
assertDataIsNotEmpty

	^ data isEmpty ifTrue:[self error: self class invalidLineErrorDescription ]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:13:51' prior: 50665005!
importData
	self assertDataIsNotEmpty.
	(self lineIsForDecodingCustomer) ifTrue: [^self importCustomer].
	(self lineIsForDecodingAddresses) ifTrue: [^self importAddress].
	self error: self class invalidLineErrorDescription! !

!methodRemoval: CustomerImporter #keyword stamp: 'TAO 11/20/2023 19:13:51'!
keyword

	^ data isEmpty ifTrue:[self error: self class invalidLineErrorDescription ]!
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:14:56' prior: 50665022!
importData
	
	(self lineIsForDecodingCustomer) ifTrue: [^self importCustomer].
	(self lineIsForDecodingAddresses) ifTrue: [^self importAddress].
	self error: self class invalidLineErrorDescription! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'TAO 11/20/2023 19:15:02' prior: 50664939 overrides: 16902254!
value 
	[ self canKeepImporting] whileTrue: [
		data := line findTokens: $,.
		self assertDataIsNotEmpty.
		self importData.
		].
			
	! !

Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporterX'!

!classDefinition: #NameOfSubclass category: 'CustomerImporterX' stamp: 'TAO 11/20/2023 19:15:55'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporterX'!
!NameOfSubclass methodsFor: 'no messages' stamp: 'TAO 11/20/2023 19:16:01'!
x
	! !

!classRemoval: #NameOfSubclass stamp: 'TAO 11/20/2023 19:16:11'!
Object subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporterX'!
!CustomerImporter methodsFor: 'asserting' stamp: 'TAO 11/20/2023 19:18:28' prior: 50664960!
assertValidCustomerData

	^ data size ~= 5 ifTrue: [ self error: self class invalidLineErrorDescription]! !
!CustomerImporter methodsFor: 'asserting' stamp: 'TAO 11/20/2023 19:18:31' prior: 50664981!
assertValidAddressData

	^ data size ~= 6 ifTrue: [ self error: self class invalidLineErrorDescription]! !
!CustomerImporter methodsFor: 'asserting' stamp: 'TAO 11/20/2023 19:18:34' prior: 50665084!
assertValidAddressData

	^ data size ~= 6 ifTrue: [self error: self class invalidLineErrorDescription]! !
!CustomerImporter methodsFor: 'asserting' stamp: 'TAO 11/20/2023 19:18:36' prior: 50665077!
assertValidCustomerData

	^ data size ~= 5 ifTrue: [self error: self class invalidLineErrorDescription]! !
!CustomerImporter methodsFor: 'asserting' stamp: 'TAO 11/20/2023 19:18:38' prior: 50665098!
assertValidCustomerData

	^data size ~= 5 ifTrue: [self error: self class invalidLineErrorDescription]! !
!CustomerImporter methodsFor: 'asserting' stamp: 'TAO 11/20/2023 19:18:42' prior: 50665091!
assertValidAddressData

	^data size ~= 6 ifTrue: [self error: self class invalidLineErrorDescription]! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:22:22'!
test05ImportFailWithDataWithAddressBeforeCustomer
	
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfAddressWithNoCustomer into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !

!methodRemoval: ImportTest #test04Import stamp: 'TAO 11/20/2023 19:22:22'!
test04Import
	
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfAddressWithNoCustomer into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:22:38'!
test04ImportFailWithDataWithAddressBeforeCustomer
	
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfAddressWithNoCustomer into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !

!methodRemoval: ImportTest #test05ImportFailWithDataWithAddressBeforeCustomer stamp: 'TAO 11/20/2023 19:22:38'!
test05ImportFailWithDataWithAddressBeforeCustomer
	
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfAddressWithNoCustomer into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	!
!CustomerImporter methodsFor: 'asserting' stamp: 'TAO 11/20/2023 19:22:46' prior: 50665112!
assertValidAddressData

	^data size < 6 ifTrue: [self error: self class invalidLineErrorDescription]! !
!CustomerImporter methodsFor: 'asserting' stamp: 'TAO 11/20/2023 19:22:50' prior: 50665105!
assertValidCustomerData

	^data size < 5 ifTrue: [self error: self class invalidLineErrorDescription]! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:23:35'!
test05ImportFailWhenDataIsEmpty
	
	
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfAddressWithNoCustomer into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:23:39' prior: 50665186!
test05ImportFailWhenDataIsEmpty
	
	
	self 
		should:[CustomerImporter valueFrom: self emptyData into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !

!testRun: #ImportTest #test05ImportFailWhenDataIsEmpty stamp: 'TAO 11/20/2023 19:24:03'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 19:24:09'!
emptyData
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 19:24:22' prior: 50665215!
emptyData
	^ReadStream with:' '.! !

!testRun: #ImportTest #test05ImportFailWhenDataIsEmpty stamp: 'TAO 11/20/2023 19:24:23'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 19:24:35' prior: 50665219!
emptyData
	^ReadStream on:' '.! !

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 19:24:38'!
PASSED!

!testRun: #ImportTest #test02ImportWorksUntilLineStartsWithOutCOrA stamp: 'TAO 11/20/2023 19:24:38'!
PASSED!

!testRun: #ImportTest #test03ImportWorksUntilMissingField stamp: 'TAO 11/20/2023 19:24:39'!
PASSED!

!testRun: #ImportTest #test04ImportFailWithDataWithAddressBeforeCustomer stamp: 'TAO 11/20/2023 19:24:39'!
PASSED!

!testRun: #ImportTest #test05ImportFailWhenDataIsEmpty stamp: 'TAO 11/20/2023 19:24:39'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:26:42' prior: 50664709!
test02ImportWorksUntilLineStartsWithOutCOrA
	
	| importedCustomer |
	self 
		import:self invalidImportDataBecauseOfInvalidLineType into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:26:47' prior: 50665246!
test02ImportWorksUntilLineStartsWithOutCOrA
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfInvalidLineType into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !

!testRun: #ImportTest #test02ImportWorksUntilLineStartsWithOutCOrA stamp: 'TAO 11/20/2023 19:26:59'!
ERROR!

!testRun: #ImportTest #test02ImportWorksUntilLineStartsWithOutCOrA stamp: 'TAO 11/20/2023 19:26:59'!
ERROR!
!ImportTest methodsFor: 'support' stamp: 'TAO 11/20/2023 19:27:12'!
import: aRenameMe1 into: aSession shouldRise: aRenameMe2 withMessageText: aRenameMe3 
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'support' stamp: 'TAO 11/20/2023 19:27:37' prior: 50665291!
import: aData into: aSession shouldRise: aRenameMe2 withMessageText: aRenameMe3 
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfMissingField into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.! !
!ImportTest methodsFor: 'support' stamp: 'TAO 11/20/2023 19:27:43' prior: 50665298!
import: aData into: aSession shouldRise: aRenameMe2 withMessageText: aMessageErrorDescription 
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfMissingField into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: CustomerImporter invalidLineErrorDescription.! !
!ImportTest methodsFor: 'support' stamp: 'TAO 11/20/2023 19:27:51' prior: 50665310!
import: aData into: aSession shouldRise: aRenameMe2 withMessageText: aMessageErrorDescription 
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfMissingField into: session.]
		raise: Error -MessageNotUnderstood 
		withMessageText: aMessageErrorDescription.! !
!ImportTest methodsFor: 'support' stamp: 'TAO 11/20/2023 19:27:57' prior: 50665323!
import: aData into: aSession shouldRise: aRenameMe2 withMessageText: aMessageErrorDescription 
	self 
		should:[CustomerImporter valueFrom: self invalidImportDataBecauseOfMissingField into: session.]
		raise: aRenameMe2 
		withMessageText: aMessageErrorDescription.! !
!ImportTest methodsFor: 'support' stamp: 'TAO 11/20/2023 19:28:11' prior: 50665335!
import: aData into: aSession shouldRise: aRenameMe2 withMessageText: aMessageErrorDescription 
	self 
		should:[CustomerImporter valueFrom: aData into: aSession.]
		raise: aRenameMe2 
		withMessageText: aMessageErrorDescription.! !

!testRun: #ImportTest #test02ImportWorksUntilLineStartsWithOutCOrA stamp: 'TAO 11/20/2023 19:28:13'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:28:34' prior: 50664856!
test03ImportWorksUntilMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfMissingField into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:28:46' prior: 50665144!
test04ImportFailWithDataWithAddressBeforeCustomer
	
	
	self 
		import: self invalidImportDataBecauseOfAddressWithNoCustomer into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:28:56' prior: 50665200!
test05ImportFailWhenDataIsEmpty
	
	
	self 
		import: self emptyData into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 19:28:59'!
PASSED!

!testRun: #ImportTest #test02ImportWorksUntilLineStartsWithOutCOrA stamp: 'TAO 11/20/2023 19:29:00'!
PASSED!

!testRun: #ImportTest #test03ImportWorksUntilMissingField stamp: 'TAO 11/20/2023 19:29:00'!
PASSED!

!testRun: #ImportTest #test04ImportFailWithDataWithAddressBeforeCustomer stamp: 'TAO 11/20/2023 19:29:00'!
PASSED!

!testRun: #ImportTest #test05ImportFailWhenDataIsEmpty stamp: 'TAO 11/20/2023 19:29:00'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:31:22'!
test03ImportWorksUntilCustomerMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfMissingField into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !

!methodRemoval: ImportTest #test03ImportWorksUntilMissingField stamp: 'TAO 11/20/2023 19:31:22'!
test03ImportWorksUntilMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfMissingField into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:31:25'!
test05ImportFailWithDataWithAddressBeforeCustomer
	
	
	self 
		import: self invalidImportDataBecauseOfAddressWithNoCustomer into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !

!methodRemoval: ImportTest #test04ImportFailWithDataWithAddressBeforeCustomer stamp: 'TAO 11/20/2023 19:31:25'!
test04ImportFailWithDataWithAddressBeforeCustomer
	
	
	self 
		import: self invalidImportDataBecauseOfAddressWithNoCustomer into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:31:30'!
test06ImportFailWithDataWithAddressBeforeCustomer
	
	
	self 
		import: self invalidImportDataBecauseOfAddressWithNoCustomer into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !

!methodRemoval: ImportTest #test05ImportFailWithDataWithAddressBeforeCustomer stamp: 'TAO 11/20/2023 19:31:30'!
test05ImportFailWithDataWithAddressBeforeCustomer
	
	
	self 
		import: self invalidImportDataBecauseOfAddressWithNoCustomer into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:31:37'!
test04ImportWorksUntilAddressMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfMissingField into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 19:31:48'!
invalidImportDataBecauseOfCustomerMissingField
	^ ReadStream on: 
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:31:49' prior: 50665512!
test04ImportWorksUntilAddressMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfCustomerMissingField into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:31:49' prior: 50665420!
test03ImportWorksUntilCustomerMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfCustomerMissingField into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !

!methodRemoval: ImportTest #invalidImportDataBecauseOfMissingField stamp: 'TAO 11/20/2023 19:31:49'!
invalidImportDataBecauseOfMissingField
	^ ReadStream on: 
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'!
!ImportTest methodsFor: 'tests' stamp: 'TAO 11/20/2023 19:32:07' prior: 50665541!
test04ImportWorksUntilAddressMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfAddressMissingField into: session
		shouldRise: Error -MessageNotUnderstood 
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !

!testRun: #ImportTest #test06ImportFailWithDataWithAddressBeforeCustomer stamp: 'TAO 11/20/2023 19:32:10'!
PASSED!

!testRun: #ImportTest #test04ImportWorksUntilAddressMissingField stamp: 'TAO 11/20/2023 19:32:18'!
ERROR!

!testRun: #ImportTest #test04ImportWorksUntilAddressMissingField stamp: 'TAO 11/20/2023 19:32:18'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 19:32:22'!
invalidImportDataBecauseOfAddressMissingField
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 19:32:25' prior: 50665619!
invalidImportDataBecauseOfAddressMissingField
	! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 19:32:46' prior: 50665625!
invalidImportDataBecauseOfAddressMissingField
	^ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,1636
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 19:32:49' prior: 50665630!
invalidImportDataBecauseOfAddressMissingField
	^ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos,
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !
!ImportTest methodsFor: 'test data' stamp: 'TAO 11/20/2023 19:32:50' prior: 50665640!
invalidImportDataBecauseOfAddressMissingField
	^ReadStream on:
'C,Pepe,Sanchez,D,22333444
A,San Martin,3322,Olivos
A,Maipu,888,Florida,1122,Buenos Aires
C,Juan,Perez,C,23-25666777-9
A,Alem,1122,CABA,1001,CABA'! !

!testRun: #ImportTest #test01ImportValidData stamp: 'TAO 11/20/2023 19:32:53'!
PASSED!

!testRun: #ImportTest #test02ImportWorksUntilLineStartsWithOutCOrA stamp: 'TAO 11/20/2023 19:32:54'!
PASSED!

!testRun: #ImportTest #test03ImportWorksUntilCustomerMissingField stamp: 'TAO 11/20/2023 19:32:54'!
PASSED!

!testRun: #ImportTest #test04ImportWorksUntilAddressMissingField stamp: 'TAO 11/20/2023 19:32:55'!
PASSED!

!testRun: #ImportTest #test05ImportFailWhenDataIsEmpty stamp: 'TAO 11/20/2023 19:32:55'!
PASSED!

!testRun: #ImportTest #test06ImportFailWithDataWithAddressBeforeCustomer stamp: 'TAO 11/20/2023 19:32:55'!
PASSED!
!ImportTest methodsFor: 'support' stamp: 'TAO 11/20/2023 19:39:42' prior: 50665347!
import: aData into: aSession shouldRise: aRenameMe2 withMessageText: aMessageErrorDescription 
	self 
		should:[CustomerImporter valueFrom: aData into: aSession.]
		raise: Error-MessageNotUnderstood 
		withMessageText: aMessageErrorDescription.! !
!ImportTest methodsFor: 'support' stamp: 'TAO 11/20/2023 19:39:53'!
import: aData into: aSession withMessageText: aMessageErrorDescription 
	self 
		should:[CustomerImporter valueFrom: aData into: aSession.]
		raise: Error-MessageNotUnderstood 
		withMessageText: aMessageErrorDescription.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:39:53' prior: 50665393!
test05ImportFailWhenDataIsEmpty
	
	
	self 
		import: self emptyData into: session
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:39:53' prior: 50665590!
test04ImportWorksUntilAddressMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfAddressMissingField into: session
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:39:53' prior: 50665265!
test02ImportWorksUntilLineStartsWithOutCOrA
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfInvalidLineType into: session
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:39:53' prior: 50665561!
test03ImportWorksUntilCustomerMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfCustomerMissingField into: session
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:39:53' prior: 50665485!
test06ImportFailWithDataWithAddressBeforeCustomer
	
	
	self 
		import: self invalidImportDataBecauseOfAddressWithNoCustomer into: session
		withMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !

!methodRemoval: ImportTest #import:into:shouldRise:withMessageText: stamp: 'TAO 11/20/2023 19:39:53'!
import: aData into: aSession shouldRise: aRenameMe2 withMessageText: aMessageErrorDescription 
	self 
		should:[CustomerImporter valueFrom: aData into: aSession.]
		raise: Error-MessageNotUnderstood 
		withMessageText: aMessageErrorDescription.!
!ImportTest methodsFor: 'support' stamp: 'TAO 11/20/2023 19:50:20'!
import: aData into: aSession shouldFailWithMessageText: aMessageErrorDescription 
	self 
		should:[CustomerImporter valueFrom: aData into: aSession.]
		raise: Error-MessageNotUnderstood 
		withMessageText: aMessageErrorDescription.! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:50:21' prior: 50665729!
test02ImportWorksUntilLineStartsWithOutCOrA
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfInvalidLineType into: session
		shouldFailWithMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:50:21' prior: 50665747!
test03ImportWorksUntilCustomerMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfCustomerMissingField into: session
		shouldFailWithMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:50:21' prior: 50665700!
test05ImportFailWhenDataIsEmpty
	
	
	self 
		import: self emptyData into: session
		shouldFailWithMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:50:21' prior: 50665711!
test04ImportWorksUntilAddressMissingField
	
	| importedCustomer |
	self 
		import: self invalidImportDataBecauseOfAddressMissingField into: session
		shouldFailWithMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 1 equals: (session selectAllOfType: Customer) size.
	importedCustomer := self assertCustomerWithIdentificationType: 'D' number: '22333444' hasFirstName: 'Pepe' lastName: 'Sanchez'.
	self assert:importedCustomer addresses size equals:0.
	
	
		
	
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'TAO 11/20/2023 19:50:21' prior: 50665766!
test06ImportFailWithDataWithAddressBeforeCustomer
	
	
	self 
		import: self invalidImportDataBecauseOfAddressWithNoCustomer into: session
		shouldFailWithMessageText:CustomerImporter invalidLineErrorDescription.
		
	 self assert: 0 equals: (session selectAllOfType: Customer) size.
	
	
	
		
	
	! !

!methodRemoval: ImportTest #import:into:withMessageText: stamp: 'TAO 11/20/2023 19:50:21'!
import: aData into: aSession withMessageText: aMessageErrorDescription 
	self 
		should:[CustomerImporter valueFrom: aData into: aSession.]
		raise: Error-MessageNotUnderstood 
		withMessageText: aMessageErrorDescription.!

----QUIT----(20 November 2023 22:25:26) CuisUniversity-5981.image priorSource: 10634795!