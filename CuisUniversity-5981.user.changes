

----STARTUP---- (2 November 2023 23:55:59) as /home/totorroto/Desktop/Libros/linux64/CuisUniversity-5981.image!


!classRemoval: #Cart stamp: 's 11/2/2023 23:56:04'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Libros'!

!classRemoval: #CartTests stamp: 's 11/2/2023 23:56:04'!
TestCase subclass: #CartTests
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Libros'!

----End fileIn of /home/totorroto/Downloads/TusLibros.st----!
!CartTest methodsFor: 'tests' stamp: 's 11/2/2023 23:57:11'!
test09CanNotCheckOutEmptyCart

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSellByTheStore withOcurrences: 2.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 's 11/2/2023 23:58:02'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 's 11/2/2023 23:57:59' prior: 50331846!
test09CanNotCheckOutEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	cashier:= Cashier of:cart.
	cart add: self itemSellByTheStore withOcurrences: 2.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 's 11/2/2023 23:58:14' prior: 50331861!
test09CanNotCheckOutEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	cashier:= Cashier of:cart.
	
	! !
!CartTest methodsFor: 'tests' stamp: 's 11/2/2023 23:58:37' prior: 50331871!
test09CanNotCheckOutEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	cashier:= Cashier of:cart.
	
	self 
		should: [cart add:  self itemNotSellByTheStore withOcurrences: 2  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			"Aca hay que assertear que nada cambio, todavia no se que" ]! !
!CartTest methodsFor: 'tests' stamp: 's 11/2/2023 23:58:46' prior: 50331877!
test09CanNotCheckOutEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	cashier:= Cashier of:cart.
	
	self 
		should: [cashier checkout  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			"Aca hay que assertear que nada cambio, todavia no se que" ]! !
!CartTest methodsFor: 'tests' stamp: 's 11/2/2023 23:59:06' prior: 50331892!
test09CanNotCheckOutEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	cashier:= Cashier of:cart.
	
	self 
		should: [cashier checkout  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emtpyCartErrorMessage.
			"Aca hay que assertear que nada cambio, todavia no se que" ]! !

!testRun: #CartTest #test09CanNotCheckOutEmptyCart stamp: 's 11/2/2023 23:59:11'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 's 11/2/2023 23:59:15'!
of: cart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: cart ! !
!Cashier class methodsFor: 'instance creation' stamp: 's 11/2/2023 23:59:18' prior: 50331923!
of: cart 
	^self new initializeOf: cart ! !

!testRun: #CartTest #test09CanNotCheckOutEmptyCart stamp: 's 11/2/2023 23:59:19'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 's 11/2/2023 23:59:28'!
Object subclass: #Cashier
	instanceVariableNames: 'cart_CHANGE_ME'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialize' stamp: 's 11/2/2023 23:59:28'!
initializeOf: cart 
	self shouldBeImplemented.
	cart_CHANGE_ME := cart.! !
!Cashier methodsFor: 'initialize' stamp: 's 11/2/2023 23:59:31' prior: 50331945!
initializeOf: cart 
	
	cart_CHANGE_ME := cart.! !
!Cashier methodsFor: 'initialize' stamp: 's 11/2/2023 23:59:36' prior: 50331950!
initializeOf: aCart 
	
	cart_CHANGE_ME := aCart.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 's 11/2/2023 23:59:44'!
Object subclass: #Cashier
	instanceVariableNames: 'cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 's 11/2/2023 23:59:44' prior: 50331955!
initializeOf: aCart 
	
	cart := aCart.! !

!testRun: #CartTest #test09CanNotCheckOutEmptyCart stamp: 's 11/2/2023 23:59:45'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 's 11/2/2023 23:59:54'!
checkout
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 's 11/2/2023 23:59:57' prior: 50331973!
checkout
	! !
!Cashier methodsFor: 'checkout' stamp: 's 11/3/2023 00:00:12' prior: 50331977!
checkout
	! !
!CartTest methodsFor: 'tests' stamp: 's 11/3/2023 00:00:26'!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	cashier:= Cashier of:cart.
	
	self 
		should: [cashier checkout  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emtpyCartErrorMessage.
			"Aca hay que assertear que nada cambio, todavia no se que" ]! !

!methodRemoval: CartTest #test09CanNotCheckOutEmptyCart stamp: 's 11/3/2023 00:00:26'!
test09CanNotCheckOutEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	cashier:= Cashier of:cart.
	
	self 
		should: [cashier checkout  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emtpyCartErrorMessage.
			"Aca hay que assertear que nada cambio, todavia no se que" ]!
!CartTest methodsFor: 'tests' stamp: 's 11/3/2023 00:00:42' prior: 50331983!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emtpyCartErrorMessage.
			"Aca hay que assertear que nada cambio, todavia no se que" ]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:00:47'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:00:50'!
for: cart 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: cart ! !
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:00:53' prior: 50332027!
for: cart 
	
	^self new initializeFor: cart ! !
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:00:58' prior: 50332035!
for: aCart 
	
	^self new initializeFor: aCart ! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:00:59'!
ERROR!
!Cashier methodsFor: 'initialize' stamp: 's 11/3/2023 00:01:03'!
initializeFor: aCart 
	self shouldBeImplemented.
	cart := aCart.! !
!Cashier methodsFor: 'initialize' stamp: 's 11/3/2023 00:01:05' prior: 50332047!
initializeFor: aCart 
	
	cart := aCart.! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:01:06'!
FAILURE!

!methodRemoval: Cashier #initializeOf: stamp: 's 11/3/2023 00:01:14'!
initializeOf: aCart 
	
	cart := aCart.!

!methodRemoval: Cashier #checkout stamp: 's 11/3/2023 00:01:14'!
checkout
	!

!methodRemoval: Cashier class #of: stamp: 's 11/3/2023 00:01:23'!
of: cart 
	^self new initializeOf: cart !
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:01:52' prior: 50332040!
for: aCart 
	aCart isEmtpy ifTrue:[self error: self emptyCartErrorMessage].
	^self new initializeFor: aCart ! !
!CartTest methodsFor: 'tests' stamp: 's 11/3/2023 00:02:34' prior: 50332011!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emtpyCartErrorMessage.
			"Aca hay que assertear que no se creo Cashier, qcyo como se hace eso, capaz no es necesario porque es obvio?" ]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:02:36'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:02:56' prior: 50332069!
for: aCart 
	aCart isEmpty ifTrue:[self error: self emptyCartErrorMessage].
	^self new initializeFor: aCart ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/3/2023 00:02:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/3/2023 00:02:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/3/2023 00:02:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/3/2023 00:02:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/3/2023 00:02:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/3/2023 00:02:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/3/2023 00:02:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/3/2023 00:02:57'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:02:57'!
ERROR!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:02:57'!
ERROR!
!Object class methodsFor: 'as yet unclassified' stamp: 's 11/3/2023 00:03:00'!
emptyCartErrorMessage
	self shouldBeImplemented.! !

!methodRemoval: Object class #emptyCartErrorMessage stamp: 's 11/3/2023 00:03:14'!
emptyCartErrorMessage
	self shouldBeImplemented.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/3/2023 00:03:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/3/2023 00:03:16'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/3/2023 00:03:16'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/3/2023 00:03:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/3/2023 00:03:16'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/3/2023 00:03:16'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/3/2023 00:03:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/3/2023 00:03:16'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:03:16'!
ERROR!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:03:16'!
ERROR!
!Cashier class methodsFor: 'error messages' stamp: 's 11/3/2023 00:03:24'!
emptyCartErrorMessage
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 's 11/3/2023 00:03:39' prior: 50332171!
emptyCartErrorMessage
	^'Can not create cashier for an empty cart'! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:03:40'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:04:20' prior: 50332075!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier emtpyCartErrorMessage.
			"Aca hay que assertear que no se creo Cashier, qcyo como se hace eso, capaz no es necesario porque es obvio?" ]! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:04:26' prior: 50332184!
test09CanNotCreateCashierOfEmptyCart

	| cart |
	
	cart := self createCart.
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier emtpyCartErrorMessage.
			"Aca hay que assertear que no se creo Cashier, qcyo como se hace eso, capaz no es necesario porque es obvio?" ]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:04:29'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:04:34' prior: 50332199!
test09CanNotCreateCashierOfEmptyCart

	| cart |
	
	cart := self createCart.
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new emtpyCartErrorMessage.
			"Aca hay que assertear que no se creo Cashier, qcyo como se hace eso, capaz no es necesario porque es obvio?" ]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:04:35'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:04:52' prior: 50332217!
test09CanNotCreateCashierOfEmptyCart

	| cart |
	
	cart := self createCart.
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier class emtpyCartErrorMessage.
			"Aca hay que assertear que no se creo Cashier, qcyo como se hace eso, capaz no es necesario porque es obvio?" ]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:04:53'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:04:58' prior: 50332235!
test09CanNotCreateCashierOfEmptyCart

	| cart |
	
	cart := self createCart.
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier  new class emtpyCartErrorMessage.
			"Aca hay que assertear que no se creo Cashier, qcyo como se hace eso, capaz no es necesario porque es obvio?" ]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:04:58'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:05:39' prior: 50332253!
test09CanNotCreateCashierOfEmptyCart

	| cart |
	
	cart := self createCart.
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier class emtpyCartErrorMessage.
			"Aca hay que assertear que no se creo Cashier, qcyo como se hace eso, capaz no es necesario porque es obvio?" ]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:05:40'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:05:54' prior: 50332271!
test09CanNotCreateCashierOfEmptyCart

	| cart |
	
	cart := self createCart.
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier class emptyCartErrorMessage.
			"Aca hay que assertear que no se creo Cashier, qcyo como se hace eso, capaz no es necesario porque es obvio?" ]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:05:54'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:05:58' prior: 50332289!
test09CanNotCreateCashierOfEmptyCart

	| cart |
	
	cart := self createCart.
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"Aca hay que assertear que no se creo Cashier, qcyo como se hace eso, capaz no es necesario porque es obvio?" ]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:05:59'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/3/2023 00:05:59'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/3/2023 00:05:59'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/3/2023 00:05:59'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/3/2023 00:05:59'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/3/2023 00:05:59'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/3/2023 00:05:59'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/3/2023 00:05:59'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/3/2023 00:05:59'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:05:59'!
PASSED!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:06:18' prior: 50332307!
test09CanNotCreateCashierOfEmptyCart

	| cart |
	
	cart := self createCart.
	
	self 
		should: [Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			]! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:06:40' prior: 50332353!
test09CanNotCreateCashierOfEmptyCart

	| cart |
	
	cart := self createCart.
	
	self 
		should: [ | cashier |cashier:= Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			]! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:08:25' prior: 50332365!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	self 
		should: [ cashier:= Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			self
				should: [ cashier emptyCartErrorMessage ]
				raise: Error - MessageNotUnderstood
				withExceptionDo: [ :anotherError |
					self assert: anotherError messageText = Cashier new class emptyCartErrorMessage . ]]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:08:26'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:08:37' prior: 50332377!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	self 
		should: [ cashier:= Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			self
				should: [ cashier emptyCartErrorMessage ]
				raise: Error - MessageNotUnderstood
				withExceptionDo: [ :anotherError |
					self assert: anotherError messageText = Cashier new class emptyCartErrorMessage . ]]! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:08:38'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:10:37' prior: 50332399!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	self 
		should: [ cashier:= Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			self shouldFail: cashier emptyCartErrorMessage ].! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:10:38'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:10:46' prior: 50332421!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	self 
		should: [ cashier:= Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			 ].! !

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:10:48'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/3/2023 00:10:48'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/3/2023 00:10:48'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/3/2023 00:10:48'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/3/2023 00:10:48'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/3/2023 00:10:48'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/3/2023 00:10:48'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/3/2023 00:10:48'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/3/2023 00:10:48'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:10:48'!
PASSED!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:10:59' prior: 50332438!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	self 
		should: [ cashier:= Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:11:33'!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier |
	
	cart := self createCart.
	
	self 
		should: [ cashier:= Cashier for:cart  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:11:54' prior: 50332495!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier |
	
	cart := self createCart.
	
	self 
		should: [ | creditCard | cashier:= Cashier for:cart payingWith: creditCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:12:05' prior: 50332509!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:12:20' prior: 50332524!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:12:29' prior: 50332539!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'as yet unclassified' stamp: 's 11/3/2023 00:13:02' prior: 50332482!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier |
	
	cart := self createCart.
	
	self 
		should: [ cashier:= Cashier for:cart payingWith: creditCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'as yet unclassified' stamp: 's 11/3/2023 00:13:02' prior: 50332555!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:13:23'!
for: aCart payingWith: aCreditCard
	aCart isEmpty ifTrue:[self error: self emptyCartErrorMessage].
	^self new initializeFor: aCart ! !

!methodRemoval: Cashier class #for:payingWith: stamp: 's 11/3/2023 00:13:25'!
for: aCart payingWith: aCreditCard
	aCart isEmpty ifTrue:[self error: self emptyCartErrorMessage].
	^self new initializeFor: aCart !
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:13:34'!
for: aCart payingWith: aCreditCard
	aCart isEmpty ifTrue:[self error: self emptyCartErrorMessage].
	^self new initializeFor: aCart ! !

!methodRemoval: Cashier class #for: stamp: 's 11/3/2023 00:13:36'!
for: aCart 
	aCart isEmpty ifTrue:[self error: self emptyCartErrorMessage].
	^self new initializeFor: aCart !
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:13:45' prior: 50332615!
for: aCart payingWith: aCreditCard
	aCart isEmpty ifTrue:[self error: self emptyCartErrorMessage].
	^self new initializeFor: aCart payingWith: aCreditCard ! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 's 11/3/2023 00:14:09'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialize' stamp: 's 11/3/2023 00:14:08'!
initializeFor: aCart payingWith: aCreditCard
	
	cart := aCart.
	creditCard:= aCreditCard! !

!methodRemoval: Cashier #initializeFor: stamp: 's 11/3/2023 00:14:12'!
initializeFor: aCart 
	
	cart := aCart.!
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:14:33'!
assertCartIsNotEmpty: aCart

	^ aCart isEmpty ifTrue:[self error: self emptyCartErrorMessage]! !
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:14:33' prior: 50332628!
for: aCart payingWith: aCreditCard
	self assertCartIsNotEmpty: aCart.
	^self new initializeFor: aCart payingWith: aCreditCard ! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:15:03' prior: 50332585!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].! !

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:15:06'!
ERROR!
!CartTest methodsFor: 'support' stamp: 's 11/3/2023 00:15:11'!
createExpiredCard
	self shouldBeImplemented.! !

!classDefinition: #Card category: 'TusLibros' stamp: 's 11/3/2023 00:16:05'!
Object subclass: #Card
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'support' stamp: 's 11/3/2023 00:16:04' prior: 50332684!
createExpiredCard
	^Card ! !
!CartTest methodsFor: 'support' stamp: 's 11/3/2023 00:16:37' prior: 50332695!
createExpiredCard
	^Card withCardNumber:1 expiring: FixedGregorianDate theBeginningOfTime monthOfYear ownedBy:'Juan'! !

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:16:40'!
ERROR!
!Card class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:16:44'!
withCardNumber: aRenameMe1 expiring: aRenameMe2 ownedBy: aRenameMe3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCardNumber: aRenameMe1 expiring: aRenameMe2 ownedBy: aRenameMe3 ! !
!Card class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:17:19' prior: 50332709!
withCardNumber: aCreditCardNumber expiring: aMonthOfYearOfExpiration ownedBy: aCreditCardOwnerName 
	^self new initializeWithCardNumber: aCreditCardNumber expiring: aMonthOfYearOfExpiration ownedBy: aCreditCardOwnerName ! !

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:17:20'!
ERROR!

!classDefinition: #Card category: 'TusLibros' stamp: 's 11/3/2023 00:17:27'!
Object subclass: #Card
	instanceVariableNames: 'creditCardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 's 11/3/2023 00:17:27'!
Object subclass: #Card
	instanceVariableNames: 'creditCardNumber monthOfYearOfExpiration'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Card category: 'TusLibros' stamp: 's 11/3/2023 00:17:27'!
Object subclass: #Card
	instanceVariableNames: 'creditCardNumber monthOfYearOfExpiration creditCardOwnerName'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Card methodsFor: 'initialize' stamp: 's 11/3/2023 00:17:27'!
initializeWithCardNumber: aCreditCardNumber expiring: aMonthOfYearOfExpiration ownedBy: aCreditCardOwnerName 
	self shouldBeImplemented.
	creditCardNumber := aCreditCardNumber.
	monthOfYearOfExpiration := aMonthOfYearOfExpiration.
	creditCardOwnerName := aCreditCardOwnerName.! !
!Card methodsFor: 'initialize' stamp: 's 11/3/2023 00:17:31' prior: 50332755!
initializeWithCardNumber: aCreditCardNumber expiring: aMonthOfYearOfExpiration ownedBy: aCreditCardOwnerName 
	
	creditCardNumber := aCreditCardNumber.
	monthOfYearOfExpiration := aMonthOfYearOfExpiration.
	creditCardOwnerName := aCreditCardOwnerName.! !

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:17:39'!
ERROR!
!Cashier class methodsFor: 'error messages' stamp: 's 11/3/2023 00:17:50'!
creditCardExpiredMessageDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error messages' stamp: 's 11/3/2023 00:18:11' prior: 50332781!
creditCardExpiredMessageDescription
	^'Can not create cashier with an expired creditCard'! !

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:18:13'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 's 11/3/2023 00:18:55' prior: 50332657!
for: aCart payingWith: aCreditCard
	self assertCartIsNotEmpty: aCart.
	aCreditCard isExpired ifTrue:[self error: self creditCardExpiredMessageDescription ].
	^self new initializeFor: aCart payingWith: aCreditCard ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/3/2023 00:18:56'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/3/2023 00:18:56'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/3/2023 00:18:56'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/3/2023 00:18:56'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/3/2023 00:18:56'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/3/2023 00:18:56'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/3/2023 00:18:56'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/3/2023 00:18:56'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:18:56'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:18:56'!
FAILURE!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:18:56'!
FAILURE!

!classRenamed: #Card as: #CreditCard stamp: 's 11/3/2023 00:19:09'!
Smalltalk renameClassNamed: #Card as: #CreditCard!
!CartTest methodsFor: 'as yet unclassified' stamp: 's 11/3/2023 00:19:09' prior: 50332699!
createExpiredCard
	^CreditCard withCardNumber:1 expiring: FixedGregorianDate theBeginningOfTime monthOfYear ownedBy:'Juan'! !
!CreditCard methodsFor: 'initialize' stamp: 's 11/3/2023 00:19:47'!
isExpired
	FixedGregorianDate today monthOfYear > monthOfYearOfExpiration.! !
!CreditCard methodsFor: 'initialize' stamp: 's 11/3/2023 00:19:51' prior: 50332852!
isExpired
	^FixedGregorianDate today monthOfYear > monthOfYearOfExpiration.! !
!CreditCard methodsFor: 'initialize' stamp: 's 11/3/2023 00:19:56' prior: 50332858!
isExpired
	^FixedGregorianDate today monthOfYear >= monthOfYearOfExpiration.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/3/2023 00:19:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/3/2023 00:19:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/3/2023 00:19:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/3/2023 00:19:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/3/2023 00:19:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/3/2023 00:19:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/3/2023 00:19:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/3/2023 00:19:57'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:19:57'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:19:57'!
FAILURE!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:19:57'!
FAILURE!
!CreditCard methodsFor: 'initialize' stamp: 's 11/3/2023 00:20:01' prior: 50332864!
isExpired
	^FixedGregorianDate today monthOfYear > monthOfYearOfExpiration.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/3/2023 00:20:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/3/2023 00:20:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/3/2023 00:20:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/3/2023 00:20:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/3/2023 00:20:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/3/2023 00:20:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/3/2023 00:20:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/3/2023 00:20:02'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:20:02'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:20:02'!
FAILURE!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:20:02'!
FAILURE!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:20:49' prior: 50332664!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].! !

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:20:52'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/3/2023 00:20:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/3/2023 00:20:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/3/2023 00:20:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/3/2023 00:20:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/3/2023 00:20:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/3/2023 00:20:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/3/2023 00:20:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/3/2023 00:20:52'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/3/2023 00:20:52'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:20:52'!
PASSED!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:21:39'!
test11CanCreateCashierPayingWithAnNonExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].! !

!methodRemoval: CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/3/2023 00:21:39'!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:21:57'!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].! !

!methodRemoval: CartTest #test11CanCreateCashierPayingWithAnNonExpiredCreditCard stamp: 's 11/3/2023 00:21:57'!
test11CanCreateCashierPayingWithAnNonExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:22:33'!
test11CanCheckoutCashier

	| cart cashier  creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:22:44' prior: 50333071!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/3/2023 00:24:44' prior: 50333088!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 20:17:51' prior: 50333105!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard.
	cashier checkout.
	self assert: cashier transactionList! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 20:18:32' prior: 50332571!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	creditCard:= self createNonExpiredCard 
	self 
		should: [ cashier:= Cashier for:cart payingWith: creditCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 20:18:38' prior: 50333134!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	creditCard:= self createNonExpiredCard.
	self 
		should: [ cashier:= Cashier for:cart payingWith: creditCard  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 20:18:48' prior: 50333035!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].! !

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:18:55'!
ERROR!
!CartTest methodsFor: 'support' stamp: 's 11/4/2023 20:19:02'!
createNonExpiredCard
	self shouldBeImplemented.! !
!CartTest methodsFor: 'support' stamp: 's 11/4/2023 20:19:04' prior: 50333186!
createNonExpiredCard
	! !
!CartTest methodsFor: 'support' stamp: 's 11/4/2023 20:19:13' prior: 50333191!
createNonExpiredCard
	^CreditCard withCardNumber:1 expiring: FixedGregorianDate theBeginningOfTime monthOfYear ownedBy:'Juan'! !
!CartTest methodsFor: 'support' stamp: 's 11/4/2023 20:19:16' prior: 50333195!
createNonExpiredCard
	^CreditCard withCardNumber:1 expiring: FixedGregorianDate theEndOfTime monthOfYear ownedBy:'Juan'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:19:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:19:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:19:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:19:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:19:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:19:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:19:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:19:18'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:19:18'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:19:18'!
PASSED!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:19:18'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:19:18'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:19:24'!
checkout
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:20:13' prior: 50333245!
checkout
	self debit: (cart cost) from: creditCard.! !

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:20:18'!
ERROR!
!Cart methodsFor: 'queries' stamp: 's 11/4/2023 20:20:23'!
cost
	self shouldBeImplemented.! !
!Cart methodsFor: 'queries' stamp: 's 11/4/2023 20:20:53' prior: 50333256!
cost
	^catalog do:[].! !

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:20:54'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:21:33' prior: 50333249!
checkout
	self debit: self costOf:(cart listCart) from: creditCard.! !
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:21:43' prior: 50333266!
checkout
	self debit: (self costOf:cart listCart) from: creditCard.! !
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:21:47' prior: 50333271!
checkout
	self debit: (self costOf: cart listCart) from: creditCard.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:21:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:21:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:21:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:21:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:21:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:21:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:21:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:21:49'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:21:49'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:21:49'!
PASSED!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:21:49'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:21:49'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:22:03'!
listCart
	self shouldBeImplemented.! !
!Cart methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:22:34' prior: 50333318!
listCart
	items do:[:item| item]! !

!methodRemoval: Cart #cost stamp: 's 11/4/2023 20:22:43'!
cost
	^catalog do:[].!
!Cart methodsFor: 'initialization' stamp: 's 11/4/2023 20:23:06' prior: 50331803!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:23:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:23:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:23:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:23:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:23:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:23:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:23:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:23:07'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:23:07'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:23:07'!
PASSED!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:23:07'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:23:07'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:23:52' prior: 50333322!
listCart
	items sum:[:item| catalog at: item * (self occurrencesOf: item)].! !
!Cart methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:23:58' prior: 50333372!
listCart
	items sum:[:item| (catalog at: item)* (self occurrencesOf: item)].! !
!Cart methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:24:00' prior: 50333378!
listCart
	items sum:[:item| (catalog at: item) * (self occurrencesOf: item)].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:24:09'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:24:09'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:24:09'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:24:09'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:24:09'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:24:09'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:24:09'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:24:09'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:24:09'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:24:09'!
PASSED!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:24:09'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:24:09'!
ERROR!
!CartTest methodsFor: 'support' stamp: 's 11/4/2023 20:26:13' prior: 50331756!
defaultCatalog
	
	^ Dictionary new at: self itemSellByTheStore put:100.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:26:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:26:16'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:26:16'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:26:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:26:16'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:26:16'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:26:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:26:16'!
ERROR!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:26:16'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:26:16'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:26:16'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:26:18'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:27:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:27:19'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:27:19'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:27:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:27:19'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:27:19'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:27:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:27:19'!
ERROR!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:27:19'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:27:19'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:27:19'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:27:20'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 's 11/4/2023 20:27:25' prior: 50331790!
assertIsValidItem: anItem

	(catalog keys includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:27:26'!
ERROR!

catalog!
!CartTest methodsFor: 'support' stamp: 's 11/4/2023 20:28:33' prior: 50333427!
defaultCatalog
	
	^ Dictionary new at: self itemSellByTheStore put: 100.! !
!Cart methodsFor: 'assertions' stamp: 's 11/4/2023 20:29:15' prior: 50333507!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:29:16'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:29:16'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:29:16'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:29:16'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:29:16'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:29:16'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:29:16'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:29:16'!
ERROR!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:29:16'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:29:16'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:29:16'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:29:17'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:29:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:29:54'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:29:54'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:29:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:29:54'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:29:54'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:29:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:29:54'!
ERROR!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:29:54'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:29:54'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:29:54'!
ERROR!
!Cart methodsFor: 'initialization' stamp: 's 11/4/2023 20:30:00' prior: 50333329!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	self halt.
	items := Bag new.! !

catalog!

aCatalog!
!CartTest methodsFor: 'support' stamp: 's 11/4/2023 20:30:30' prior: 50333517!
defaultCatalog
	
	^ Dictionary new at: self itemSellByTheStore put: 100;yourself.! !
!Cart methodsFor: 'initialization' stamp: 's 11/4/2023 20:30:36' prior: 50333600!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	
	items := Bag new.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:30:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:30:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:30:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:30:39'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:30:39'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:30:39'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:30:40'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:30:40'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:30:40'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:30:40'!
PASSED!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:30:41'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:30:57'!
costOf: aRenameMe1 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:31:04' prior: 50333653!
costOf: aList 
	self shouldBeImplemented.! !

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:31:05'!
ERROR!
!Cart methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:31:44' prior: 50333384!
listCart
	^catalog! !
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:32:04' prior: 50333658!
costOf: aCatalog 
	! !
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:33:02' prior: 50333669!
costOf: aCatalog 
	^aCatalog  sum:[:item| (cart occurrencesOf: item) * (aCatalog at: item)]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:33:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:33:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:33:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:33:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:33:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:33:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:33:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:33:03'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:33:03'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:33:03'!
PASSED!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:33:03'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:33:03'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:33:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:33:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:33:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:33:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:33:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:33:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:33:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:33:18'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:33:18'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:33:18'!
PASSED!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:33:18'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:33:18'!
ERROR!

cart!

aCatalog!

cart occurrencesOf: item!

item!

aCatalog!
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:35:35' prior: 50333673!
costOf: anItemList 
	^anItemList  sum:[:item| (cart occurrencesOf:item)]! !
!Cart methodsFor: 'assertions' stamp: 's 11/4/2023 20:36:07' prior: 50333522!
assertIsValidItem: anItem

	(catalog includes: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:36:26' prior: 50333665!
listCart
	^items! !
!CartTest methodsFor: 'support' stamp: 'HernanWilkinson 6/17/2013 17:43' prior: 50333607!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CartTest methodsFor: 'support' stamp: 's 11/4/2023 20:36:57'!
defaultPriceCatalog
	
	^Dictionary new at: self itemSellByTheStore put: 100;yourself.! !
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 20:37:40' prior: 50333122!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard withPriceCatalog: self defaultPriceCatalog .
	cashier checkout.
	self assert: cashier transactionList! !

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:37:41'!
ERROR!
!CartTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 20:37:46' prior: 50333781!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard  .
	cashier checkout.
	self assert: cashier transactionList! !
!Cashier class methodsFor: 'instance creation' stamp: 's 11/4/2023 20:39:15'!
for: aCart payingWith: aCreditCard aPricedCatalog: aPricedCatalog 
	self assertCartIsNotEmpty: aCart.
	aCreditCard isExpired ifTrue:[self error: self creditCardExpiredMessageDescription ].
	^self new initializeFor: aCart payingWith: aCreditCard ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:39:15' prior: 50333797!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard aPricedCatalog: self defaultPriceCatalog  .
	cashier checkout.
	self assert: cashier transactionList! !
!CartTest methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:39:15' prior: 50333150!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	creditCard:= self createNonExpiredCard.
	self 
		should: [ cashier:= Cashier for:cart payingWith: creditCard aPricedCatalog: self defaultPriceCatalog  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:39:15' prior: 50333166!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard aPricedCatalog: self defaultPriceCatalog   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].! !

!methodRemoval: Cashier class #for:payingWith: stamp: 's 11/4/2023 20:39:15'!
for: aCart payingWith: aCreditCard
	self assertCartIsNotEmpty: aCart.
	aCreditCard isExpired ifTrue:[self error: self creditCardExpiredMessageDescription ].
	^self new initializeFor: aCart payingWith: aCreditCard !
!Cashier methodsFor: 'initialize' stamp: 's 11/4/2023 20:40:02'!
initializeFor: aCart payingWith: aCreditCard aPricedCatalog: aPricedCatalog 
	
	cart := aCart.
	creditCard:= aCreditCard! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:40:02' prior: 50333809!
for: aCart payingWith: aCreditCard aPricedCatalog: aPricedCatalog 
	self assertCartIsNotEmpty: aCart.
	aCreditCard isExpired ifTrue:[self error: self creditCardExpiredMessageDescription ].
	^self new initializeFor: aCart payingWith: aCreditCard aPricedCatalog: aPricedCatalog ! !

!methodRemoval: Cashier #initializeFor:payingWith: stamp: 's 11/4/2023 20:40:02'!
initializeFor: aCart payingWith: aCreditCard
	
	cart := aCart.
	creditCard:= aCreditCard!
!Cashier class methodsFor: 'instance creation' stamp: 's 11/4/2023 20:40:33'!
for: aCart payingWith: aCreditCard withPricedCatalog: aPricedCatalog 
	self assertCartIsNotEmpty: aCart.
	aCreditCard isExpired ifTrue:[self error: self creditCardExpiredMessageDescription ].
	^self new initializeFor: aCart payingWith: aCreditCard aPricedCatalog: aPricedCatalog ! !
!CartTest methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:40:33' prior: 50333820!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  .
	cashier checkout.
	self assert: cashier transactionList! !
!CartTest methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:40:33' prior: 50333850!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			"falta ver que no se creo el objeto?" ].! !
!CartTest methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:40:33' prior: 50333833!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	creditCard:= self createNonExpiredCard.
	self 
		should: [ cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage.
			"falta ver que no se creo el objeto?" ].! !

!methodRemoval: Cashier class #for:payingWith:aPricedCatalog: stamp: 's 11/4/2023 20:40:33'!
for: aCart payingWith: aCreditCard aPricedCatalog: aPricedCatalog 
	self assertCartIsNotEmpty: aCart.
	aCreditCard isExpired ifTrue:[self error: self creditCardExpiredMessageDescription ].
	^self new initializeFor: aCart payingWith: aCreditCard aPricedCatalog: aPricedCatalog !
!Cashier methodsFor: 'initialize' stamp: 's 11/4/2023 20:40:45'!
initializeFor: aCart payingWith: aCreditCard withPricedCatalog: aPricedCatalog 
	
	cart := aCart.
	creditCard:= aCreditCard! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 's 11/4/2023 20:40:45' prior: 50333902!
for: aCart payingWith: aCreditCard withPricedCatalog: aPricedCatalog 
	self assertCartIsNotEmpty: aCart.
	aCreditCard isExpired ifTrue:[self error: self creditCardExpiredMessageDescription ].
	^self new initializeFor: aCart payingWith: aCreditCard withPricedCatalog: aPricedCatalog ! !

!methodRemoval: Cashier #initializeFor:payingWith:aPricedCatalog: stamp: 's 11/4/2023 20:40:45'!
initializeFor: aCart payingWith: aCreditCard aPricedCatalog: aPricedCatalog 
	
	cart := aCart.
	creditCard:= aCreditCard!

!classDefinition: #Cashier category: 'TusLibros' stamp: 's 11/4/2023 20:41:02'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard pricedCatalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialize' stamp: 's 11/4/2023 20:41:01' prior: 50333974!
initializeFor: aCart payingWith: aCreditCard withPricedCatalog: aPricedCatalog 
	
	cart := aCart.
	creditCard:= aCreditCard.
	pricedCatalog:= aPricedCatalog.! !
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:41:31' prior: 50333755!
costOf: anItemList 
	^anItemList  sum:[:item| (cart occurrencesOf:item) * pricedCatalog at: item]! !
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:41:36' prior: 50334015!
costOf: anItemList 
	^anItemList  sum:[:item| (cart occurrencesOf:item) * (pricedCatalog at: item)]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:41:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:41:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:41:42'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:41:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:41:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:41:42'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:41:42'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:41:42'!
PASSED!

!testRun: #CartTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:41:42'!
PASSED!

!testRun: #CartTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:41:42'!
PASSED!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:41:42'!
ERROR!

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:41:42'!
ERROR!
!Cashier methodsFor: 'debit' stamp: 's 11/4/2023 20:41:52'!
debit: aRenameMe1 from: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'debit' stamp: 's 11/4/2023 20:41:57' prior: 50334064!
debit: aCart from: aCreditCard 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'debit' stamp: 's 11/4/2023 20:42:00' prior: 50334069!
debit: aCart from: aCreditCard 
	! !

!testRun: #CartTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:42:00'!
ERROR!

!classRenamed: #CartTest as: #MarketTest stamp: 's 11/4/2023 20:42:41'!
Smalltalk renameClassNamed: #CartTest as: #MarketTest!
!MarketTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 20:45:51' prior: 50333914!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  .
	cashier checkout.
	self assert: cashier transactionList equals: (Bag  with: self itemNotSellByTheStore)! !
!MarketTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 20:46:14' prior: 50334085!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  .
	cashier checkout.
	self assert: cashier transactionList equals: (Bag with: self itemNotSellByTheStore)! !

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:46:16'!
ERROR!
!Cashier methodsFor: 'transactions' stamp: 's 11/4/2023 20:46:34'!
transactionList
	self shouldBeImplemented.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 's 11/4/2023 20:47:03'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard pricedCatalog transactionList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'transactions' stamp: 's 11/4/2023 20:47:01' prior: 50334117!
transactionList
	^transactionList ! !

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:47:09'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:47:41' prior: 50333276!
checkout
	transactionList add: cart listCart.
	self debit: (self costOf: cart listCart) from: creditCard.! !

!testRun: #MarketTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:47:45'!
PASSED!

!testRun: #MarketTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:47:45'!
PASSED!

!testRun: #MarketTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:47:45'!
PASSED!

!testRun: #MarketTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:47:45'!
PASSED!

!testRun: #MarketTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:47:45'!
PASSED!

!testRun: #MarketTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:47:45'!
PASSED!

!testRun: #MarketTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:47:45'!
PASSED!

!testRun: #MarketTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:47:45'!
PASSED!

!testRun: #MarketTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:47:45'!
PASSED!

!testRun: #MarketTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:47:45'!
PASSED!

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:47:45'!
ERROR!

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:47:45'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 20:47:51' prior: 50334136!
checkout
	transactionList addAll: cart listCart.
	self debit: (self costOf: cart listCart) from: creditCard.! !

!testRun: #MarketTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:47:52'!
PASSED!

!testRun: #MarketTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:47:52'!
PASSED!

!testRun: #MarketTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:47:52'!
PASSED!

!testRun: #MarketTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:47:52'!
PASSED!

!testRun: #MarketTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:47:52'!
PASSED!

!testRun: #MarketTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:47:52'!
PASSED!

!testRun: #MarketTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:47:52'!
PASSED!

!testRun: #MarketTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:47:52'!
PASSED!

!testRun: #MarketTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:47:52'!
PASSED!

!testRun: #MarketTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:47:52'!
PASSED!

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:47:52'!
ERROR!

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:47:52'!
ERROR!
!Cashier methodsFor: 'initialize' stamp: 's 11/4/2023 20:48:04' prior: 50334007!
initializeFor: aCart payingWith: aCreditCard withPricedCatalog: aPricedCatalog 
	
	cart := aCart.
	creditCard:= aCreditCard.
	pricedCatalog:= aPricedCatalog.
	transactionList:= Bag new.! !

!testRun: #MarketTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:48:07'!
PASSED!

!testRun: #MarketTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:48:07'!
PASSED!

!testRun: #MarketTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:48:07'!
PASSED!

!testRun: #MarketTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:48:07'!
PASSED!

!testRun: #MarketTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:48:07'!
PASSED!

!testRun: #MarketTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:48:07'!
PASSED!

!testRun: #MarketTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:48:07'!
PASSED!

!testRun: #MarketTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:48:07'!
PASSED!

!testRun: #MarketTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:48:07'!
PASSED!

!testRun: #MarketTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:48:07'!
PASSED!

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:48:07'!
FAILURE!

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:48:07'!
FAILURE!
!MarketTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 20:48:16' prior: 50334100!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  .
	cashier checkout.
	self assert: cashier transactionList equals: (Bag with: self itemSellByTheStore)! !

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:48:17'!
PASSED!

!testRun: #MarketTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 20:48:19'!
PASSED!

!testRun: #MarketTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 20:48:19'!
PASSED!

!testRun: #MarketTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 20:48:19'!
PASSED!

!testRun: #MarketTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 20:48:19'!
PASSED!

!testRun: #MarketTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 20:48:19'!
PASSED!

!testRun: #MarketTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 20:48:19'!
PASSED!

!testRun: #MarketTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 20:48:19'!
PASSED!

!testRun: #MarketTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 20:48:19'!
PASSED!

!testRun: #MarketTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 20:48:19'!
PASSED!

!testRun: #MarketTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 20:48:19'!
PASSED!

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 20:48:19'!
PASSED!
!MarketTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 20:49:03' prior: 50334271!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  .
	cashier checkout.
	self assert: cashier transactionList equals: (Bag with: self itemSellByTheStore) "aca falta que tambien agregue la suma de los costos, capaz tenerlo como otra variable puede estar bien, ni idea"! !

!testRun: #MarketTest #test01NewCartsAreCreatedEmpty stamp: 's 11/4/2023 21:00:17'!
PASSED!

!testRun: #MarketTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/4/2023 21:00:17'!
PASSED!

!testRun: #MarketTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/4/2023 21:00:17'!
PASSED!

!testRun: #MarketTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/4/2023 21:00:17'!
PASSED!

!testRun: #MarketTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/4/2023 21:00:17'!
PASSED!

!testRun: #MarketTest #test06CartRemembersAddedItems stamp: 's 11/4/2023 21:00:17'!
PASSED!

!testRun: #MarketTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/4/2023 21:00:17'!
PASSED!

!testRun: #MarketTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/4/2023 21:00:17'!
PASSED!

!testRun: #MarketTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/4/2023 21:00:17'!
PASSED!

!testRun: #MarketTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/4/2023 21:00:17'!
PASSED!

!testRun: #MarketTest #test11CanCheckoutCashier stamp: 's 11/4/2023 21:00:17'!
PASSED!
!MarketTest methodsFor: 'tests -- cashier' stamp: 's 11/4/2023 21:15:31' prior: 50334324!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  .
	cashier checkout.
	self assert: cashier transactionList equals: (Bag with: self itemSellByTheStore) "aca falta que tambien agregue la suma de los costos, capaz tenerlo como otra variable puede estar bien, ni idea"! !
!Cashier methodsFor: 'checkout' stamp: 's 11/4/2023 21:16:16' prior: 50334180!
checkout
	transactionList addAll: cart listCart."esto no se si tiene que estar adentro de debit o aca"
	self debit: (self costOf: cart listCart) from: creditCard.! !

----QUIT----(4 November 2023 21:16:31) CuisUniversity-5981.image priorSource: 10215977!

----STARTUP---- (5 November 2023 19:56:47) as /home/totorroto/Desktop/Libros/linux64/CuisUniversity-5981.image!


!classRenamed: #MarketTest as: #StoreTest stamp: 's 11/5/2023 20:03:28'!
Smalltalk renameClassNamed: #MarketTest as: #StoreTest!
!StoreTest methodsFor: 'tests -- cashier' stamp: 's 11/5/2023 20:05:03' prior: 50333946!
test09CanNotCreateCashierOfEmptyCart

	| cart cashier creditCard |
	
	cart := self createCart.
	creditCard:= self createNonExpiredCard.
	self 
		should: [ cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage. ].! !
!StoreTest methodsFor: 'tests -- cashier' stamp: 's 11/5/2023 20:05:09' prior: 50333927!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart cashier  creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	
	self 
		should: [cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.
			].! !
!StoreTest methodsFor: 'tests -- cashier' stamp: 's 11/5/2023 20:05:17' prior: 50334430!
test10CanNotCreateCashierPayingWithAnExpiredCreditCard

	| cart creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createExpiredCard.
	
	self 
		should: [Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog   ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class creditCardExpiredMessageDescription.].! !
!StoreTest methodsFor: 'tests -- cashier' stamp: 's 11/5/2023 20:05:22' prior: 50334414!
test09CanNotCreateCashierOfEmptyCart

	| cart creditCard |
	
	cart := self createCart.
	creditCard:= self createNonExpiredCard.
	self 
		should: [ Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier new class emptyCartErrorMessage. ].! !
!StoreTest methodsFor: 'tests -- cashier' stamp: 's 11/5/2023 20:05:57' prior: 50334377!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  .
	cashier checkout.
	self assert: cashier transactionList equals: (Bag with: self itemSellByTheStore)! !
!Cashier methodsFor: 'checkout' stamp: 's 11/5/2023 20:06:40' prior: 50334021!
costOf: anItemList 
	^anItemList  sum:[:item | (cart occurrencesOf:item) * (pricedCatalog at: item)]! !
!Cashier methodsFor: 'checkout' stamp: 's 11/5/2023 20:07:20' prior: 50334495!
costOf: anItemList 
	^anItemList  sum:[:item | (cart occurrencesOf: item) * (pricedCatalog at: item)]! !
!Cashier methodsFor: 'checkout' stamp: 's 11/5/2023 20:08:15' prior: 50334395!
checkout
	transactionList addAll: cart listCart.
	self debit: (self costOf: cart listCart) from: creditCard.! !
!Cashier methodsFor: 'checkout' stamp: 's 11/5/2023 20:08:37' prior: 50334507!
checkout
	
	self debit: (self costOf: cart listCart) from: creditCard.! !
!Cashier methodsFor: 'debit' stamp: 's 11/5/2023 20:08:42' prior: 50334074!
debit: aCart from: aCreditCard 
	
	
	transactionList addAll: cart listCart.! !
!Cashier methodsFor: 'debit' stamp: 's 11/5/2023 20:08:52' prior: 50334518!
debit: aCart from: aCreditCard 
	
	
	transactionList addAll: cart listCart.! !
!Cashier methodsFor: 'debit' stamp: 's 11/5/2023 20:08:54' prior: 50334523!
debit: aCart from: aCreditCard 
	transactionList addAll: cart listCart.! !
!Cart methodsFor: 'initialization' stamp: 's 11/5/2023 20:09:28' prior: 50333613!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 's 11/5/2023 20:11:44'!
Object subclass: #Cashier
	instanceVariableNames: 'cart creditCard pricedCatalog alreadyCheckOutItems'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:11:44' prior: 50334224!
initializeFor: aCart payingWith: aCreditCard withPricedCatalog: aPricedCatalog 
	
	cart := aCart.
	creditCard:= aCreditCard.
	pricedCatalog:= aPricedCatalog.
	alreadyCheckOutItems:= Bag new.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:11:44' prior: 50334528!
debit: aCart from: aCreditCard 
	alreadyCheckOutItems addAll: cart listCart.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:11:44' prior: 50334129!
transactionList
	^alreadyCheckOutItems ! !
!Cashier methodsFor: 'transactions' stamp: 's 11/5/2023 20:11:56'!
alreadyCheckOutItems
	^alreadyCheckOutItems ! !

!methodRemoval: Cashier #transactionList stamp: 's 11/5/2023 20:11:56'!
transactionList
	^alreadyCheckOutItems !

!testRun: #StoreTest #test01NewCartsAreCreatedEmpty stamp: 's 11/5/2023 20:12:01'!
PASSED!

!testRun: #StoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/5/2023 20:12:01'!
PASSED!

!testRun: #StoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/5/2023 20:12:01'!
PASSED!

!testRun: #StoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/5/2023 20:12:01'!
PASSED!

!testRun: #StoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/5/2023 20:12:01'!
PASSED!

!testRun: #StoreTest #test06CartRemembersAddedItems stamp: 's 11/5/2023 20:12:01'!
PASSED!

!testRun: #StoreTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/5/2023 20:12:01'!
PASSED!

!testRun: #StoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/5/2023 20:12:01'!
PASSED!

!testRun: #StoreTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/5/2023 20:12:01'!
PASSED!

!testRun: #StoreTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/5/2023 20:12:01'!
PASSED!

!testRun: #StoreTest #test11CanCheckoutCashier stamp: 's 11/5/2023 20:12:01'!
ERROR!

!testRun: #StoreTest #test11CanCheckoutCashier stamp: 's 11/5/2023 20:12:01'!
ERROR!
!StoreTest methodsFor: 'tests -- cashier' stamp: 's 11/5/2023 20:12:13' prior: 50334481!
test11CanCheckoutCashier

	| cart cashier creditCard | 
	
	cart := self createCart.
	cart add: self itemSellByTheStore.
	creditCard:= self createNonExpiredCard.
	cashier:= Cashier for:cart payingWith: creditCard withPricedCatalog: self defaultPriceCatalog  .
	cashier checkout.
	self assert: cashier alreadyCheckOutItems equals: (Bag with: self itemSellByTheStore)! !

!testRun: #StoreTest #test11CanCheckoutCashier stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test01NewCartsAreCreatedEmpty stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test04CanNotAddNonPositiveNumberOfItems stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test06CartRemembersAddedItems stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test07CartDoesNotHoldNotAddedItems stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test08CartRemembersTheNumberOfAddedItems stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test09CanNotCreateCashierOfEmptyCart stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test10CanNotCreateCashierPayingWithAnExpiredCreditCard stamp: 's 11/5/2023 20:12:13'!
PASSED!

!testRun: #StoreTest #test11CanCheckoutCashier stamp: 's 11/5/2023 20:12:13'!
PASSED!

TestCase subclass: #APIMockTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #APIMockTest category: 'TusLibros' stamp: 's 11/5/2023 20:13:19'!
TestCase subclass: #APIMockTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!APIMockTest methodsFor: 'no messages' stamp: 's 11/5/2023 20:13:29'!
test01xx! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:16:21' prior: 50334674!
test01xx
	| request |
	request:= Dictionary new.! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:17:07' prior: 50334678!
test01xx
	| request |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	! !

!classDefinition: #StoreAPI category: 'TusLibros' stamp: 's 11/5/2023 20:19:57'!
Object subclass: #StoreAPI
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:19:53' prior: 50334683!
test01xx
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	api:= StoreAPI new.
	response := api createCartBasedOn: request.! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:20:36' prior: 50334697!
test01xx
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	api:= StoreAPI new.
	
	response := api createCartBasedOn: request.! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:23:11' prior: 50334707!
test01xx
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 1.
	self assert: response body equals: self invalidUser.! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:23:18'!
ERROR!
!StoreAPI methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:23:39'!
createCartBasedOn: request 
	self shouldBeImplemented.! !

!methodRemoval: StoreAPI #createCartBasedOn: stamp: 's 11/5/2023 20:23:47'!
createCartBasedOn: request 
	self shouldBeImplemented.!

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:23:49'!
ERROR!

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:23:49'!
ERROR!
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:24:05'!
createCartBasedOn: request 
	self shouldBeImplemented.! !

!classDefinition: #StoreAPI category: 'TusLibros' stamp: 's 11/5/2023 20:28:35'!
Object subclass: #StoreAPI
	instanceVariableNames: 'storeSystem'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:28:30' prior: 50334744!
createCartBasedOn: request 
	| cart clientId password |
	clientId:= request at: #clientId.
	password:= request at: #password.
	cart := storeSystem createCartFor: clientId withPassword: password.! !
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:28:40' prior: 50334756!
createCartBasedOn: request 
	| cart clientId password |
	clientId:= request at: #clientId.
	password:= request at: #password.
	
	cart := storeSystem createCartFor: clientId withPassword: password.! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:28:42'!
ERROR!
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:29:21'!
initializeWorkingWith: aStoreSystem
	storeSystem:= aStoreSystem new.! !

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 's 11/5/2023 20:30:31'!
Object subclass: #StoreSystem
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:30:24' prior: 50334717!
test01xx
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 1.
	self assert: response body equals: self invalidUser.! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:30:35' prior: 50334788!
test01xx
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 1.
	self assert: response body equals: self invalidUser.! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:30:38'!
ERROR!
!StoreAPI class methodsFor: 'instance creation' stamp: 's 11/5/2023 20:30:43'!
workingWith: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWorkingWith: aRenameMe1 ! !
!StoreAPI class methodsFor: 'instance creation' stamp: 's 11/5/2023 20:30:54' prior: 50334817!
workingWith: aSystem 
	^self new initializeWorkingWith: aSystem ! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:30:57'!
ERROR!
!StoreAPI methodsFor: 'initialize' stamp: 's 11/5/2023 20:31:09' prior: 50334776!
initializeWorkingWith: aStoreSystem
	storeSystem:= aStoreSystem.! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:31:10'!
ERROR!
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 20:31:32'!
createCartFor: clientId withPassword: password 
	self shouldBeImplemented.! !

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 's 11/5/2023 20:32:51'!
Object subclass: #StoreSystem
	instanceVariableNames: 'usersId'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 20:32:48' prior: 50334840!
createCartFor: clientId withPassword: password 
	(usersId includes: clientId) ifFalse:[self error:'Invalid user'].
	! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:32:54'!
ERROR!
!StoreSystem methodsFor: 'nil' stamp: 's 11/5/2023 20:33:36' overrides: 16920235!
initialize
	usersId:= OrderedCollection new add: 'Pedro';yourself.! !
!StoreSystem methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:33:56' prior: 50334861 overrides: 16920235!
initialize
	usersId:= Set new add: 'Pedro';yourself.! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:33:58'!
ERROR!

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:33:58'!
ERROR!

!classDefinition: #Response category: 'TusLibros' stamp: 's 11/5/2023 20:41:07'!
Object subclass: #Response
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:41:03' prior: 50334765!
createCartBasedOn: request 
	| cart clientId password |
	clientId:= request at: #clientId.
	password:= request at: #password.
	
	[cart := storeSystem createCartFor: clientId withPassword: password] 
		on: Error 
		do: [:anError| ^Response withCode:200 withBody:'1|', anError description  ]
	! !
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:41:16' prior: 50334883!
createCartBasedOn: request 
	| cart clientId password |
	clientId:= request at: #clientId.
	password:= request at: #password.
	
	[cart := storeSystem createCartFor: clientId withPassword: password] 
		on: Error 
		do: [:anError| ^Response withCode:200 withBody: '1|', anError description  ]
	! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:41:19'!
ERROR!
!Response class methodsFor: 'instance creation' stamp: 's 11/5/2023 20:41:30'!
withCode: aRenameMe1 withBody: aRenameMe2 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCode: aRenameMe1 withBody: aRenameMe2 ! !
!Response class methodsFor: 'instance creation' stamp: 's 11/5/2023 20:41:41' prior: 50334909!
withCode: aCode withBody: aBody 
	
	^self new initializeWithCode: aCode withBody: aBody ! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:41:42'!
ERROR!

!classDefinition: #Response category: 'TusLibros' stamp: 's 11/5/2023 20:41:47'!
Object subclass: #Response
	instanceVariableNames: 'code'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Response category: 'TusLibros' stamp: 's 11/5/2023 20:41:47'!
Object subclass: #Response
	instanceVariableNames: 'code body'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Response methodsFor: 'initialize' stamp: 's 11/5/2023 20:41:47'!
initializeWithCode: aCode withBody: aBody 
	self shouldBeImplemented.
	code := aCode.
	body := aBody.! !
!Response methodsFor: 'initialize' stamp: 's 11/5/2023 20:41:50' prior: 50334940!
initializeWithCode: aCode withBody: aBody 
	
	code := aCode.
	body := aBody.! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:41:51'!
ERROR!
!Response methodsFor: 'accesing' stamp: 's 11/5/2023 20:42:00'!
code
	self shouldBeImplemented.
	^code! !
!Response methodsFor: 'accesing' stamp: 's 11/5/2023 20:42:03' prior: 50334953!
code
	
	^code! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:42:03'!
FAILURE!
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:42:09' prior: 50334802!
test01xx
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUser.! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:42:10'!
ERROR!
!Response methodsFor: 'accesing' stamp: 's 11/5/2023 20:42:15'!
body
	self shouldBeImplemented.
	^body! !
!Response methodsFor: 'accesing' stamp: 's 11/5/2023 20:42:17' prior: 50334978!
body
	
	^body! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:42:18'!
ERROR!
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:42:33'!
invalidUser
	self shouldBeImplemented.! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:42:52' prior: 50334988!
invalidUser
	^'1|invalid user'! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:42:53'!
FAILURE!
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:43:17' prior: 50334993!
invalidUser
	^'1|Invalid user'! !
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:43:50' prior: 50334895!
createCartBasedOn: request 
	| cart clientId password |
	clientId:= request at: #clientId.
	password:= request at: #password.
	
	[cart := storeSystem createCartFor: clientId withPassword: password] 
		on: Error 
		do: [:anError| ^Response withCode:200 withBody: '1|', anError messageText]
	! !
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:43:56' prior: 50335004!
createCartBasedOn: request 
	| clientId password |
	clientId:= request at: #clientId.
	password:= request at: #password.
	
	[storeSystem createCartFor: clientId withPassword: password] 
		on: Error 
		do: [:anError| ^Response withCode:200 withBody: '1|', anError messageText]
	! !
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:44:03' prior: 50335016!
createCartBasedOn: request 
	| clientId password |
	clientId:= request at: #clientId.
	password:= request at: #password.
	
	[ | cart |cart:= storeSystem createCartFor: clientId withPassword: password] 
		on: Error 
		do: [:anError| ^Response withCode:200 withBody: '1|', anError messageText]
	! !
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:44:11' prior: 50335028!
createCartBasedOn: request 
	| clientId password cart |
	clientId:= request at: #clientId.
	password:= request at: #password.
	
	[ cart:= storeSystem createCartFor: clientId withPassword: password] 
		on: Error 
		do: [:anError| ^Response withCode:200 withBody: '1|', anError messageText]
	! !

!testRun: #APIMockTest #test01xx stamp: 's 11/5/2023 20:44:13'!
PASSED!
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:44:36'!
test01InvalidUser
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUser.! !

!methodRemoval: APIMockTest #test01xx stamp: 's 11/5/2023 20:44:36'!
test01xx
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUser.!
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:44:50'!
test02WrongPassword
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUser.! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:45:20' prior: 50335080!
test02WrongPassword
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self wrongPasswordResponseBody.! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:45:36'!
invalidUserResponseBody
	^'1|Invalid user'! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:45:36' prior: 50335054!
test01InvalidUser
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUserResponseBody.! !

!methodRemoval: APIMockTest #invalidUser stamp: 's 11/5/2023 20:45:36'!
invalidUser
	^'1|Invalid user'!

!testRun: #APIMockTest #test01InvalidUser stamp: 's 11/5/2023 20:45:39'!
PASSED!

!testRun: #APIMockTest #test01InvalidUser stamp: 's 11/5/2023 20:45:39'!
PASSED!

!testRun: #APIMockTest #test02WrongPassword stamp: 's 11/5/2023 20:45:39'!
ERROR!

!testRun: #APIMockTest #test02WrongPassword stamp: 's 11/5/2023 20:45:39'!
ERROR!
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:45:49'!
wrongPasswordResponseBody
	self shouldBeImplemented.! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:46:01' prior: 50335140!
wrongPasswordResponseBody
	^'200|Wrong password'! !

!testRun: #APIMockTest #test02WrongPassword stamp: 's 11/5/2023 20:46:02'!
FAILURE!

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 's 11/5/2023 20:47:20'!
Object subclass: #StoreSystem
	instanceVariableNames: 'usersId passwords'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 20:47:18' prior: 50334852!
createCartFor: clientId withPassword: password 
	(usersId includes: clientId) ifFalse:[self error:'Invalid user'].
	((passwords at: clientId) = password) ifFalse:[self error: 'Wrong password'].
	! !
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 20:47:51' prior: 50335159!
createCartFor: clientId withPassword: password 
	(usersId includesKey: clientId) ifFalse:[self error:'Invalid user'].
	((usersId at: clientId) = password) ifFalse:[self error: 'Wrong password'].
	! !
!StoreSystem methodsFor: 'initialize' stamp: 's 11/5/2023 20:48:20' prior: 50334867 overrides: 16920235!
initialize
	usersId:= Dictionary new at: 'Pedro' put:'not pass';yourself.! !

!testRun: #APIMockTest #test01InvalidUser stamp: 's 11/5/2023 20:48:22'!
PASSED!

!testRun: #APIMockTest #test02WrongPassword stamp: 's 11/5/2023 20:48:22'!
FAILURE!

!testRun: #APIMockTest #test02WrongPassword stamp: 's 11/5/2023 20:48:22'!
FAILURE!
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:48:30' prior: 50335094!
test02WrongPassword
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self wrongPasswordResponseBody.! !

!testRun: #APIMockTest #test02WrongPassword stamp: 's 11/5/2023 20:48:31'!
FAILURE!
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:48:51' prior: 50335108!
invalidUserResponseBody
	^'200|Invalid user'! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:48:56' prior: 50335209!
invalidUserResponseBody
	^'1|Invalid user'! !
!APIMockTest methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:49:00' prior: 50335145!
wrongPasswordResponseBody
	^'1|Wrong password'! !

!testRun: #APIMockTest #test01InvalidUser stamp: 's 11/5/2023 20:49:01'!
PASSED!

!testRun: #APIMockTest #test02WrongPassword stamp: 's 11/5/2023 20:49:01'!
PASSED!
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 20:50:13'!
test03InvalidRequest
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self wrongPasswordResponseBody.! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 20:50:29' prior: 50335228!
test03InvalidRequest
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:''.
	request at: #password put:''.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self wrongPasswordResponseBody.! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 20:50:45' prior: 50335242!
test03InvalidRequest
	| request api response |
	request:= Dictionary new.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self wrongPasswordResponseBody.! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 20:50:58' prior: 50335256!
test03InvalidRequest
	| request api response |
	request:= Dictionary new.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 400.
	self assert: response body equals: ''.! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 20:51:17' prior: 50335268!
test03InvalidRequest
	| request api response |
	request:= Dictionary new.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 400.
	! !

!testRun: #APIMockTest #test03InvalidRequest stamp: 's 11/5/2023 20:51:21'!
ERROR!
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 20:52:07' prior: 50335040!
createCartBasedOn: request 
	| clientId password cart |
	clientId:= request at: #clientId ifAbsent:[^Response withCode:400].
	password:= request at: #password ifAbsent:[^Response withCode:400].
	
	[ cart:= storeSystem createCartFor: clientId withPassword: password] 
		on: Error 
		do: [:anError| ^Response withCode:200 withBody: '1|', anError messageText]
	! !

!testRun: #APIMockTest #test03InvalidRequest stamp: 's 11/5/2023 20:52:11'!
ERROR!
!Response class methodsFor: 'instance creation' stamp: 's 11/5/2023 20:52:15'!
withCode: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithCode: aRenameMe1 ! !
!Response class methodsFor: 'instance creation' stamp: 's 11/5/2023 20:52:29' prior: 50335308!
withCode: aRenameMe1 
	
	^self  with aRenameMe1 ! !
!Response class methodsFor: 'instance creation' stamp: 's 11/5/2023 20:52:31' prior: 50335317!
withCode: aRenameMe1 
	
	^self  withC aRenameMe1 ! !
!Response class methodsFor: 'instance creation' stamp: 's 11/5/2023 20:52:50' prior: 50335322!
withCode: aCode 
	
	^self  withCode: aCode withBody: ''. ! !

!testRun: #APIMockTest #test03InvalidRequest stamp: 's 11/5/2023 20:52:51'!
PASSED!

!testRun: #APIMockTest #test01InvalidUser stamp: 's 11/5/2023 20:52:51'!
PASSED!

!testRun: #APIMockTest #test02WrongPassword stamp: 's 11/5/2023 20:52:51'!
PASSED!

!testRun: #APIMockTest #test03InvalidRequest stamp: 's 11/5/2023 20:52:51'!
PASSED!
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 20:53:03'!
test01InvalidUserForCartCreation
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUserResponseBody.! !

!methodRemoval: APIMockTest #test01InvalidUser stamp: 's 11/5/2023 20:53:03'!
test01InvalidUser
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUserResponseBody.!
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 20:53:11'!
test02WrongPasswordForCartCreation
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self wrongPasswordResponseBody.! !

!methodRemoval: APIMockTest #test02WrongPassword stamp: 's 11/5/2023 20:53:11'!
test02WrongPassword
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self wrongPasswordResponseBody.!
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 20:53:16'!
test03InvalidRequestForCartCreation
	| request api response |
	request:= Dictionary new.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 400.
	! !

!methodRemoval: APIMockTest #test03InvalidRequest stamp: 's 11/5/2023 20:53:16'!
test03InvalidRequest
	| request api response |
	request:= Dictionary new.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 400.
	!

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 's 11/5/2023 20:55:30'!
Object subclass: #StoreSystem
	instanceVariableNames: 'usersDatabase passwords'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:55:30' prior: 50335168!
createCartFor: clientId withPassword: password 
	(usersDatabase includesKey: clientId) ifFalse:[self error:'Invalid user'].
	((usersDatabase at: clientId) = password) ifFalse:[self error: 'Wrong password'].
	! !
!StoreSystem methodsFor: 'as yet unclassified' stamp: 's 11/5/2023 20:55:30' prior: 50335178 overrides: 16920235!
initialize
	usersDatabase:= Dictionary new at: 'Pedro' put:'not pass';yourself.! !
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 20:56:08'!
assertRegisteredClientId: clientId

	^ (usersDatabase includesKey: clientId) ifFalse:[self error:'Invalid user']! !
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 20:56:08' prior: 50335423!
createCartFor: clientId withPassword: password 
	self assertRegisteredClientId: clientId.
	((usersDatabase at: clientId) = password) ifFalse:[self error: 'Wrong password'].
	! !
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 20:57:21'!
assert: clientId hasPassword: password

	^ ((usersDatabase at: clientId) = password) ifFalse:[self error: 'Wrong password']! !
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 20:57:21' prior: 50335446!
createCartFor: clientId withPassword: password 
	self assertRegisteredClientId: clientId.
	self assert: clientId hasPassword: password.
	! !

!testRun: #APIMockTest #test01InvalidUserForCartCreation stamp: 's 11/5/2023 20:57:24'!
PASSED!

!testRun: #APIMockTest #test02WrongPasswordForCartCreation stamp: 's 11/5/2023 20:57:24'!
PASSED!

!testRun: #APIMockTest #test03InvalidRequestForCartCreation stamp: 's 11/5/2023 20:57:24'!
PASSED!
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 20:58:57'!
authenticate: clientId withPassword: password

	self assertRegisteredClientId: clientId.
	self assert: clientId hasPassword: password! !
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 20:58:57' prior: 50335461!
createCartFor: clientId withPassword: password 
	self authenticate: clientId withPassword: password.
	! !
!Response methodsFor: 'accesing' stamp: 's 11/5/2023 20:59:12' prior: 50334957!
code
	^code! !
!Response methodsFor: 'accesing' stamp: 's 11/5/2023 20:59:15' prior: 50334982!
body
	^body! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 20:59:40'!
test04CreateCart
	| request api response |
	request:= Dictionary new.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 400.
	! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 20:59:58' prior: 50335496!
test04CreateCart
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'not pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUserResponseBody.
	! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:00:11' prior: 50335506!
test04CreateCart
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUserResponseBody.
	! !
!StoreSystem methodsFor: 'initialize' stamp: 's 11/5/2023 21:00:41' prior: 50335434 overrides: 16920235!
initialize
	usersDatabase:= Dictionary new at: 'Pedro' put:'pass';yourself.! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:00:50' prior: 50335342!
test01InvalidUserForCartCreation
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'wrong pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUserResponseBody.! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:00:56' prior: 50335540!
test01InvalidUserForCartCreation
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUserResponseBody.! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:00:59' prior: 50335369!
test02WrongPasswordForCartCreation
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'wrong pass'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self wrongPasswordResponseBody.! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:01:14' prior: 50335520!
test04CreateCart
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'1234'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUserResponseBody.
	! !

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:01:26'!
FAILURE!

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:01:32'!
FAILURE!
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:02:00' prior: 50335584!
test04CreateCart
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'1234'.
	
	api:= StoreAPI workingWith: StoreSystem new.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: '0|1'.
	! !

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:02:04'!
FAILURE!
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:03:17' prior: 50335603!
test04CreateCart
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'1234'.
	
	api:= StoreAPI workingWith: StoreSystem withUserDataBase: self defaultUserDataBase.
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: '0|1'.
	! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:03:28' prior: 50335619!
test04CreateCart
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'1234'.
	
	api:= StoreAPI workingWith: (StoreSystem withUserDataBase: self defaultUserDataBase).
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: '0|1'.
	! !

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:03:31'!
ERROR!
!APIMockTest methodsFor: 'support' stamp: 's 11/5/2023 21:03:36'!
defaultUserDataBase
	self shouldBeImplemented.! !
!APIMockTest methodsFor: 'support' stamp: 's 11/5/2023 21:04:24' prior: 50335650!
defaultUserDataBase
	| x |
	x:= Dictionary  new.
	x at: 'Pedro' put: 'pass'.
	x at: 'Tomas' put: '1234'.! !
!APIMockTest methodsFor: 'support' stamp: 's 11/5/2023 21:04:31' prior: 50335655!
defaultUserDataBase
	| x |
	x:= Dictionary  new.
	x at: 'Pedro' put: 'pass'.
	x at: 'Tomas' put: '1234'.
	^x.! !
!APIMockTest methodsFor: 'support' stamp: 's 11/5/2023 21:04:43' prior: 50335661!
defaultUserDataBase
	| userDatabase |
	userDatabase:= Dictionary  new.
	userDatabase at: 'Pedro' put: 'pass'.
	userDatabase at: 'Tomas' put: '1234'.
	^userDatabase.! !

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:04:44'!
ERROR!
!StoreSystem class methodsFor: 'instance creation' stamp: 's 11/5/2023 21:04:51'!
withUserDataBase: aRenameMe1 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithUserDataBase: aRenameMe1 ! !
!StoreSystem class methodsFor: 'instance creation' stamp: 's 11/5/2023 21:04:53' prior: 50335679!
withUserDataBase: aRenameMe1 
	
	^self new initializeWithUserDataBase: aRenameMe1 ! !
!StoreSystem class methodsFor: 'instance creation' stamp: 's 11/5/2023 21:05:01' prior: 50335688!
withUserDataBase: aUserDatabase 
	
	^self new initializeWithUserDataBase: aUserDatabase ! !

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:05:02'!
ERROR!

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 's 11/5/2023 21:05:06'!
Object subclass: #StoreSystem
	instanceVariableNames: 'usersDatabase passwords userDatabase'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreSystem methodsFor: 'initialize' stamp: 's 11/5/2023 21:05:06'!
initializeWithUserDataBase: aUserDatabase 
	self shouldBeImplemented.
	userDatabase := aUserDatabase.! !
!StoreSystem methodsFor: 'initialize' stamp: 's 11/5/2023 21:05:08' prior: 50335710!
initializeWithUserDataBase: aUserDatabase 
	
	userDatabase := aUserDatabase.! !

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:05:09'!
FAILURE!

!methodRemoval: StoreSystem #initialize stamp: 's 11/5/2023 21:05:19'!
initialize
	usersDatabase:= Dictionary new at: 'Pedro' put:'pass';yourself.!
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:05:35' prior: 50335396!
test03InvalidRequestForCartCreation
	| request api response |
	request:= Dictionary new.
	
	api:= StoreAPI workingWith: (StoreSystem withUserDataBase: self defaultUserDataBase).
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 400.
	! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:05:38' prior: 50335569!
test02WrongPasswordForCartCreation
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'wrong pass'.
	
	api:= StoreAPI workingWith: (StoreSystem withUserDataBase: self defaultUserDataBase).
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self wrongPasswordResponseBody.! !
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:05:41' prior: 50335555!
test01InvalidUserForCartCreation
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Juan'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: (StoreSystem withUserDataBase: self defaultUserDataBase).
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: self invalidUserResponseBody.! !

!testRun: #APIMockTest #test01InvalidUserForCartCreation stamp: 's 11/5/2023 21:05:42'!
FAILURE!

!testRun: #APIMockTest #test01InvalidUserForCartCreation stamp: 's 11/5/2023 21:06:30'!
FAILURE!

!testRun: #APIMockTest #test02WrongPasswordForCartCreation stamp: 's 11/5/2023 21:06:30'!
FAILURE!

!testRun: #APIMockTest #test03InvalidRequestForCartCreation stamp: 's 11/5/2023 21:06:30'!
PASSED!

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:06:30'!
FAILURE!

!testRun: #APIMockTest #test01InvalidUserForCartCreation stamp: 's 11/5/2023 21:06:35'!
FAILURE!
!StoreSystem methodsFor: 'initialize' stamp: 's 11/5/2023 21:07:15' prior: 50335716!
initializeWithUserDataBase: aUserDatabase 
	
	usersDatabase := aUserDatabase.! !

Object subclass: #StoreSystem
	instanceVariableNames: 'usersDatabase passwords '
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreSystem category: 'TusLibros' stamp: 's 11/5/2023 21:07:22'!
Object subclass: #StoreSystem
	instanceVariableNames: 'usersDatabase passwords'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #APIMockTest #test01InvalidUserForCartCreation stamp: 's 11/5/2023 21:07:24'!
PASSED!

!testRun: #APIMockTest #test02WrongPasswordForCartCreation stamp: 's 11/5/2023 21:07:24'!
PASSED!

!testRun: #APIMockTest #test03InvalidRequestForCartCreation stamp: 's 11/5/2023 21:07:24'!
PASSED!

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:07:24'!
FAILURE!

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:07:24'!
FAILURE!
!APIMockTest methodsFor: 'tests' stamp: 's 11/5/2023 21:07:34' prior: 50335633!
test04CreateCart
	| request api response |
	request:= Dictionary new.
	request at: #clientId put:'Pedro'.
	request at: #password put:'pass'.
	
	api:= StoreAPI workingWith: (StoreSystem withUserDataBase: self defaultUserDataBase).
	
	response := api createCartBasedOn: request.
	
	self assert: response code equals: 200.
	self assert: response body equals: '0|1'.
	! !

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:07:35'!
ERROR!

!testRun: #APIMockTest #test04CreateCart stamp: 's 11/5/2023 21:07:43'!
ERROR!
!StoreAPI methodsFor: 'metodos' stamp: 's 11/5/2023 21:09:41' prior: 50335291!
createCartBasedOn: request 
	| clientId password cart |
	clientId:= request at: #clientId ifAbsent:[^Response withCode:400].
	password:= request at: #password ifAbsent:[^Response withCode:400].
	
	[ cart:= storeSystem createCartFor: clientId withPassword: password] 
		on: Error 
		do: [:anError| ^Response withCode:200 withBody: '1|', anError messageText].
		
	^Response withCode:200 withBody:'0|', cart.
	! !
!StoreSystem methodsFor: 'metodos' stamp: 's 11/5/2023 21:10:08' prior: 50335484!
createCartFor: clientId withPassword: password 
	self authenticate: clientId withPassword: password.
	Cart  new! !
!StoreTest methodsFor: 'support -- cashier' stamp: 's 11/5/2023 21:20:46' prior: 50332845!
createExpiredCard
	^CreditCard withCardNumber:1 expiring: FixedGregorianDate theBeginningOfTime monthOfYear ownedBy:'Juan'.! !

----QUIT----(5 November 2023 21:21:48) CuisUniversity-5981.image priorSource: 88069!